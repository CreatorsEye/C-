#region Imports

using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Text;
using System.Runtime.InteropServices;
using System.Text;
using System.Windows.Forms;
using System.IO;
using System.Drawing.Imaging;
using System.Linq;

#endregion

namespace WindowsFormsApplication2
{
        #region Installing
    #region RoundRectangle

    static class RoundRectangle
    {
        public static GraphicsPath RoundRect(Rectangle Rectangle, int Curve)
        {
            GraphicsPath P = new GraphicsPath();
            int ArcRectangleWidth = Curve * 2;
            P.AddArc(new Rectangle(Rectangle.X, Rectangle.Y, ArcRectangleWidth, ArcRectangleWidth), -180, 90);
            P.AddArc(new Rectangle(Rectangle.Width - ArcRectangleWidth + Rectangle.X, Rectangle.Y, ArcRectangleWidth, ArcRectangleWidth), -90, 90);
            P.AddArc(new Rectangle(Rectangle.Width - ArcRectangleWidth + Rectangle.X, Rectangle.Height - ArcRectangleWidth + Rectangle.Y, ArcRectangleWidth, ArcRectangleWidth), 0, 90);
            P.AddArc(new Rectangle(Rectangle.X, Rectangle.Height - ArcRectangleWidth + Rectangle.Y, ArcRectangleWidth, ArcRectangleWidth), 90, 90);
            P.AddLine(new Point(Rectangle.X, Rectangle.Height - ArcRectangleWidth + Rectangle.Y), new Point(Rectangle.X, Curve + Rectangle.Y));
            return P;
        }
        public static GraphicsPath RoundRect(int X, int Y, int Width, int Height, int Curve)
        {
            Rectangle Rectangle = new Rectangle(X, Y, Width, Height);
            GraphicsPath P = new GraphicsPath();
            int ArcRectangleWidth = Curve * 2;
            P.AddArc(new Rectangle(Rectangle.X, Rectangle.Y, ArcRectangleWidth, ArcRectangleWidth), -180, 90);
            P.AddArc(new Rectangle(Rectangle.Width - ArcRectangleWidth + Rectangle.X, Rectangle.Y, ArcRectangleWidth, ArcRectangleWidth), -90, 90);
            P.AddArc(new Rectangle(Rectangle.Width - ArcRectangleWidth + Rectangle.X, Rectangle.Height - ArcRectangleWidth + Rectangle.Y, ArcRectangleWidth, ArcRectangleWidth), 0, 90);
            P.AddArc(new Rectangle(Rectangle.X, Rectangle.Height - ArcRectangleWidth + Rectangle.Y, ArcRectangleWidth, ArcRectangleWidth), 90, 90);
            P.AddLine(new Point(Rectangle.X, Rectangle.Height - ArcRectangleWidth + Rectangle.Y), new Point(Rectangle.X, Curve + Rectangle.Y));
            return P;
        }
        public static GraphicsPath RoundedTopRect(Rectangle Rectangle, int Curve)
        {
            GraphicsPath P = new GraphicsPath();
            int ArcRectangleWidth = Curve * 2;
            P.AddArc(new Rectangle(Rectangle.X, Rectangle.Y, ArcRectangleWidth, ArcRectangleWidth), -180, 90);
            P.AddArc(new Rectangle(Rectangle.Width - ArcRectangleWidth + Rectangle.X, Rectangle.Y, ArcRectangleWidth, ArcRectangleWidth), -90, 90);
            P.AddLine(new Point(Rectangle.X + Rectangle.Width, Rectangle.Y + ArcRectangleWidth), new Point(Rectangle.X + Rectangle.Width, Rectangle.Y + Rectangle.Height - 1));
            P.AddLine(new Point(Rectangle.X, Rectangle.Height - 1 + Rectangle.Y), new Point(Rectangle.X, Rectangle.Y + Curve));
            return P;
        }
    }

    #endregion
#endregion
        // Mad By Yassine Abbani
    // Full List

        #region theme Container
    abstract class Ce_ThemeContainer : ContainerControl
        {

            #region " Initialization "

            protected Graphics G;

            protected Bitmap B;
            public Ce_ThemeContainer()
            {
                SetStyle((ControlStyles)139270, true);

                _ImageSize = Size.Empty;
                Font = new Font("Verdana", 8);

                MeasureBitmap = new Bitmap(1, 1);
                MeasureGraphics = Graphics.FromImage(MeasureBitmap);

                DrawRadialPath = new GraphicsPath();

                InvalidateCustimization();
            }

            protected override sealed void OnHandleCreated(EventArgs e)
            {
                if (DoneCreation)
                    InitializeMessages();

                InvalidateCustimization();
                ColorHook();

                if (!(_LockWidth == 0))
                    Width = _LockWidth;
                if (!(_LockHeight == 0))
                    Height = _LockHeight;
                if (!_ControlMode)
                    base.Dock = DockStyle.Fill;

                Transparent = _Transparent;
                if (_Transparent && _BackColor)
                    BackColor = Color.Transparent;

                base.OnHandleCreated(e);
            }

            private bool DoneCreation;
            protected override sealed void OnParentChanged(EventArgs e)
            {
                base.OnParentChanged(e);

                if (Parent == null)
                    return;
                _IsParentForm = Parent is Form;

                if (!_ControlMode)
                {
                    InitializeMessages();

                    if (_IsParentForm)
                    {
                        ParentForm.FormBorderStyle = _BorderStyle;
                        ParentForm.TransparencyKey = _TransparencyKey;

                        if (!DesignMode)
                        {
                            ParentForm.Shown += FormShown;
                        }
                    }

                    Parent.BackColor = BackColor;
                }

                OnCreation();
                DoneCreation = true;
                InvalidateTimer();
            }

            #endregion

            private void DoAnimation(bool i)
            {
                OnAnimation();
                if (i)
                    Invalidate();
            }

            protected override sealed void OnPaint(PaintEventArgs e)
            {
                if (Width == 0 || Height == 0)
                    return;

                if (_Transparent && _ControlMode)
                {
                    PaintHook();
                    e.Graphics.DrawImage(B, 0, 0);
                }
                else
                {
                    G = e.Graphics;
                    PaintHook();
                }
            }

            protected override void OnHandleDestroyed(EventArgs e)
            {
                ThemeShare.RemoveAnimationCallback(DoAnimation);
                base.OnHandleDestroyed(e);
            }

            private bool HasShown;
            private void FormShown(object sender, EventArgs e)
            {
                if (_ControlMode || HasShown)
                    return;

                if (_StartPosition == FormStartPosition.CenterParent || _StartPosition == FormStartPosition.CenterScreen)
                {
                    Rectangle SB = Screen.PrimaryScreen.Bounds;
                    Rectangle CB = ParentForm.Bounds;
                    ParentForm.Location = new Point(SB.Width / 2 - CB.Width / 2, SB.Height / 2 - CB.Width / 2);
                }

                HasShown = true;
            }


            #region " Size Handling "

            private Rectangle Frame;
            protected override sealed void OnSizeChanged(EventArgs e)
            {
                if (_Movable && !_ControlMode)
                {
                    Frame = new Rectangle(7, 7, Width - 14, _Header - 7);
                }

                InvalidateBitmap();
                Invalidate();

                base.OnSizeChanged(e);
            }

            protected override void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified)
            {
                if (!(_LockWidth == 0))
                    width = _LockWidth;
                if (!(_LockHeight == 0))
                    height = _LockHeight;
                base.SetBoundsCore(x, y, width, height, specified);
            }

            #endregion

            #region " State Handling "

            protected MouseState State;
            private void SetState(MouseState current)
            {
                State = current;
                Invalidate();
            }

            protected override void OnMouseMove(MouseEventArgs e)
            {
                if (!(_IsParentForm && ParentForm.WindowState == FormWindowState.Maximized))
                {
                    if (_Sizable && !_ControlMode)
                        InvalidateMouse();
                }

                base.OnMouseMove(e);
            }

            protected override void OnEnabledChanged(EventArgs e)
            {
                if (Enabled)
                    SetState(MouseState.None);
                else
                    SetState(MouseState.Block);
                base.OnEnabledChanged(e);
            }

            protected override void OnMouseEnter(EventArgs e)
            {
                SetState(MouseState.Over);
                base.OnMouseEnter(e);
            }

            protected override void OnMouseUp(MouseEventArgs e)
            {
                SetState(MouseState.Over);
                base.OnMouseUp(e);
            }

            protected override void OnMouseLeave(EventArgs e)
            {
                SetState(MouseState.None);

                if (GetChildAtPoint(PointToClient(MousePosition)) != null)
                {
                    if (_Sizable && !_ControlMode)
                    {
                        Cursor = Cursors.Default;
                        Previous = 0;
                    }
                }

                base.OnMouseLeave(e);
            }

            protected override void OnMouseDown(MouseEventArgs e)
            {
                if (e.Button == MouseButtons.Left)
                    SetState(MouseState.Down);

                if (!(_IsParentForm && ParentForm.WindowState == FormWindowState.Maximized || _ControlMode))
                {
                    if (_Movable && Frame.Contains(e.Location))
                    {
                        Capture = false;
                        WM_LMBUTTONDOWN = true;
                        DefWndProc(ref Messages[0]);
                    }
                    else if (_Sizable && !(Previous == 0))
                    {
                        Capture = false;
                        WM_LMBUTTONDOWN = true;
                        DefWndProc(ref Messages[Previous]);
                    }
                }

                base.OnMouseDown(e);
            }

            private bool WM_LMBUTTONDOWN;
            protected override void WndProc(ref Message m)
            {
                base.WndProc(ref m);

                if (WM_LMBUTTONDOWN && m.Msg == 513)
                {
                    WM_LMBUTTONDOWN = false;

                    SetState(MouseState.Over);
                    if (!_SmartBounds)
                        return;

                    if (IsParentMdi)
                    {
                        CorrectBounds(new Rectangle(Point.Empty, Parent.Parent.Size));
                    }
                    else
                    {
                        CorrectBounds(Screen.FromControl(Parent).WorkingArea);
                    }
                }
            }

            private Point GetIndexPoint;
            private bool B1;
            private bool B2;
            private bool B3;
            private bool B4;
            private int GetIndex()
            {
                GetIndexPoint = PointToClient(MousePosition);
                B1 = GetIndexPoint.X < 7;
                B2 = GetIndexPoint.X > Width - 7;
                B3 = GetIndexPoint.Y < 7;
                B4 = GetIndexPoint.Y > Height - 7;

                if (B1 && B3)
                    return 4;
                if (B1 && B4)
                    return 7;
                if (B2 && B3)
                    return 5;
                if (B2 && B4)
                    return 8;
                if (B1)
                    return 1;
                if (B2)
                    return 2;
                if (B3)
                    return 3;
                if (B4)
                    return 6;
                return 0;
            }

            private int Current;
            private int Previous;
            private void InvalidateMouse()
            {
                Current = GetIndex();
                if (Current == Previous)
                    return;

                Previous = Current;
                switch (Previous)
                {
                    case 0:
                        Cursor = Cursors.Default;
                        break;
                    case 1:
                    case 2:
                        Cursor = Cursors.SizeWE;
                        break;
                    case 3:
                    case 6:
                        Cursor = Cursors.SizeNS;
                        break;
                    case 4:
                    case 8:
                        Cursor = Cursors.SizeNWSE;
                        break;
                    case 5:
                    case 7:
                        Cursor = Cursors.SizeNESW;
                        break;
                }
            }

            private Message[] Messages = new Message[9];
            private void InitializeMessages()
            {
                Messages[0] = Message.Create(Parent.Handle, 161, new IntPtr(2), IntPtr.Zero);
                for (int I = 1; I <= 8; I++)
                {
                    Messages[I] = Message.Create(Parent.Handle, 161, new IntPtr(I + 9), IntPtr.Zero);
                }
            }

            private void CorrectBounds(Rectangle bounds)
            {
                if (Parent.Width > bounds.Width)
                    Parent.Width = bounds.Width;
                if (Parent.Height > bounds.Height)
                    Parent.Height = bounds.Height;

                int X = Parent.Location.X;
                int Y = Parent.Location.Y;

                if (X < bounds.X)
                    X = bounds.X;
                if (Y < bounds.Y)
                    Y = bounds.Y;

                int Width = bounds.X + bounds.Width;
                int Height = bounds.Y + bounds.Height;

                if (X + Parent.Width > Width)
                    X = Width - Parent.Width;
                if (Y + Parent.Height > Height)
                    Y = Height - Parent.Height;

                Parent.Location = new Point(X, Y);
            }

            #endregion


            #region " Base Properties "

            public override DockStyle Dock
            {
                get { return base.Dock; }
                set
                {
                    if (!_ControlMode)
                        return;
                    base.Dock = value;
                }
            }

            private bool _BackColor;
            [Category("Misc")]
            public override Color BackColor
            {
                get { return base.BackColor; }
                set
                {
                    if (value == base.BackColor)
                        return;

                    if (!IsHandleCreated && _ControlMode && value == Color.Transparent)
                    {
                        _BackColor = true;
                        return;
                    }

                    base.BackColor = value;
                    if (Parent != null)
                    {
                        if (!_ControlMode)
                            Parent.BackColor = value;
                        ColorHook();
                    }
                }
            }

            public override Size MinimumSize
            {
                get { return base.MinimumSize; }
                set
                {
                    base.MinimumSize = value;
                    if (Parent != null)
                        Parent.MinimumSize = value;
                }
            }

            public override Size MaximumSize
            {
                get { return base.MaximumSize; }
                set
                {
                    base.MaximumSize = value;
                    if (Parent != null)
                        Parent.MaximumSize = value;
                }
            }

            public override string Text
            {
                get { return base.Text; }
                set
                {
                    base.Text = value;
                    Invalidate();
                }
            }

            public override Font Font
            {
                get { return base.Font; }
                set
                {
                    base.Font = value;
                    Invalidate();
                }
            }

            [Browsable(false), EditorBrowsable(EditorBrowsableState.Never), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
            public override Color ForeColor
            {
                get { return Color.Empty; }
                set { }
            }
            [Browsable(false), EditorBrowsable(EditorBrowsableState.Never), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
            public override Image BackgroundImage
            {
                get { return null; }
                set { }
            }
            [Browsable(false), EditorBrowsable(EditorBrowsableState.Never), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
            public override ImageLayout BackgroundImageLayout
            {
                get { return ImageLayout.None; }
                set { }
            }

            #endregion

            #region " Public Properties "

            private bool _SmartBounds = true;
            public bool SmartBounds
            {
                get { return _SmartBounds; }
                set { _SmartBounds = value; }
            }

            private bool _Movable = true;
            public bool Movable
            {
                get { return _Movable; }
                set { _Movable = value; }
            }

            private bool _Sizable = true;
            public bool Sizable
            {
                get { return _Sizable; }
                set { _Sizable = value; }
            }

            private Color _TransparencyKey;
            public Color TransparencyKey
            {
                get
                {
                    if (_IsParentForm && !_ControlMode)
                        return ParentForm.TransparencyKey;
                    else
                        return _TransparencyKey;
                }
                set
                {
                    if (value == _TransparencyKey)
                        return;
                    _TransparencyKey = value;

                    if (_IsParentForm && !_ControlMode)
                    {
                        ParentForm.TransparencyKey = value;
                        ColorHook();
                    }
                }
            }

            private FormBorderStyle _BorderStyle;
            public FormBorderStyle BorderStyle
            {
                get
                {
                    if (_IsParentForm && !_ControlMode)
                        return ParentForm.FormBorderStyle;
                    else
                        return _BorderStyle;
                }
                set
                {
                    _BorderStyle = value;

                    if (_IsParentForm && !_ControlMode)
                    {
                        ParentForm.FormBorderStyle = value;

                        if (!(value == FormBorderStyle.None))
                        {
                            Movable = false;
                            Sizable = false;
                        }
                    }
                }
            }

            private FormStartPosition _StartPosition;
            public FormStartPosition StartPosition
            {
                get
                {
                    if (_IsParentForm && !_ControlMode)
                        return ParentForm.StartPosition;
                    else
                        return _StartPosition;
                }
                set
                {
                    _StartPosition = value;

                    if (_IsParentForm && !_ControlMode)
                    {
                        ParentForm.StartPosition = value;
                    }
                }
            }

            private bool _NoRounding;
            public bool NoRounding
            {
                get { return _NoRounding; }
                set
                {
                    _NoRounding = value;
                    Invalidate();
                }
            }

            private Image _Image;
            public Image Image
            {
                get { return _Image; }
                set
                {
                    if (value == null)
                        _ImageSize = Size.Empty;
                    else
                        _ImageSize = value.Size;

                    _Image = value;
                    Invalidate();
                }
            }

            private Dictionary<string, Color> Items = new Dictionary<string, Color>();
            public Bloom[] Colors
            {
                get
                {
                    List<Bloom> T = new List<Bloom>();
                    Dictionary<string, Color>.Enumerator E = Items.GetEnumerator();

                    while (E.MoveNext())
                    {
                        T.Add(new Bloom(E.Current.Key, E.Current.Value));
                    }

                    return T.ToArray();
                }
                set
                {
                    foreach (Bloom B in value)
                    {
                        if (Items.ContainsKey(B.Name))
                            Items[B.Name] = B.Value;
                    }

                    InvalidateCustimization();
                    ColorHook();
                    Invalidate();
                }
            }

            private string _Customization;
            public string Customization
            {
                get { return _Customization; }
                set
                {
                    if (value == _Customization)
                        return;

                    byte[] Data = null;
                    Bloom[] Items = Colors;

                    try
                    {
                        Data = Convert.FromBase64String(value);
                        for (int I = 0; I <= Items.Length - 1; I++)
                        {
                            Items[I].Value = Color.FromArgb(BitConverter.ToInt32(Data, I * 4));
                        }
                    }
                    catch
                    {
                        return;
                    }

                    _Customization = value;

                    Colors = Items;
                    ColorHook();
                    Invalidate();
                }
            }

            private bool _Transparent;
            public bool Transparent
            {
                get { return _Transparent; }
                set
                {
                    _Transparent = value;
                    if (!(IsHandleCreated || _ControlMode))
                        return;

                    if (!value && !(BackColor.A == 255))
                    {
                        throw new Exception("Unable to change value to false while a transparent BackColor is in use.");
                    }

                    SetStyle(ControlStyles.Opaque, !value);
                    SetStyle(ControlStyles.SupportsTransparentBackColor, value);

                    InvalidateBitmap();
                    Invalidate();
                }
            }

            #endregion

            #region " Private Properties "

            private Size _ImageSize;
            protected Size ImageSize
            {
                get { return _ImageSize; }
            }

            private bool _IsParentForm;
            protected bool IsParentForm
            {
                get { return _IsParentForm; }
            }

            protected bool IsParentMdi
            {
                get
                {
                    if (Parent == null)
                        return false;
                    return Parent.Parent != null;
                }
            }

            private int _LockWidth;
            protected int LockWidth
            {
                get { return _LockWidth; }
                set
                {
                    _LockWidth = value;
                    if (!(LockWidth == 0) && IsHandleCreated)
                        Width = LockWidth;
                }
            }

            private int _LockHeight;
            protected int LockHeight
            {
                get { return _LockHeight; }
                set
                {
                    _LockHeight = value;
                    if (!(LockHeight == 0) && IsHandleCreated)
                        Height = LockHeight;
                }
            }

            private int _Header = 24;
            protected int Header
            {
                get { return _Header; }
                set
                {
                    _Header = value;

                    if (!_ControlMode)
                    {
                        Frame = new Rectangle(7, 7, Width - 14, value - 7);
                        Invalidate();
                    }
                }
            }

            private bool _ControlMode;
            protected bool ControlMode
            {
                get { return _ControlMode; }
                set
                {
                    _ControlMode = value;

                    Transparent = _Transparent;
                    if (_Transparent && _BackColor)
                        BackColor = Color.Transparent;

                    InvalidateBitmap();
                    Invalidate();
                }
            }

            private bool _IsAnimated;
            protected bool IsAnimated
            {
                get { return _IsAnimated; }
                set
                {
                    _IsAnimated = value;
                    InvalidateTimer();
                }
            }

            #endregion


            #region " Property Helpers "

            protected Pen GetPen(string name)
            {
                return new Pen(Items[name]);
            }
            protected Pen GetPen(string name, float width)
            {
                return new Pen(Items[name], width);
            }

            protected SolidBrush GetBrush(string name)
            {
                return new SolidBrush(Items[name]);
            }

            protected Color GetColor(string name)
            {
                return Items[name];
            }

            protected void SetColor(string name, Color value)
            {
                if (Items.ContainsKey(name))
                    Items[name] = value;
                else
                    Items.Add(name, value);
            }
            protected void SetColor(string name, byte r, byte g, byte b)
            {
                SetColor(name, Color.FromArgb(r, g, b));
            }
            protected void SetColor(string name, byte a, byte r, byte g, byte b)
            {
                SetColor(name, Color.FromArgb(a, r, g, b));
            }
            protected void SetColor(string name, byte a, Color value)
            {
                SetColor(name, Color.FromArgb(a, value));
            }

            private void InvalidateBitmap()
            {
                if (_Transparent && _ControlMode)
                {
                    if (Width == 0 || Height == 0)
                        return;
                    B = new Bitmap(Width, Height, PixelFormat.Format32bppPArgb);
                    G = Graphics.FromImage(B);
                }
                else
                {
                    G = null;
                    B = null;
                }
            }

            private void InvalidateCustimization()
            {
                MemoryStream M = new MemoryStream(Items.Count * 4);

                foreach (Bloom B in Colors)
                {
                    M.Write(BitConverter.GetBytes(B.Value.ToArgb()), 0, 4);
                }

                M.Close();
                _Customization = Convert.ToBase64String(M.ToArray());
            }

            private void InvalidateTimer()
            {
                if (DesignMode || !DoneCreation)
                    return;

                if (_IsAnimated)
                {
                    ThemeShare.AddAnimationCallback(DoAnimation);
                }
                else
                {
                    ThemeShare.RemoveAnimationCallback(DoAnimation);
                }
            }

            #endregion


            #region " User Hooks "

            protected abstract void ColorHook();
            protected abstract void PaintHook();

            protected virtual void OnCreation()
            {
            }

            protected virtual void OnAnimation()
            {
            }

            #endregion


            #region " Offset "

            private Rectangle OffsetReturnRectangle;
            protected Rectangle Offset(Rectangle r, int amount)
            {
                OffsetReturnRectangle = new Rectangle(r.X + amount, r.Y + amount, r.Width - (amount * 2), r.Height - (amount * 2));
                return OffsetReturnRectangle;
            }

            private Size OffsetReturnSize;
            protected Size Offset(Size s, int amount)
            {
                OffsetReturnSize = new Size(s.Width + amount, s.Height + amount);
                return OffsetReturnSize;
            }

            private Point OffsetReturnPoint;
            protected Point Offset(Point p, int amount)
            {
                OffsetReturnPoint = new Point(p.X + amount, p.Y + amount);
                return OffsetReturnPoint;
            }

            #endregion

            #region " Center "


            private Point CenterReturn;
            protected Point Center(Rectangle p, Rectangle c)
            {
                CenterReturn = new Point((p.Width / 2 - c.Width / 2) + p.X + c.X, (p.Height / 2 - c.Height / 2) + p.Y + c.Y);
                return CenterReturn;
            }
            protected Point Center(Rectangle p, Size c)
            {
                CenterReturn = new Point((p.Width / 2 - c.Width / 2) + p.X, (p.Height / 2 - c.Height / 2) + p.Y);
                return CenterReturn;
            }

            protected Point Center(Rectangle child)
            {
                return Center(Width, Height, child.Width, child.Height);
            }
            protected Point Center(Size child)
            {
                return Center(Width, Height, child.Width, child.Height);
            }
            protected Point Center(int childWidth, int childHeight)
            {
                return Center(Width, Height, childWidth, childHeight);
            }

            protected Point Center(Size p, Size c)
            {
                return Center(p.Width, p.Height, c.Width, c.Height);
            }

            protected Point Center(int pWidth, int pHeight, int cWidth, int cHeight)
            {
                CenterReturn = new Point(pWidth / 2 - cWidth / 2, pHeight / 2 - cHeight / 2);
                return CenterReturn;
            }

            #endregion

            #region " Measure "

            private Bitmap MeasureBitmap;

            private Graphics MeasureGraphics;
            protected Size Measure()
            {
                lock (MeasureGraphics)
                {
                    return MeasureGraphics.MeasureString(Text, Font, Width).ToSize();
                }
            }
            protected Size Measure(string text)
            {
                lock (MeasureGraphics)
                {
                    return MeasureGraphics.MeasureString(text, Font, Width).ToSize();
                }
            }

            #endregion


            #region " DrawPixel "


            private SolidBrush DrawPixelBrush;
            protected void DrawPixel(Color c1, int x, int y)
            {
                if (_Transparent)
                {
                    B.SetPixel(x, y, c1);
                }
                else
                {
                    DrawPixelBrush = new SolidBrush(c1);
                    G.FillRectangle(DrawPixelBrush, x, y, 1, 1);
                }
            }

            #endregion

            #region " DrawCorners "


            private SolidBrush DrawCornersBrush;
            protected void DrawCorners(Color c1, int offset)
            {
                DrawCorners(c1, 0, 0, Width, Height, offset);
            }
            protected void DrawCorners(Color c1, Rectangle r1, int offset)
            {
                DrawCorners(c1, r1.X, r1.Y, r1.Width, r1.Height, offset);
            }
            protected void DrawCorners(Color c1, int x, int y, int width, int height, int offset)
            {
                DrawCorners(c1, x + offset, y + offset, width - (offset * 2), height - (offset * 2));
            }

            protected void DrawCorners(Color c1)
            {
                DrawCorners(c1, 0, 0, Width, Height);
            }
            protected void DrawCorners(Color c1, Rectangle r1)
            {
                DrawCorners(c1, r1.X, r1.Y, r1.Width, r1.Height);
            }
            protected void DrawCorners(Color c1, int x, int y, int width, int height)
            {
                if (_NoRounding)
                    return;

                if (_Transparent)
                {
                    B.SetPixel(x, y, c1);
                    B.SetPixel(x + (width - 1), y, c1);
                    B.SetPixel(x, y + (height - 1), c1);
                    B.SetPixel(x + (width - 1), y + (height - 1), c1);
                }
                else
                {
                    DrawCornersBrush = new SolidBrush(c1);
                    G.FillRectangle(DrawCornersBrush, x, y, 1, 1);
                    G.FillRectangle(DrawCornersBrush, x + (width - 1), y, 1, 1);
                    G.FillRectangle(DrawCornersBrush, x, y + (height - 1), 1, 1);
                    G.FillRectangle(DrawCornersBrush, x + (width - 1), y + (height - 1), 1, 1);
                }
            }

            #endregion

            #region " DrawBorders "

            protected void DrawBorders(Pen p1, int offset)
            {
                DrawBorders(p1, 0, 0, Width, Height, offset);
            }
            protected void DrawBorders(Pen p1, Rectangle r, int offset)
            {
                DrawBorders(p1, r.X, r.Y, r.Width, r.Height, offset);
            }
            protected void DrawBorders(Pen p1, int x, int y, int width, int height, int offset)
            {
                DrawBorders(p1, x + offset, y + offset, width - (offset * 2), height - (offset * 2));
            }

            protected void DrawBorders(Pen p1)
            {
                DrawBorders(p1, 0, 0, Width, Height);
            }
            protected void DrawBorders(Pen p1, Rectangle r)
            {
                DrawBorders(p1, r.X, r.Y, r.Width, r.Height);
            }
            protected void DrawBorders(Pen p1, int x, int y, int width, int height)
            {
                G.DrawRectangle(p1, x, y, width - 1, height - 1);
            }

            #endregion

            #region " DrawText "

            private Point DrawTextPoint;

            private Size DrawTextSize;
            protected void DrawText(Brush b1, HorizontalAlignment a, int x, int y)
            {
                DrawText(b1, Text, a, x, y);
            }
            protected void DrawText(Brush b1, string text, HorizontalAlignment a, int x, int y)
            {
                if (text.Length == 0)
                    return;

                DrawTextSize = Measure(text);
                DrawTextPoint = new Point(Width / 2 - DrawTextSize.Width / 2, Header / 2 - DrawTextSize.Height / 2);

                switch (a)
                {
                    case HorizontalAlignment.Left:
                        G.DrawString(text, Font, b1, x, DrawTextPoint.Y + y);
                        break;
                    case HorizontalAlignment.Center:
                        G.DrawString(text, Font, b1, DrawTextPoint.X + x, DrawTextPoint.Y + y);
                        break;
                    case HorizontalAlignment.Right:
                        G.DrawString(text, Font, b1, Width - DrawTextSize.Width - x, DrawTextPoint.Y + y);
                        break;
                }
            }

            protected void DrawText(Brush b1, Point p1)
            {
                if (Text.Length == 0)
                    return;
                G.DrawString(Text, Font, b1, p1);
            }
            protected void DrawText(Brush b1, int x, int y)
            {
                if (Text.Length == 0)
                    return;
                G.DrawString(Text, Font, b1, x, y);
            }

            #endregion

            #region " DrawImage "


            private Point DrawImagePoint;
            protected void DrawImage(HorizontalAlignment a, int x, int y)
            {
                DrawImage(_Image, a, x, y);
            }
            protected void DrawImage(Image image, HorizontalAlignment a, int x, int y)
            {
                if (image == null)
                    return;
                DrawImagePoint = new Point(Width / 2 - image.Width / 2, Header / 2 - image.Height / 2);

                switch (a)
                {
                    case HorizontalAlignment.Left:
                        G.DrawImage(image, x, DrawImagePoint.Y + y, image.Width, image.Height);
                        break;
                    case HorizontalAlignment.Center:
                        G.DrawImage(image, DrawImagePoint.X + x, DrawImagePoint.Y + y, image.Width, image.Height);
                        break;
                    case HorizontalAlignment.Right:
                        G.DrawImage(image, Width - image.Width - x, DrawImagePoint.Y + y, image.Width, image.Height);
                        break;
                }
            }

            protected void DrawImage(Point p1)
            {
                DrawImage(_Image, p1.X, p1.Y);
            }
            protected void DrawImage(int x, int y)
            {
                DrawImage(_Image, x, y);
            }

            protected void DrawImage(Image image, Point p1)
            {
                DrawImage(image, p1.X, p1.Y);
            }
            protected void DrawImage(Image image, int x, int y)
            {
                if (image == null)
                    return;
                G.DrawImage(image, x, y, image.Width, image.Height);
            }

            #endregion

            #region " DrawGradient "

            private LinearGradientBrush DrawGradientBrush;

            private Rectangle DrawGradientRectangle;
            protected void DrawGradient(ColorBlend blend, int x, int y, int width, int height)
            {
                DrawGradientRectangle = new Rectangle(x, y, width, height);
                DrawGradient(blend, DrawGradientRectangle);
            }
            protected void DrawGradient(ColorBlend blend, int x, int y, int width, int height, float angle)
            {
                DrawGradientRectangle = new Rectangle(x, y, width, height);
                DrawGradient(blend, DrawGradientRectangle, angle);
            }

            protected void DrawGradient(ColorBlend blend, Rectangle r)
            {
                DrawGradientBrush = new LinearGradientBrush(r, Color.Empty, Color.Empty, 90f);
                DrawGradientBrush.InterpolationColors = blend;
                G.FillRectangle(DrawGradientBrush, r);
            }
            protected void DrawGradient(ColorBlend blend, Rectangle r, float angle)
            {
                DrawGradientBrush = new LinearGradientBrush(r, Color.Empty, Color.Empty, angle);
                DrawGradientBrush.InterpolationColors = blend;
                G.FillRectangle(DrawGradientBrush, r);
            }


            protected void DrawGradient(Color c1, Color c2, int x, int y, int width, int height)
            {
                DrawGradientRectangle = new Rectangle(x, y, width, height);
                DrawGradient(c1, c2, DrawGradientRectangle);
            }
            protected void DrawGradient(Color c1, Color c2, int x, int y, int width, int height, float angle)
            {
                DrawGradientRectangle = new Rectangle(x, y, width, height);
                DrawGradient(c1, c2, DrawGradientRectangle, angle);
            }

            protected void DrawGradient(Color c1, Color c2, Rectangle r)
            {
                DrawGradientBrush = new LinearGradientBrush(r, c1, c2, 90f);
                G.FillRectangle(DrawGradientBrush, r);
            }
            protected void DrawGradient(Color c1, Color c2, Rectangle r, float angle)
            {
                DrawGradientBrush = new LinearGradientBrush(r, c1, c2, angle);
                G.FillRectangle(DrawGradientBrush, r);
            }

            #endregion

            #region " DrawRadial "

            private GraphicsPath DrawRadialPath;
            private PathGradientBrush DrawRadialBrush1;
            private LinearGradientBrush DrawRadialBrush2;

            private Rectangle DrawRadialRectangle;
            public void DrawRadial(ColorBlend blend, int x, int y, int width, int height)
            {
                DrawRadialRectangle = new Rectangle(x, y, width, height);
                DrawRadial(blend, DrawRadialRectangle, width / 2, height / 2);
            }
            public void DrawRadial(ColorBlend blend, int x, int y, int width, int height, Point center)
            {
                DrawRadialRectangle = new Rectangle(x, y, width, height);
                DrawRadial(blend, DrawRadialRectangle, center.X, center.Y);
            }
            public void DrawRadial(ColorBlend blend, int x, int y, int width, int height, int cx, int cy)
            {
                DrawRadialRectangle = new Rectangle(x, y, width, height);
                DrawRadial(blend, DrawRadialRectangle, cx, cy);
            }

            public void DrawRadial(ColorBlend blend, Rectangle r)
            {
                DrawRadial(blend, r, r.Width / 2, r.Height / 2);
            }
            public void DrawRadial(ColorBlend blend, Rectangle r, Point center)
            {
                DrawRadial(blend, r, center.X, center.Y);
            }
            public void DrawRadial(ColorBlend blend, Rectangle r, int cx, int cy)
            {
                DrawRadialPath.Reset();
                DrawRadialPath.AddEllipse(r.X, r.Y, r.Width - 1, r.Height - 1);

                DrawRadialBrush1 = new PathGradientBrush(DrawRadialPath);
                DrawRadialBrush1.CenterPoint = new Point(r.X + cx, r.Y + cy);
                DrawRadialBrush1.InterpolationColors = blend;

                if (G.SmoothingMode == SmoothingMode.AntiAlias)
                {
                    G.FillEllipse(DrawRadialBrush1, r.X + 1, r.Y + 1, r.Width - 3, r.Height - 3);
                }
                else
                {
                    G.FillEllipse(DrawRadialBrush1, r);
                }
            }


            protected void DrawRadial(Color c1, Color c2, int x, int y, int width, int height)
            {
                DrawRadialRectangle = new Rectangle(x, y, width, height);
                DrawRadial(c1, c2, DrawGradientRectangle);
            }
            protected void DrawRadial(Color c1, Color c2, int x, int y, int width, int height, float angle)
            {
                DrawRadialRectangle = new Rectangle(x, y, width, height);
                DrawRadial(c1, c2, DrawGradientRectangle, angle);
            }

            protected void DrawRadial(Color c1, Color c2, Rectangle r)
            {
                DrawRadialBrush2 = new LinearGradientBrush(r, c1, c2, 90f);
                G.FillRectangle(DrawGradientBrush, r);
            }
            protected void DrawRadial(Color c1, Color c2, Rectangle r, float angle)
            {
                DrawRadialBrush2 = new LinearGradientBrush(r, c1, c2, angle);
                G.FillEllipse(DrawGradientBrush, r);
            }

            #endregion

            #region " CreateRound "

            private GraphicsPath CreateRoundPath;

            private Rectangle CreateRoundRectangle;
            public GraphicsPath CreateRound(int x, int y, int width, int height, int slope)
            {
                CreateRoundRectangle = new Rectangle(x, y, width, height);
                return CreateRound(CreateRoundRectangle, slope);
            }

            public GraphicsPath CreateRound(Rectangle r, int slope)
            {
                CreateRoundPath = new GraphicsPath(FillMode.Winding);
                CreateRoundPath.AddArc(r.X, r.Y, slope, slope, 180f, 90f);
                CreateRoundPath.AddArc(r.Right - slope, r.Y, slope, slope, 270f, 90f);
                CreateRoundPath.AddArc(r.Right - slope, r.Bottom - slope, slope, slope, 0f, 90f);
                CreateRoundPath.AddArc(r.X, r.Bottom - slope, slope, slope, 90f, 90f);
                CreateRoundPath.CloseFigure();
                return CreateRoundPath;
            }

            #endregion

        }

        abstract class ThemeControl154 : Control
        {


            #region " Initialization "

            protected Graphics G;

            protected Bitmap B;
            public ThemeControl154()
            {
                SetStyle((ControlStyles)139270, true);

                _ImageSize = Size.Empty;
                Font = new Font("Verdana", 8);

                MeasureBitmap = new Bitmap(1, 1);
                MeasureGraphics = Graphics.FromImage(MeasureBitmap);

                DrawRadialPath = new GraphicsPath();

                InvalidateCustimization();
                //Remove?
            }

            protected override sealed void OnHandleCreated(EventArgs e)
            {
                InvalidateCustimization();
                ColorHook();

                if (!(_LockWidth == 0))
                    Width = _LockWidth;
                if (!(_LockHeight == 0))
                    Height = _LockHeight;

                Transparent = _Transparent;
                if (_Transparent && _BackColor)
                    BackColor = Color.Transparent;

                base.OnHandleCreated(e);
            }

            private bool DoneCreation;
            protected override sealed void OnParentChanged(EventArgs e)
            {
                if (Parent != null)
                {
                    OnCreation();
                    DoneCreation = true;
                    InvalidateTimer();
                }

                base.OnParentChanged(e);
            }

            #endregion

            private void DoAnimation(bool i)
            {
                OnAnimation();
                if (i)
                    Invalidate();
            }

            protected override sealed void OnPaint(PaintEventArgs e)
            {
                if (Width == 0 || Height == 0)
                    return;

                if (_Transparent)
                {
                    PaintHook();
                    e.Graphics.DrawImage(B, 0, 0);
                }
                else
                {
                    G = e.Graphics;
                    PaintHook();
                }
            }

            protected override void OnHandleDestroyed(EventArgs e)
            {
                ThemeShare.RemoveAnimationCallback(DoAnimation);
                base.OnHandleDestroyed(e);
            }

            #region " Size Handling "

            protected override sealed void OnSizeChanged(EventArgs e)
            {
                if (_Transparent)
                {
                    InvalidateBitmap();
                }

                Invalidate();
                base.OnSizeChanged(e);
            }

            protected override void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified)
            {
                if (!(_LockWidth == 0))
                    width = _LockWidth;
                if (!(_LockHeight == 0))
                    height = _LockHeight;
                base.SetBoundsCore(x, y, width, height, specified);
            }

            #endregion

            #region " State Handling "

            private bool InPosition;
            protected override void OnMouseEnter(EventArgs e)
            {
                InPosition = true;
                SetState(MouseState.Over);
                base.OnMouseEnter(e);
            }

            protected override void OnMouseUp(MouseEventArgs e)
            {
                if (InPosition)
                    SetState(MouseState.Over);
                base.OnMouseUp(e);
            }

            protected override void OnMouseDown(MouseEventArgs e)
            {
                if (e.Button == MouseButtons.Left)
                    SetState(MouseState.Down);
                base.OnMouseDown(e);
            }

            protected override void OnMouseLeave(EventArgs e)
            {
                InPosition = false;
                SetState(MouseState.None);
                base.OnMouseLeave(e);
            }

            protected override void OnEnabledChanged(EventArgs e)
            {
                if (Enabled)
                    SetState(MouseState.None);
                else
                    SetState(MouseState.Block);
                base.OnEnabledChanged(e);
            }

            protected MouseState State;
            private void SetState(MouseState current)
            {
                State = current;
                Invalidate();
            }

            #endregion


            #region " Base Properties "

            [Browsable(false), EditorBrowsable(EditorBrowsableState.Never), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
            public override Color ForeColor
            {
                get { return Color.Empty; }
                set { }
            }
            [Browsable(false), EditorBrowsable(EditorBrowsableState.Never), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
            public override Image BackgroundImage
            {
                get { return null; }
                set { }
            }
            [Browsable(false), EditorBrowsable(EditorBrowsableState.Never), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
            public override ImageLayout BackgroundImageLayout
            {
                get { return ImageLayout.None; }
                set { }
            }

            public override string Text
            {
                get { return base.Text; }
                set
                {
                    base.Text = value;
                    Invalidate();
                }
            }
            public override Font Font
            {
                get { return base.Font; }
                set
                {
                    base.Font = value;
                    Invalidate();
                }
            }

            private bool _BackColor;
            [Category("Misc")]
            public override Color BackColor
            {
                get { return base.BackColor; }
                set
                {
                    if (!IsHandleCreated && value == Color.Transparent)
                    {
                        _BackColor = true;
                        return;
                    }

                    base.BackColor = value;
                    if (Parent != null)
                        ColorHook();
                }
            }

            #endregion

            #region " Public Properties "

            private bool _NoRounding;
            public bool NoRounding
            {
                get { return _NoRounding; }
                set
                {
                    _NoRounding = value;
                    Invalidate();
                }
            }

            private Image _Image;
            public Image Image
            {
                get { return _Image; }
                set
                {
                    if (value == null)
                    {
                        _ImageSize = Size.Empty;
                    }
                    else
                    {
                        _ImageSize = value.Size;
                    }

                    _Image = value;
                    Invalidate();
                }
            }

            private bool _Transparent;
            public bool Transparent
            {
                get { return _Transparent; }
                set
                {
                    _Transparent = value;
                    if (!IsHandleCreated)
                        return;

                    if (!value && !(BackColor.A == 255))
                    {
                        throw new Exception("Unable to change value to false while a transparent BackColor is in use.");
                    }

                    SetStyle(ControlStyles.Opaque, !value);
                    SetStyle(ControlStyles.SupportsTransparentBackColor, value);

                    if (value)
                        InvalidateBitmap();
                    else
                        B = null;
                    Invalidate();
                }
            }

            private Dictionary<string, Color> Items = new Dictionary<string, Color>();
            public Bloom[] Colors
            {
                get
                {
                    List<Bloom> T = new List<Bloom>();
                    Dictionary<string, Color>.Enumerator E = Items.GetEnumerator();

                    while (E.MoveNext())
                    {
                        T.Add(new Bloom(E.Current.Key, E.Current.Value));
                    }

                    return T.ToArray();
                }
                set
                {
                    foreach (Bloom B in value)
                    {
                        if (Items.ContainsKey(B.Name))
                            Items[B.Name] = B.Value;
                    }

                    InvalidateCustimization();
                    ColorHook();
                    Invalidate();
                }
            }

            private string _Customization;
            public string Customization
            {
                get { return _Customization; }
                set
                {
                    if (value == _Customization)
                        return;

                    byte[] Data = null;
                    Bloom[] Items = Colors;

                    try
                    {
                        Data = Convert.FromBase64String(value);
                        for (int I = 0; I <= Items.Length - 1; I++)
                        {
                            Items[I].Value = Color.FromArgb(BitConverter.ToInt32(Data, I * 4));
                        }
                    }
                    catch
                    {
                        return;
                    }

                    _Customization = value;

                    Colors = Items;
                    ColorHook();
                    Invalidate();
                }
            }

            #endregion

            #region " Private Properties "

            private Size _ImageSize;
            protected Size ImageSize
            {
                get { return _ImageSize; }
            }

            private int _LockWidth;
            protected int LockWidth
            {
                get { return _LockWidth; }
                set
                {
                    _LockWidth = value;
                    if (!(LockWidth == 0) && IsHandleCreated)
                        Width = LockWidth;
                }
            }

            private int _LockHeight;
            protected int LockHeight
            {
                get { return _LockHeight; }
                set
                {
                    _LockHeight = value;
                    if (!(LockHeight == 0) && IsHandleCreated)
                        Height = LockHeight;
                }
            }

            private bool _IsAnimated;
            protected bool IsAnimated
            {
                get { return _IsAnimated; }
                set
                {
                    _IsAnimated = value;
                    InvalidateTimer();
                }
            }

            #endregion


            #region " Property Helpers "

            protected Pen GetPen(string name)
            {
                return new Pen(Items[name]);
            }
            protected Pen GetPen(string name, float width)
            {
                return new Pen(Items[name], width);
            }

            protected SolidBrush GetBrush(string name)
            {
                return new SolidBrush(Items[name]);
            }

            protected Color GetColor(string name)
            {
                return Items[name];
            }

            protected void SetColor(string name, Color value)
            {
                if (Items.ContainsKey(name))
                    Items[name] = value;
                else
                    Items.Add(name, value);
            }
            protected void SetColor(string name, byte r, byte g, byte b)
            {
                SetColor(name, Color.FromArgb(r, g, b));
            }
            protected void SetColor(string name, byte a, byte r, byte g, byte b)
            {
                SetColor(name, Color.FromArgb(a, r, g, b));
            }
            protected void SetColor(string name, byte a, Color value)
            {
                SetColor(name, Color.FromArgb(a, value));
            }

            private void InvalidateBitmap()
            {
                if (Width == 0 || Height == 0)
                    return;
                B = new Bitmap(Width, Height, PixelFormat.Format32bppPArgb);
                G = Graphics.FromImage(B);
            }

            private void InvalidateCustimization()
            {
                MemoryStream M = new MemoryStream(Items.Count * 4);

                foreach (Bloom B in Colors)
                {
                    M.Write(BitConverter.GetBytes(B.Value.ToArgb()), 0, 4);
                }

                M.Close();
                _Customization = Convert.ToBase64String(M.ToArray());
            }

            private void InvalidateTimer()
            {
                if (DesignMode || !DoneCreation)
                    return;

                if (_IsAnimated)
                {
                    ThemeShare.AddAnimationCallback(DoAnimation);
                }
                else
                {
                    ThemeShare.RemoveAnimationCallback(DoAnimation);
                }
            }
            #endregion


            #region " User Hooks "

            protected abstract void ColorHook();
            protected abstract void PaintHook();

            protected virtual void OnCreation()
            {
            }

            protected virtual void OnAnimation()
            {
            }

            #endregion


            #region " Offset "

            private Rectangle OffsetReturnRectangle;
            protected Rectangle Offset(Rectangle r, int amount)
            {
                OffsetReturnRectangle = new Rectangle(r.X + amount, r.Y + amount, r.Width - (amount * 2), r.Height - (amount * 2));
                return OffsetReturnRectangle;
            }

            private Size OffsetReturnSize;
            protected Size Offset(Size s, int amount)
            {
                OffsetReturnSize = new Size(s.Width + amount, s.Height + amount);
                return OffsetReturnSize;
            }

            private Point OffsetReturnPoint;
            protected Point Offset(Point p, int amount)
            {
                OffsetReturnPoint = new Point(p.X + amount, p.Y + amount);
                return OffsetReturnPoint;
            }

            #endregion

            #region " Center "


            private Point CenterReturn;
            protected Point Center(Rectangle p, Rectangle c)
            {
                CenterReturn = new Point((p.Width / 2 - c.Width / 2) + p.X + c.X, (p.Height / 2 - c.Height / 2) + p.Y + c.Y);
                return CenterReturn;
            }
            protected Point Center(Rectangle p, Size c)
            {
                CenterReturn = new Point((p.Width / 2 - c.Width / 2) + p.X, (p.Height / 2 - c.Height / 2) + p.Y);
                return CenterReturn;
            }

            protected Point Center(Rectangle child)
            {
                return Center(Width, Height, child.Width, child.Height);
            }
            protected Point Center(Size child)
            {
                return Center(Width, Height, child.Width, child.Height);
            }
            protected Point Center(int childWidth, int childHeight)
            {
                return Center(Width, Height, childWidth, childHeight);
            }

            protected Point Center(Size p, Size c)
            {
                return Center(p.Width, p.Height, c.Width, c.Height);
            }

            protected Point Center(int pWidth, int pHeight, int cWidth, int cHeight)
            {
                CenterReturn = new Point(pWidth / 2 - cWidth / 2, pHeight / 2 - cHeight / 2);
                return CenterReturn;
            }

            #endregion

            #region " Measure "

            private Bitmap MeasureBitmap;
            //TODO: Potential issues during multi-threading.
            private Graphics MeasureGraphics;

            protected Size Measure()
            {
                return MeasureGraphics.MeasureString(Text, Font, Width).ToSize();
            }
            protected Size Measure(string text)
            {
                return MeasureGraphics.MeasureString(text, Font, Width).ToSize();
            }

            #endregion


            #region " DrawPixel "


            private SolidBrush DrawPixelBrush;
            protected void DrawPixel(Color c1, int x, int y)
            {
                if (_Transparent)
                {
                    B.SetPixel(x, y, c1);
                }
                else
                {
                    DrawPixelBrush = new SolidBrush(c1);
                    G.FillRectangle(DrawPixelBrush, x, y, 1, 1);
                }
            }

            #endregion

            #region " DrawCorners "


            private SolidBrush DrawCornersBrush;
            protected void DrawCorners(Color c1, int offset)
            {
                DrawCorners(c1, 0, 0, Width, Height, offset);
            }
            protected void DrawCorners(Color c1, Rectangle r1, int offset)
            {
                DrawCorners(c1, r1.X, r1.Y, r1.Width, r1.Height, offset);
            }
            protected void DrawCorners(Color c1, int x, int y, int width, int height, int offset)
            {
                DrawCorners(c1, x + offset, y + offset, width - (offset * 2), height - (offset * 2));
            }

            protected void DrawCorners(Color c1)
            {
                DrawCorners(c1, 0, 0, Width, Height);
            }
            protected void DrawCorners(Color c1, Rectangle r1)
            {
                DrawCorners(c1, r1.X, r1.Y, r1.Width, r1.Height);
            }
            protected void DrawCorners(Color c1, int x, int y, int width, int height)
            {
                if (_NoRounding)
                    return;

                if (_Transparent)
                {
                    B.SetPixel(x, y, c1);
                    B.SetPixel(x + (width - 1), y, c1);
                    B.SetPixel(x, y + (height - 1), c1);
                    B.SetPixel(x + (width - 1), y + (height - 1), c1);
                }
                else
                {
                    DrawCornersBrush = new SolidBrush(c1);
                    G.FillRectangle(DrawCornersBrush, x, y, 1, 1);
                    G.FillRectangle(DrawCornersBrush, x + (width - 1), y, 1, 1);
                    G.FillRectangle(DrawCornersBrush, x, y + (height - 1), 1, 1);
                    G.FillRectangle(DrawCornersBrush, x + (width - 1), y + (height - 1), 1, 1);
                }
            }

            #endregion

            #region " DrawBorders "

            protected void DrawBorders(Pen p1, int offset)
            {
                DrawBorders(p1, 0, 0, Width, Height, offset);
            }
            protected void DrawBorders(Pen p1, Rectangle r, int offset)
            {
                DrawBorders(p1, r.X, r.Y, r.Width, r.Height, offset);
            }
            protected void DrawBorders(Pen p1, int x, int y, int width, int height, int offset)
            {
                DrawBorders(p1, x + offset, y + offset, width - (offset * 2), height - (offset * 2));
            }

            protected void DrawBorders(Pen p1)
            {
                DrawBorders(p1, 0, 0, Width, Height);
            }
            protected void DrawBorders(Pen p1, Rectangle r)
            {
                DrawBorders(p1, r.X, r.Y, r.Width, r.Height);
            }
            protected void DrawBorders(Pen p1, int x, int y, int width, int height)
            {
                G.DrawRectangle(p1, x, y, width - 1, height - 1);
            }

            #endregion

            #region " DrawText "

            private Point DrawTextPoint;

            private Size DrawTextSize;
            protected void DrawText(Brush b1, HorizontalAlignment a, int x, int y)
            {
                DrawText(b1, Text, a, x, y);
            }
            protected void DrawText(Brush b1, string text, HorizontalAlignment a, int x, int y)
            {
                if (text.Length == 0)
                    return;

                DrawTextSize = Measure(text);
                DrawTextPoint = Center(DrawTextSize);

                switch (a)
                {
                    case HorizontalAlignment.Left:
                        G.DrawString(text, Font, b1, x, DrawTextPoint.Y + y);
                        break;
                    case HorizontalAlignment.Center:
                        G.DrawString(text, Font, b1, DrawTextPoint.X + x, DrawTextPoint.Y + y);
                        break;
                    case HorizontalAlignment.Right:
                        G.DrawString(text, Font, b1, Width - DrawTextSize.Width - x, DrawTextPoint.Y + y);
                        break;
                }
            }

            protected void DrawText(Brush b1, Point p1)
            {
                if (Text.Length == 0)
                    return;
                G.DrawString(Text, Font, b1, p1);
            }
            protected void DrawText(Brush b1, int x, int y)
            {
                if (Text.Length == 0)
                    return;
                G.DrawString(Text, Font, b1, x, y);
            }

            #endregion

            #region " DrawImage "


            private Point DrawImagePoint;
            protected void DrawImage(HorizontalAlignment a, int x, int y)
            {
                DrawImage(_Image, a, x, y);
            }
            protected void DrawImage(Image image, HorizontalAlignment a, int x, int y)
            {
                if (image == null)
                    return;
                DrawImagePoint = Center(image.Size);

                switch (a)
                {
                    case HorizontalAlignment.Left:
                        G.DrawImage(image, x, DrawImagePoint.Y + y, image.Width, image.Height);
                        break;
                    case HorizontalAlignment.Center:
                        G.DrawImage(image, DrawImagePoint.X + x, DrawImagePoint.Y + y, image.Width, image.Height);
                        break;
                    case HorizontalAlignment.Right:
                        G.DrawImage(image, Width - image.Width - x, DrawImagePoint.Y + y, image.Width, image.Height);
                        break;
                }
            }

            protected void DrawImage(Point p1)
            {
                DrawImage(_Image, p1.X, p1.Y);
            }
            protected void DrawImage(int x, int y)
            {
                DrawImage(_Image, x, y);
            }

            protected void DrawImage(Image image, Point p1)
            {
                DrawImage(image, p1.X, p1.Y);
            }
            protected void DrawImage(Image image, int x, int y)
            {
                if (image == null)
                    return;
                G.DrawImage(image, x, y, image.Width, image.Height);
            }

            #endregion

            #region " DrawGradient "

            private LinearGradientBrush DrawGradientBrush;

            private Rectangle DrawGradientRectangle;
            protected void DrawGradient(ColorBlend blend, int x, int y, int width, int height)
            {
                DrawGradientRectangle = new Rectangle(x, y, width, height);
                DrawGradient(blend, DrawGradientRectangle);
            }
            protected void DrawGradient(ColorBlend blend, int x, int y, int width, int height, float angle)
            {
                DrawGradientRectangle = new Rectangle(x, y, width, height);
                DrawGradient(blend, DrawGradientRectangle, angle);
            }

            protected void DrawGradient(ColorBlend blend, Rectangle r)
            {
                DrawGradientBrush = new LinearGradientBrush(r, Color.Empty, Color.Empty, 90f);
                DrawGradientBrush.InterpolationColors = blend;
                G.FillRectangle(DrawGradientBrush, r);
            }
            protected void DrawGradient(ColorBlend blend, Rectangle r, float angle)
            {
                DrawGradientBrush = new LinearGradientBrush(r, Color.Empty, Color.Empty, angle);
                DrawGradientBrush.InterpolationColors = blend;
                G.FillRectangle(DrawGradientBrush, r);
            }


            protected void DrawGradient(Color c1, Color c2, int x, int y, int width, int height)
            {
                DrawGradientRectangle = new Rectangle(x, y, width, height);
                DrawGradient(c1, c2, DrawGradientRectangle);
            }
            protected void DrawGradient(Color c1, Color c2, int x, int y, int width, int height, float angle)
            {
                DrawGradientRectangle = new Rectangle(x, y, width, height);
                DrawGradient(c1, c2, DrawGradientRectangle, angle);
            }

            protected void DrawGradient(Color c1, Color c2, Rectangle r)
            {
                DrawGradientBrush = new LinearGradientBrush(r, c1, c2, 90f);
                G.FillRectangle(DrawGradientBrush, r);
            }
            protected void DrawGradient(Color c1, Color c2, Rectangle r, float angle)
            {
                DrawGradientBrush = new LinearGradientBrush(r, c1, c2, angle);
                G.FillRectangle(DrawGradientBrush, r);
            }

            #endregion

            #region " DrawRadial "

            private GraphicsPath DrawRadialPath;
            private PathGradientBrush DrawRadialBrush1;
            private LinearGradientBrush DrawRadialBrush2;

            private Rectangle DrawRadialRectangle;
            public void DrawRadial(ColorBlend blend, int x, int y, int width, int height)
            {
                DrawRadialRectangle = new Rectangle(x, y, width, height);
                DrawRadial(blend, DrawRadialRectangle, width / 2, height / 2);
            }
            public void DrawRadial(ColorBlend blend, int x, int y, int width, int height, Point center)
            {
                DrawRadialRectangle = new Rectangle(x, y, width, height);
                DrawRadial(blend, DrawRadialRectangle, center.X, center.Y);
            }
            public void DrawRadial(ColorBlend blend, int x, int y, int width, int height, int cx, int cy)
            {
                DrawRadialRectangle = new Rectangle(x, y, width, height);
                DrawRadial(blend, DrawRadialRectangle, cx, cy);
            }

            public void DrawRadial(ColorBlend blend, Rectangle r)
            {
                DrawRadial(blend, r, r.Width / 2, r.Height / 2);
            }
            public void DrawRadial(ColorBlend blend, Rectangle r, Point center)
            {
                DrawRadial(blend, r, center.X, center.Y);
            }
            public void DrawRadial(ColorBlend blend, Rectangle r, int cx, int cy)
            {
                DrawRadialPath.Reset();
                DrawRadialPath.AddEllipse(r.X, r.Y, r.Width - 1, r.Height - 1);

                DrawRadialBrush1 = new PathGradientBrush(DrawRadialPath);
                DrawRadialBrush1.CenterPoint = new Point(r.X + cx, r.Y + cy);
                DrawRadialBrush1.InterpolationColors = blend;

                if (G.SmoothingMode == SmoothingMode.AntiAlias)
                {
                    G.FillEllipse(DrawRadialBrush1, r.X + 1, r.Y + 1, r.Width - 3, r.Height - 3);
                }
                else
                {
                    G.FillEllipse(DrawRadialBrush1, r);
                }
            }


            protected void DrawRadial(Color c1, Color c2, int x, int y, int width, int height)
            {
                DrawRadialRectangle = new Rectangle(x, y, width, height);
                DrawRadial(c1, c2, DrawRadialRectangle);
            }
            protected void DrawRadial(Color c1, Color c2, int x, int y, int width, int height, float angle)
            {
                DrawRadialRectangle = new Rectangle(x, y, width, height);
                DrawRadial(c1, c2, DrawRadialRectangle, angle);
            }

            protected void DrawRadial(Color c1, Color c2, Rectangle r)
            {
                DrawRadialBrush2 = new LinearGradientBrush(r, c1, c2, 90f);
                G.FillEllipse(DrawRadialBrush2, r);
            }
            protected void DrawRadial(Color c1, Color c2, Rectangle r, float angle)
            {
                DrawRadialBrush2 = new LinearGradientBrush(r, c1, c2, angle);
                G.FillEllipse(DrawRadialBrush2, r);
            }

            #endregion

            #region " CreateRound "

            private GraphicsPath CreateRoundPath;

            private Rectangle CreateRoundRectangle;
            public GraphicsPath CreateRound(int x, int y, int width, int height, int slope)
            {
                CreateRoundRectangle = new Rectangle(x, y, width, height);
                return CreateRound(CreateRoundRectangle, slope);
            }

            public GraphicsPath CreateRound(Rectangle r, int slope)
            {
                CreateRoundPath = new GraphicsPath(FillMode.Winding);
                CreateRoundPath.AddArc(r.X, r.Y, slope, slope, 180f, 90f);
                CreateRoundPath.AddArc(r.Right - slope, r.Y, slope, slope, 270f, 90f);
                CreateRoundPath.AddArc(r.Right - slope, r.Bottom - slope, slope, slope, 0f, 90f);
                CreateRoundPath.AddArc(r.X, r.Bottom - slope, slope, slope, 90f, 90f);
                CreateRoundPath.CloseFigure();
                return CreateRoundPath;
            }

            #endregion

        }
        struct Bloom
        {

            public string _Name;
            public string Name
            {
                get { return _Name; }
            }

            private Color _Value;
            public Color Value
            {
                get { return _Value; }
                set { _Value = value; }
            }

            public string ValueHex
            {
                get { return string.Concat("#", _Value.R.ToString("X2", null), _Value.G.ToString("X2", null), _Value.B.ToString("X2", null)); }
                set
                {
                    try
                    {
                        _Value = ColorTranslator.FromHtml(value);
                    }
                    catch
                    {
                        return;
                    }
                }
            }


            public Bloom(string name, Color value)
            {
                _Name = name;
                _Value = value;
            }
        }
        static class ThemeShare
        {

            #region " Animation "

            private static int Frames;
            private static bool Invalidate;

            public static PrecisionTimer ThemeTimer = new PrecisionTimer();
            //1000 / 50 = 20 FPS
            private const int FPS = 50;

            private const int Rate = 10;
            public delegate void AnimationDelegate(bool invalidate);


            private static List<AnimationDelegate> Callbacks = new List<AnimationDelegate>();
            private static void HandleCallbacks(IntPtr state, bool reserve)
            {
                Invalidate = (Frames >= FPS);
                if (Invalidate)
                    Frames = 0;

                lock (Callbacks)
                {
                    for (int I = 0; I <= Callbacks.Count - 1; I++)
                    {
                        Callbacks[I].Invoke(Invalidate);
                    }
                }

                Frames += Rate;
            }

            private static void InvalidateThemeTimer()
            {
                if (Callbacks.Count == 0)
                {
                    ThemeTimer.Delete();
                }
                else
                {
                    ThemeTimer.Create(0, Rate, HandleCallbacks);
                }
            }

            public static void AddAnimationCallback(AnimationDelegate callback)
            {
                lock (Callbacks)
                {
                    if (Callbacks.Contains(callback))
                        return;

                    Callbacks.Add(callback);
                    InvalidateThemeTimer();
                }
            }

            public static void RemoveAnimationCallback(AnimationDelegate callback)
            {
                lock (Callbacks)
                {
                    if (!Callbacks.Contains(callback))
                        return;

                    Callbacks.Remove(callback);
                    InvalidateThemeTimer();
                }
            }

            #endregion

        }
        class PrecisionTimer : IDisposable
        {

            private bool _Enabled;
            public bool Enabled
            {
                get { return _Enabled; }
            }

            private IntPtr Handle;

            private TimerDelegate TimerCallback;
            [DllImport("kernel32.dll", EntryPoint = "CreateTimerQueueTimer")]
            private static extern bool CreateTimerQueueTimer(ref IntPtr handle, IntPtr queue, TimerDelegate callback, IntPtr state, uint dueTime, uint period, uint flags);

            [DllImport("kernel32.dll", EntryPoint = "DeleteTimerQueueTimer")]
            private static extern bool DeleteTimerQueueTimer(IntPtr queue, IntPtr handle, IntPtr callback);

            public delegate void TimerDelegate(IntPtr r1, bool r2);

            public void Create(uint dueTime, uint period, TimerDelegate callback)
            {
                if (_Enabled)
                    return;

                TimerCallback = callback;
                bool Success = CreateTimerQueueTimer(ref Handle, IntPtr.Zero, TimerCallback, IntPtr.Zero, dueTime, period, 0);

                if (!Success)
                    ThrowNewException("CreateTimerQueueTimer");
                _Enabled = Success;
            }

            public void Delete()
            {
                if (!_Enabled)
                    return;
                bool Success = DeleteTimerQueueTimer(IntPtr.Zero, Handle, IntPtr.Zero);

                if (!Success && !(Marshal.GetLastWin32Error() == 997))
                {
                    ThrowNewException("DeleteTimerQueueTimer");
                }

                _Enabled = !Success;
            }

            private void ThrowNewException(string name)
            {
                throw new Exception(string.Format("{0} failed. Win32Error: {1}", name, Marshal.GetLastWin32Error()));
            }

            public void Dispose()
            {
                Delete();
            }
        }

        #endregion
        #region  ThemeContainer

        public class CeThemeContainer_Style : ContainerControl
        {


            #region  Variables

            private Point MouseP = new Point(0, 0);
            private bool Cap = false;
            private int MoveHeight;
            private string _TextBottom = null;
            const int BorderCurve = 7;
            protected MouseState State;
            private bool HasShown;
            private Rectangle HeaderRect;

            #endregion
            #region  Enums

            public enum MouseState
            {
                None = 0,
                Over = 1,
                Down = 2
            }

            #endregion
            #region  Properties

            private bool _Sizable = true;
            public bool Sizable
            {
                get
                {
                    return _Sizable;
                }
                set
                {
                    _Sizable = value;
                }
            }

            private bool _SmartBounds = false;
            public bool SmartBounds
            {
                get
                {
                    return _SmartBounds;
                }
                set
                {
                    _SmartBounds = value;
                }
            }

            private bool _IsParentForm;
            protected bool IsParentForm
            {
                get
                {
                    return _IsParentForm;
                }
            }

            protected bool IsParentMdi
            {
                get
                {
                    if (Parent == null)
                    {
                        return false;
                    }
                    return Parent.Parent != null;
                }
            }

            private bool _ControlMode;
            protected bool ControlMode
            {
                get
                {
                    return _ControlMode;
                }
                set
                {
                    _ControlMode = value;
                    Invalidate();
                }
            }

            private FormStartPosition _StartPosition;
            public FormStartPosition StartPosition
            {
                get
                {
                    if (_IsParentForm && !_ControlMode)
                    {
                        return ParentForm.StartPosition;
                    }
                    else
                    {
                        return _StartPosition;
                    }
                }
                set
                {
                    _StartPosition = value;

                    if (_IsParentForm && !_ControlMode)
                    {
                        ParentForm.StartPosition = value;
                    }
                }
            }

            #endregion
            #region  EventArgs

            protected sealed override void OnParentChanged(EventArgs e)
            {
                base.OnParentChanged(e);

                if (Parent == null)
                {
                    return;
                }
                _IsParentForm = Parent is Form;

                if (!_ControlMode)
                {
                    InitializeMessages();

                    if (_IsParentForm)
                    {
                        this.ParentForm.FormBorderStyle = FormBorderStyle.None;
                        this.ParentForm.TransparencyKey = Color.Fuchsia;

                        if (!DesignMode)
                        {
                            ParentForm.Shown += FormShown;
                        }
                    }
                    Parent.BackColor = BackColor;
                    Parent.MinimumSize = new Size(126, 39);
                }
            }

            protected sealed override void OnSizeChanged(EventArgs e)
            {
                base.OnSizeChanged(e);
                if (!_ControlMode)
                {
                    HeaderRect = new Rectangle(0, 0, Width - 14, MoveHeight - 7);
                }
                Invalidate();
            }

            protected override void OnMouseDown(System.Windows.Forms.MouseEventArgs e)
            {
                base.OnMouseDown(e);
                if (e.Button == MouseButtons.Left)
                {
                    SetState(MouseState.Down);
                }
                if (!(_IsParentForm && ParentForm.WindowState == FormWindowState.Maximized || _ControlMode))
                {
                    if (HeaderRect.Contains(e.Location))
                    {
                        Capture = false;
                        WM_LMBUTTONDOWN = true;
                        DefWndProc(ref Messages[0]);
                    }
                    else if (_Sizable && !(Previous == 0))
                    {
                        Capture = false;
                        WM_LMBUTTONDOWN = true;
                        DefWndProc(ref Messages[Previous]);
                    }
                }
            }

            protected override void OnMouseUp(System.Windows.Forms.MouseEventArgs e)
            {
                base.OnMouseUp(e);
                Cap = false;
            }

            protected override void OnMouseMove(System.Windows.Forms.MouseEventArgs e)
            {
                base.OnMouseMove(e);
                if (!(_IsParentForm && ParentForm.WindowState == FormWindowState.Maximized))
                {
                    if (_Sizable && !_ControlMode)
                    {
                        InvalidateMouse();
                    }
                }
                if (Cap)
                {
                    Parent.Location = (System.Drawing.Point)((object)(System.Convert.ToDouble(MousePosition) - System.Convert.ToDouble(MouseP)));
                }
            }

            protected override void OnInvalidated(System.Windows.Forms.InvalidateEventArgs e)
            {
                base.OnInvalidated(e);
                ParentForm.Text = Text;
            }

            protected override void OnPaintBackground(PaintEventArgs e)
            {
                base.OnPaintBackground(e);
            }

            protected override void OnTextChanged(System.EventArgs e)
            {
                base.OnTextChanged(e);
                Invalidate();
            }

            private void FormShown(object sender, EventArgs e)
            {
                if (_ControlMode || HasShown)
                {
                    return;
                }

                if (_StartPosition == FormStartPosition.CenterParent || _StartPosition == FormStartPosition.CenterScreen)
                {
                    Rectangle SB = Screen.PrimaryScreen.Bounds;
                    Rectangle CB = ParentForm.Bounds;
                    ParentForm.Location = new Point(SB.Width / 2 - CB.Width / 2, SB.Height / 2 - CB.Width / 2);
                }
                HasShown = true;
            }

            #endregion
            #region  Mouse & Size

            private void SetState(MouseState current)
            {
                State = current;
                Invalidate();
            }

            private Point GetIndexPoint;
            private bool B1x;
            private bool B2x;
            private bool B3;
            private bool B4;
            private int GetIndex()
            {
                GetIndexPoint = PointToClient(MousePosition);
                B1x = GetIndexPoint.X < 7;
                B2x = GetIndexPoint.X > Width - 7;
                B3 = GetIndexPoint.Y < 7;
                B4 = GetIndexPoint.Y > Height - 7;

                if (B1x && B3)
                {
                    return 4;
                }
                if (B1x && B4)
                {
                    return 7;
                }
                if (B2x && B3)
                {
                    return 5;
                }
                if (B2x && B4)
                {
                    return 8;
                }
                if (B1x)
                {
                    return 1;
                }
                if (B2x)
                {
                    return 2;
                }
                if (B3)
                {
                    return 3;
                }
                if (B4)
                {
                    return 6;
                }
                return 0;
            }

            private int Current;
            private int Previous;
            private void InvalidateMouse()
            {
                Current = GetIndex();
                if (Current == Previous)
                {
                    return;
                }

                Previous = Current;
                switch (Previous)
                {
                    case 0:
                        Cursor = Cursors.Default;
                        break;
                    case 6:
                        Cursor = Cursors.SizeNS;
                        break;
                    case 8:
                        Cursor = Cursors.SizeNWSE;
                        break;
                    case 7:
                        Cursor = Cursors.SizeNESW;
                        break;
                }
            }

            private Message[] Messages = new Message[9];
            private void InitializeMessages()
            {
                Messages[0] = Message.Create(Parent.Handle, 161, new IntPtr(2), IntPtr.Zero);
                for (int I = 1; I <= 8; I++)
                {
                    Messages[I] = Message.Create(Parent.Handle, 161, new IntPtr(I + 9), IntPtr.Zero);
                }
            }

            private void CorrectBounds(Rectangle bounds)
            {
                if (Parent.Width > bounds.Width)
                {
                    Parent.Width = bounds.Width;
                }
                if (Parent.Height > bounds.Height)
                {
                    Parent.Height = bounds.Height;
                }

                int X = Parent.Location.X;
                int Y = Parent.Location.Y;

                if (X < bounds.X)
                {
                    X = bounds.X;
                }
                if (Y < bounds.Y)
                {
                    Y = bounds.Y;
                }

                int Width = bounds.X + bounds.Width;
                int Height = bounds.Y + bounds.Height;

                if (X + Parent.Width > Width)
                {
                    X = Width - Parent.Width;
                }
                if (Y + Parent.Height > Height)
                {
                    Y = Height - Parent.Height;
                }

                Parent.Location = new Point(X, Y);
            }

            private bool WM_LMBUTTONDOWN;
            protected override void WndProc(ref Message m)
            {
                base.WndProc(ref m);

                if (WM_LMBUTTONDOWN && m.Msg == 513)
                {
                    WM_LMBUTTONDOWN = false;

                    SetState(MouseState.Over);
                    if (!_SmartBounds)
                    {
                        return;
                    }

                    if (IsParentMdi)
                    {
                        CorrectBounds(new Rectangle(Point.Empty, Parent.Parent.Size));
                    }
                    else
                    {
                        CorrectBounds(Screen.FromControl(Parent).WorkingArea);
                    }
                }
            }

            #endregion

            protected override void OnCreateControl()
            {
                base.OnCreateControl();
                this.ParentForm.FormBorderStyle = FormBorderStyle.None;
                this.ParentForm.TransparencyKey = Color.Fuchsia;
            }

            protected override void CreateHandle()
            {
                base.CreateHandle();
            }

            public CeThemeContainer_Style()
            {
                SetStyle((ControlStyles)(139270), true);
                Dock = DockStyle.Fill;
                MoveHeight = 25;
                Padding = new Padding(3, 28, 3, 28);
                Font = new Font("Segoe UI", 8, FontStyle.Regular);
                ForeColor = Color.FromArgb(142, 142, 142);
                BackColor = Color.FromArgb(246, 246, 246);
                DoubleBuffered = true;
            }

            protected override void OnPaint(System.Windows.Forms.PaintEventArgs e)
            {
                base.OnPaint(e);

                Bitmap B = new Bitmap(Width, Height);
                Graphics G = Graphics.FromImage(B);
                Rectangle ClientRectangle = new Rectangle(0, 0, Width - 1, Height - 1);
                Color TransparencyKey = this.ParentForm.TransparencyKey;

                G.SmoothingMode = SmoothingMode.Default;
                G.Clear(TransparencyKey);

                // Draw the container borders
                G.FillPath(new SolidBrush(Color.FromArgb(52, 52, 52)), RoundRectangle.RoundRect(ClientRectangle, BorderCurve));
                // Draw a rectangle in which the controls should be added on
                G.FillPath(new SolidBrush(Color.FromArgb(246, 246, 246)), RoundRectangle.RoundRect(new Rectangle(2, 20, Width - 5, Height - 42), BorderCurve));

                // Patch the header with a rectangle that has a curve so its border will remain within container bounds
                G.FillPath(new SolidBrush(Color.FromArgb(52, 52, 52)), RoundRectangle.RoundRect(new Rectangle(2, 2, (int)(Width / 2 + 2), 16), BorderCurve));
                G.FillPath(new SolidBrush(Color.FromArgb(52, 52, 52)), RoundRectangle.RoundRect(new Rectangle((int)(Width / 2 - 3), 2, (int)(Width / 2), 16), BorderCurve));
                // Fill the header rectangle below the patch
                G.FillRectangle(new SolidBrush(Color.FromArgb(52, 52, 52)), new Rectangle(2, 15, Width - 5, 10));

                // Increase the thickness of the container borders
                G.DrawPath(new Pen(Color.FromArgb(52, 52, 52)), RoundRectangle.RoundRect(new Rectangle(2, 2, Width - 5, Height - 5), BorderCurve));
                G.DrawPath(new Pen(Color.FromArgb(52, 52, 52)), RoundRectangle.RoundRect(ClientRectangle, BorderCurve));

                // Draw the string from the specified 'Text' property on the header rectangle
                G.DrawString(Text, new Font("Trebuchet MS", 10, FontStyle.Bold), new SolidBrush(Color.FromArgb(221, 221, 221)), new Rectangle(BorderCurve, BorderCurve - 4, Width - 1, 22), new StringFormat() { Alignment = StringAlignment.Center, LineAlignment = StringAlignment.Near });


                // Draws a rectangle at the bottom of the container
                G.FillRectangle(new SolidBrush(Color.FromArgb(52, 52, 52)), 0, Height - 25, Width - 3, 22 - 2);
                G.DrawLine(new Pen(Color.FromArgb(52, 52, 52)), 5, Height - 5, Width - 6, Height - 5);
                G.DrawLine(new Pen(Color.FromArgb(52, 52, 52)), 7, Height - 4, Width - 7, Height - 4);

                G.DrawString(_TextBottom, new Font("Trebuchet MS", 10, FontStyle.Bold), new SolidBrush(Color.FromArgb(221, 221, 221)), 5, Height - 23);

                e.Graphics.DrawImage((Image)(B.Clone()), 0, 0);
                G.Dispose();
                B.Dispose();
            }
        }

        #endregion
        #region Progress Indicator

        class Ambiance_ProgressIndicator : Control
        {

            #region Variables

            private readonly SolidBrush BaseColor = new SolidBrush(Color.FromArgb(76, 76, 76));
            private readonly SolidBrush AnimationColor = new SolidBrush(Color.Gray);

            private readonly Timer AnimationSpeed = new Timer();
            private PointF[] FloatPoint;
            private BufferedGraphics BuffGraphics;
            private int IndicatorIndex;
            private readonly BufferedGraphicsContext GraphicsContext = BufferedGraphicsManager.Current;

            #endregion
            #region Custom Properties

            public Color P_BaseColor
            {
                get { return BaseColor.Color; }
                set { BaseColor.Color = value; }
            }

            public Color P_AnimationColor
            {
                get { return AnimationColor.Color; }
                set { AnimationColor.Color = value; }
            }

            public int P_AnimationSpeed
            {
                get { return AnimationSpeed.Interval; }
                set { AnimationSpeed.Interval = value; }
            }

            #endregion
            #region EventArgs

            protected override void OnSizeChanged(EventArgs e)
            {
                base.OnSizeChanged(e);
                SetStandardSize();
                UpdateGraphics();
                SetPoints();
            }

            protected override void OnEnabledChanged(EventArgs e)
            {
                base.OnEnabledChanged(e);
                AnimationSpeed.Enabled = this.Enabled;
            }

            protected override void OnHandleCreated(EventArgs e)
            {
                base.OnHandleCreated(e);
                AnimationSpeed.Tick += AnimationSpeed_Tick;
                AnimationSpeed.Start();
            }

            private void AnimationSpeed_Tick(object sender, EventArgs e)
            {
                if (IndicatorIndex.Equals(0))
                {
                    IndicatorIndex = FloatPoint.Length - 1;
                }
                else
                {
                    IndicatorIndex -= 1;
                }
                this.Invalidate(false);
            }

            #endregion

            public Ambiance_ProgressIndicator()
            {
                this.SetStyle(ControlStyles.AllPaintingInWmPaint | ControlStyles.UserPaint | ControlStyles.ResizeRedraw | ControlStyles.OptimizedDoubleBuffer, true);

                Size = new Size(80, 80);
                Text = string.Empty;
                MinimumSize = new Size(80, 80);
                SetPoints();
                AnimationSpeed.Interval = 100;
            }

            private void SetStandardSize()
            {
                int _Size = Math.Max(Width, Height);
                Size = new Size(_Size, _Size);
            }

            private void SetPoints()
            {
                Stack<PointF> stack = new Stack<PointF>();
                PointF startingFloatPoint = new PointF(((float)this.Width) / 2f, ((float)this.Height) / 2f);
                for (float i = 0f; i < 360f; i += 45f)
                {
                    this.SetValue(startingFloatPoint, (int)Math.Round((double)((((double)this.Width) / 2.0) - 15.0)), (double)i);
                    PointF endPoint = this.EndPoint;
                    endPoint = new PointF(endPoint.X - 7.5f, endPoint.Y - 7.5f);
                    stack.Push(endPoint);
                }
                this.FloatPoint = stack.ToArray();
            }

            private void UpdateGraphics()
            {
                if ((this.Width > 0) && (this.Height > 0))
                {
                    Size size2 = new Size(this.Width + 1, this.Height + 1);
                    this.GraphicsContext.MaximumBuffer = size2;
                    this.BuffGraphics = this.GraphicsContext.Allocate(this.CreateGraphics(), this.ClientRectangle);
                    this.BuffGraphics.Graphics.SmoothingMode = SmoothingMode.AntiAlias;
                }
            }

            protected override void OnPaint(PaintEventArgs e)
            {
                base.OnPaint(e);
                this.BuffGraphics.Graphics.Clear(this.BackColor);
                int num2 = this.FloatPoint.Length - 1;
                for (int i = 0; i <= num2; i++)
                {
                    if (this.IndicatorIndex == i)
                    {
                        this.BuffGraphics.Graphics.FillEllipse(this.AnimationColor, this.FloatPoint[i].X, this.FloatPoint[i].Y, 15f, 15f);
                    }
                    else
                    {
                        this.BuffGraphics.Graphics.FillEllipse(this.BaseColor, this.FloatPoint[i].X, this.FloatPoint[i].Y, 15f, 15f);
                    }
                }
                this.BuffGraphics.Render(e.Graphics);
            }


            private double Rise;
            private double Run;
            private PointF _StartingFloatPoint;

            private X AssignValues<X>(ref X Run, X Length)
            {
                Run = Length;
                return Length;
            }

            private void SetValue(PointF StartingFloatPoint, int Length, double Angle)
            {
                double CircleRadian = Math.PI * Angle / 180.0;

                _StartingFloatPoint = StartingFloatPoint;
                Rise = AssignValues(ref Run, Length);
                Rise = Math.Sin(CircleRadian) * Rise;
                Run = Math.Cos(CircleRadian) * Run;
            }

            private PointF EndPoint
            {
                get
                {
                    float LocationX = Convert.ToSingle(_StartingFloatPoint.Y + Rise);
                    float LocationY = Convert.ToSingle(_StartingFloatPoint.X + Run);

                    return new PointF(LocationY, LocationX);
                }
            }
        }

        #endregion
        #region Label Pack 3+
        #region  Normal Label

        public class Ce_Flat_Label : Label
        {

            public Ce_Flat_Label()
            {
                Font = new Font("Segoe UI", 9);
                ForeColor = Color.FromArgb(116, 125, 132);
                BackColor = Color.Transparent;
            }
        }

        #endregion        
        #region  Link Label
        public class Ce_Flat_LinkLabel : LinkLabel
        {

            public Ce_Flat_LinkLabel()
            {
                Font = new Font("Segoe UI", 9, FontStyle.Regular);
                BackColor = Color.Transparent;
                LinkColor = Color.FromArgb(181, 41, 42);
                ActiveLinkColor = Color.FromArgb(153, 34, 34);
                VisitedLinkColor = Color.FromArgb(181, 41, 42);
                LinkBehavior = LinkBehavior.NeverUnderline;
            }
        }

        #endregion
        #region  Header Label

        public class Ce_Flat_HeaderLabel : Label
        {

            public Ce_Flat_HeaderLabel()
            {
                Font = new Font("Segoe UI", 11, FontStyle.Bold);
                ForeColor = Color.FromArgb(255, 255, 255);
                BackColor = Color.Transparent;
            }
        }

        #endregion
        #endregion
        #region button Pack 6+
    // Normal Style
        #region Normal Button
        public class Ce_Button : Control
        {

            #region " Control Help - MouseState & Flicker Control"
            private MouseState State = MouseState.None;
            protected override void OnMouseEnter(System.EventArgs e)
            {
                base.OnMouseEnter(e);
                State = MouseState.Over;
                Invalidate();
            }
            protected override void OnMouseDown(System.Windows.Forms.MouseEventArgs e)
            {
                base.OnMouseDown(e);
                State = MouseState.Down;
                Invalidate();
            }
            protected override void OnMouseLeave(System.EventArgs e)
            {
                base.OnMouseLeave(e);
                State = MouseState.None;
                Invalidate();
            }
            protected override void OnMouseUp(System.Windows.Forms.MouseEventArgs e)
            {
                base.OnMouseUp(e);
                State = MouseState.Over;
                Invalidate();
            }
            protected override void OnTextChanged(System.EventArgs e)
            {
                base.OnTextChanged(e);
                Invalidate();
            }

            #endregion

            public Ce_Button()
                : base()
            {
                SetStyle(ControlStyles.UserPaint | ControlStyles.SupportsTransparentBackColor, true);
                BackColor = Color.Transparent;
                ForeColor = Color.FromArgb(27, 94, 137);
                DoubleBuffered = true;
                Size = new Size(75, 23);
                Font = new Font("Verdana", 6.75f, FontStyle.Bold);
            }

            protected override void OnPaint(System.Windows.Forms.PaintEventArgs e)
            {
                Bitmap B = new Bitmap(Width, Height);
                Graphics G = Graphics.FromImage(B);
                dynamic ClientRectangle = new Rectangle(0, 0, Width - 1, Height - 1);
                base.OnPaint(e);

                G.SmoothingMode = SmoothingMode.HighQuality;
                G.Clear(BackColor);

                switch (State)
                {
                    case MouseState.None:
                        //Mouse None
                        LinearGradientBrush bodyGrad = new LinearGradientBrush(new Rectangle(0, 0, Width - 1, Height - 2), Color.FromArgb(245, 245, 245), Color.FromArgb(230, 230, 230), 90);
                        G.FillRectangle(bodyGrad, bodyGrad.Rectangle);
                        LinearGradientBrush bodyInBorder = new LinearGradientBrush(new Rectangle(1, 1, Width - 3, Height - 4), Color.FromArgb(252, 252, 252), Color.FromArgb(249, 249, 249), 90);
                        G.DrawRectangle(new Pen(bodyInBorder), new Rectangle(1, 1, Width - 3, Height - 4));
                        G.DrawRectangle(new Pen(Color.FromArgb(189, 189, 189)), new Rectangle(0, 0, Width - 1, Height - 2));
                        G.DrawLine(new Pen(Color.FromArgb(200, 168, 168, 168)), new Point(1, Height - 1), new Point(Width - 2, Height - 1));
                        ForeColor = Color.FromArgb(27, 94, 137);
                        G.DrawString(Text, Font, new SolidBrush(Color.FromArgb(200, Color.White)), new Rectangle(-1, 0, Width - 1, Height - 1), new StringFormat
                        {
                            LineAlignment = StringAlignment.Center,
                            Alignment = StringAlignment.Center
                        });
                        break;
                    case MouseState.Over:
                        //Mouse Hover
                        bodyGrad = new LinearGradientBrush(new Rectangle(0, 0, Width - 1, Height - 2), Color.FromArgb(70, 153, 205), Color.FromArgb(53, 124, 170), 90);
                        G.FillRectangle(bodyGrad, bodyGrad.Rectangle);
                        bodyInBorder = new LinearGradientBrush(new Rectangle(1, 1, Width - 3, Height - 4), Color.FromArgb(88, 168, 221), Color.FromArgb(76, 149, 194), 90);
                        G.DrawRectangle(new Pen(bodyInBorder), new Rectangle(1, 1, Width - 3, Height - 4));
                        G.DrawRectangle(new Pen(Color.FromArgb(38, 93, 131)), new Rectangle(0, 0, Width - 1, Height - 2));
                        G.DrawLine(new Pen(Color.FromArgb(200, 25, 73, 109)), new Point(1, Height - 1), new Point(Width - 2, Height - 1));
                        ForeColor = Color.White;
                        G.DrawString(Text, Font, new SolidBrush(Color.FromArgb(200, Color.Black)), new Rectangle(-1, -2, Width - 1, Height - 1), new StringFormat
                        {
                            LineAlignment = StringAlignment.Center,
                            Alignment = StringAlignment.Center
                        });
                        break;
                    case MouseState.Down:
                        //Mouse Down
                        bodyGrad = new LinearGradientBrush(new Rectangle(0, 0, Width - 1, Height - 2), Color.FromArgb(70, 153, 205), Color.FromArgb(53, 124, 170), 270);
                        G.FillRectangle(bodyGrad, bodyGrad.Rectangle);
                        bodyInBorder = new LinearGradientBrush(new Rectangle(1, 1, Width - 3, Height - 4), Color.FromArgb(88, 168, 221), Color.FromArgb(76, 149, 194), 270);
                        G.DrawRectangle(new Pen(bodyInBorder), new Rectangle(1, 1, Width - 3, Height - 4));
                        G.DrawRectangle(new Pen(Color.FromArgb(38, 93, 131)), new Rectangle(0, 0, Width - 1, Height - 2));
                        G.DrawLine(new Pen(Color.FromArgb(200, 25, 73, 109)), new Point(1, Height - 1), new Point(Width - 2, Height - 1));
                        ForeColor = Color.White;
                        G.DrawString(Text, Font, new SolidBrush(Color.FromArgb(200, Color.Black)), new Rectangle(-1, -2, Width - 1, Height - 1), new StringFormat
                        {
                            LineAlignment = StringAlignment.Center,
                            Alignment = StringAlignment.Center
                        });
                        break;
                }
                G.DrawString(Text, Font, new SolidBrush(ForeColor), new Rectangle(-1, -1, Width - 1, Height - 1), new StringFormat
                {
                    LineAlignment = StringAlignment.Center,
                    Alignment = StringAlignment.Center
                });

                e.Graphics.DrawImage((Bitmap)B.Clone(), 0, 0);
                G.Dispose();
                B.Dispose();
            }
        }
        #endregion
    // Switxh Toggel Style
        #region Switch Button 4+
        #region  Switch_Button_Simple

        [DefaultEvent("ToggledChanged")]
        public class Ce_Switch_Simple : Button
        {

            #region  Enums

            public enum _Type
            {
                OnOff,
                YesNo,
                IO
            }

            #endregion
            #region  Variables

            public delegate void ToggledChangedEventHandler();
            private ToggledChangedEventHandler ToggledChangedEvent;

            public event ToggledChangedEventHandler ToggledChanged
            {
                add
                {
                    ToggledChangedEvent = (ToggledChangedEventHandler)System.Delegate.Combine(ToggledChangedEvent, value);
                }
                remove
                {
                    ToggledChangedEvent = (ToggledChangedEventHandler)System.Delegate.Remove(ToggledChangedEvent, value);
                }
            }

            private bool _Toggled;
            private _Type ToggleType;
            private Rectangle Bar;
            private Size cHandle = new Size(15, 20);

            #endregion
            #region  Properties

            public bool Toggled
            {
                get
                {
                    return _Toggled;
                }
                set
                {
                    _Toggled = value;
                    Invalidate();
                    if (ToggledChangedEvent != null)
                        ToggledChangedEvent();
                }
            }

            public _Type Type
            {
                get
                {
                    return ToggleType;
                }
                set
                {
                    ToggleType = value;
                    Invalidate();
                }
            }

            #endregion
            #region  EventArgs

            protected override void OnResize(EventArgs e)
            {
                base.OnResize(e);
                Width = 79;
                Height = 27;
            }

            protected override void OnMouseUp(System.Windows.Forms.MouseEventArgs e)
            {
                base.OnMouseUp(e);
                Toggled = !Toggled;
                Focus();
            }

            #endregion

            public Ce_Switch_Simple()
            {
                SetStyle((System.Windows.Forms.ControlStyles)(ControlStyles.AllPaintingInWmPaint | ControlStyles.DoubleBuffer | ControlStyles.ResizeRedraw | ControlStyles.UserPaint), true);
            }

            protected override void OnPaint(System.Windows.Forms.PaintEventArgs e)
            {
                base.OnPaint(e);
                Graphics G = e.Graphics;

                G.SmoothingMode = SmoothingMode.HighQuality;
                G.Clear(Parent.BackColor);

                int SwitchXLoc = 3;
                Rectangle ControlRectangle = new Rectangle(0, 0, Width - 1, Height - 1);
                GraphicsPath ControlPath = RoundRectangle.RoundRect(ControlRectangle, 4);

                LinearGradientBrush BackgroundLGB = default(LinearGradientBrush);
                if (_Toggled)
                {
                    SwitchXLoc = 37;
                    BackgroundLGB = new LinearGradientBrush(ControlRectangle, Color.FromArgb(231, 108, 58), Color.FromArgb(236, 113, 63), 90.0F);
                }
                else
                {
                    SwitchXLoc = 0;
                    BackgroundLGB = new LinearGradientBrush(ControlRectangle, Color.FromArgb(208, 208, 208), Color.FromArgb(226, 226, 226), 90.0F);
                }

                // Fill inside background gradient
                G.FillPath(BackgroundLGB, ControlPath);

                // Draw string
                switch (ToggleType)
                {
                    case _Type.OnOff:
                        if (Toggled)
                        {
                            G.DrawString("ON", new Font("Segoe UI", 12, FontStyle.Regular), Brushes.WhiteSmoke, Bar.X + 18, (float)(Bar.Y + 13.5), new StringFormat() { Alignment = StringAlignment.Center, LineAlignment = StringAlignment.Center });
                        }
                        else
                        {
                            G.DrawString("OFF", new Font("Segoe UI", 12, FontStyle.Regular), Brushes.DimGray, Bar.X + 59, (float)(Bar.Y + 13.5), new StringFormat() { Alignment = StringAlignment.Center, LineAlignment = StringAlignment.Center });
                        }
                        break;
                    case _Type.YesNo:
                        if (Toggled)
                        {
                            G.DrawString("YES", new Font("Segoe UI", 12, FontStyle.Regular), Brushes.WhiteSmoke, Bar.X + 18, (float)(Bar.Y + 13.5), new StringFormat() { Alignment = StringAlignment.Center, LineAlignment = StringAlignment.Center });
                        }
                        else
                        {
                            G.DrawString("NO", new Font("Segoe UI", 12, FontStyle.Regular), Brushes.DimGray, Bar.X + 59, (float)(Bar.Y + 13.5), new StringFormat() { Alignment = StringAlignment.Center, LineAlignment = StringAlignment.Center });
                        }
                        break;
                    case _Type.IO:
                        if (Toggled)
                        {
                            G.DrawString("I", new Font("Segoe UI", 12, FontStyle.Regular), Brushes.WhiteSmoke, Bar.X + 18, (float)(Bar.Y + 13.5), new StringFormat() { Alignment = StringAlignment.Center, LineAlignment = StringAlignment.Center });
                        }
                        else
                        {
                            G.DrawString("O", new Font("Segoe UI", 12, FontStyle.Regular), Brushes.DimGray, Bar.X + 59, (float)(Bar.Y + 13.5), new StringFormat() { Alignment = StringAlignment.Center, LineAlignment = StringAlignment.Center });
                        }
                        break;
                }

                Rectangle SwitchRectangle = new Rectangle(SwitchXLoc, 0, Width - 38, Height);
                GraphicsPath SwitchPath = RoundRectangle.RoundRect(SwitchRectangle, 4);
                LinearGradientBrush SwitchButtonLGB = new LinearGradientBrush(SwitchRectangle, Color.FromArgb(253, 253, 253), Color.FromArgb(240, 238, 237), LinearGradientMode.Vertical);

                // Fill switch background gradient
                G.FillPath(SwitchButtonLGB, SwitchPath);

                // Draw borders
                if (_Toggled == true)
                {
                    G.DrawPath(new Pen(Color.FromArgb(185, 89, 55)), SwitchPath);
                    G.DrawPath(new Pen(Color.FromArgb(185, 89, 55)), ControlPath);
                }
                else
                {
                    G.DrawPath(new Pen(Color.FromArgb(181, 181, 181)), SwitchPath);
                    G.DrawPath(new Pen(Color.FromArgb(181, 181, 181)), ControlPath);
                }
            }
        }

        #endregion
        #region Switch_Button_Os

        [DefaultEvent("ToggledChanged")]
        class Ce_Switch_Os : Control
        {

            #region Designer

            //|------DO-NOT-REMOVE------|
            //|---------CREDITS---------|

            // Pill class and functions were originally created by Yassine Abbani


            //|---------CREDITS---------|
            //|------DO-NOT-REMOVE------|

            public class PillStyle
            {
                public bool Left;
                public bool Right;
            }

            public GraphicsPath Pill(Rectangle Rectangle, PillStyle PillStyle)
            {
                GraphicsPath functionReturnValue = default(GraphicsPath);
                functionReturnValue = new GraphicsPath();

                if (PillStyle.Left)
                {
                    functionReturnValue.AddArc(new Rectangle(Rectangle.X, Rectangle.Y, Rectangle.Height, Rectangle.Height), -270, 180);
                }
                else
                {
                    functionReturnValue.AddLine(Rectangle.X, Rectangle.Y + Rectangle.Height, Rectangle.X, Rectangle.Y);
                }

                if (PillStyle.Right)
                {
                    functionReturnValue.AddArc(new Rectangle(Rectangle.X + Rectangle.Width - Rectangle.Height, Rectangle.Y, Rectangle.Height, Rectangle.Height), -90, 180);
                }
                else
                {
                    functionReturnValue.AddLine(Rectangle.X + Rectangle.Width, Rectangle.Y, Rectangle.X + Rectangle.Width, Rectangle.Y + Rectangle.Height);
                }

                functionReturnValue.CloseAllFigures();
                return functionReturnValue;
            }

            public object Pill(int X, int Y, int Width, int Height, PillStyle PillStyle)
            {
                return Pill(new Rectangle(X, Y, Width, Height), PillStyle);
            }

            #endregion
            #region Enums

            public enum _Type
            {
                YesNo,
                OnOff,
                IO
            }

            #endregion
            #region Variables

            private Timer AnimationTimer = new Timer { Interval = 1 };
            private int ToggleLocation = 0;
            public event ToggledChangedEventHandler ToggledChanged;
            public delegate void ToggledChangedEventHandler();
            private bool _Toggled;
            private _Type ToggleType;
            private Rectangle Bar;
            private Size cHandle = new Size(15, 20);

            #endregion
            #region Properties

            public bool Toggled
            {
                get { return _Toggled; }
                set
                {
                    _Toggled = value;
                    Invalidate();

                    if (ToggledChanged != null)
                    {
                        ToggledChanged();
                    }
                }
            }

            public _Type Type
            {
                get { return ToggleType; }
                set
                {
                    ToggleType = value;
                    Invalidate();
                }
            }

            #endregion
            #region EventArgs

            protected override void OnResize(EventArgs e)
            {
                base.OnResize(e);
                Width = 41;
                Height = 23;
            }

            protected override void OnMouseUp(System.Windows.Forms.MouseEventArgs e)
            {
                base.OnMouseUp(e);
                Toggled = !Toggled;
            }

            #endregion

            public Ce_Switch_Os()
            {
                SetStyle(ControlStyles.AllPaintingInWmPaint | ControlStyles.DoubleBuffer | ControlStyles.ResizeRedraw | ControlStyles.UserPaint, true);
                AnimationTimer.Tick += new EventHandler(AnimationTimer_Tick);
            }
            protected override void OnHandleCreated(EventArgs e)
            {
                base.OnHandleCreated(e);
                AnimationTimer.Start();
            }

            void AnimationTimer_Tick(object sender, EventArgs e)
            {
                //  Create a slide animation when toggled on/off
                if ((_Toggled == true))
                {
                    if ((ToggleLocation < 100))
                    {
                        ToggleLocation += 10;
                        this.Invalidate(false);
                    }
                }
                else if ((ToggleLocation > 0))
                {
                    ToggleLocation -= 10;
                    this.Invalidate(false);
                }
            }

            protected override void OnPaint(PaintEventArgs e)
            {
                base.OnPaint(e);
                Graphics G = e.Graphics;
                G.Clear(Parent.BackColor);
                checked
                {
                    Point point = new Point(0, (int)Math.Round(unchecked((double)this.Height / 2.0 - (double)this.cHandle.Height / 2.0)));
                    Point arg_A8_0 = point;
                    Point point2 = new Point(0, (int)Math.Round(unchecked((double)this.Height / 2.0 + (double)this.cHandle.Height / 2.0)));
                    LinearGradientBrush Gradient = new LinearGradientBrush(arg_A8_0, point2, Color.FromArgb(250, 250, 250), Color.FromArgb(240, 240, 240));
                    this.Bar = new Rectangle(8, 10, this.Width - 21, this.Height - 21);

                    G.SmoothingMode = SmoothingMode.AntiAlias;
                    G.FillPath(Gradient, (GraphicsPath)this.Pill(0, (int)Math.Round(unchecked((double)this.Height / 2.0 - (double)this.cHandle.Height / 2.0)), this.Width - 1, this.cHandle.Height - 5, new Ce_Switch_Os.PillStyle
                    {
                        Left = true,
                        Right = true
                    }));
                    G.DrawPath(new Pen(Color.FromArgb(177, 177, 176)), (GraphicsPath)this.Pill(0, (int)Math.Round(unchecked((double)this.Height / 2.0 - (double)this.cHandle.Height / 2.0)), this.Width - 1, this.cHandle.Height - 5, new Ce_Switch_Os.PillStyle
                    {
                        Left = true,
                        Right = true
                    }));
                    Gradient.Dispose();
                    switch (this.ToggleType)
                    {
                        case Ce_Switch_Os._Type.YesNo:
                            {
                                bool toggled = this.Toggled;
                                if (toggled)
                                {
                                    G.DrawString("Yes", new Font("Segoe UI", 7f, FontStyle.Regular), Brushes.Gray, (float)(this.Bar.X + 7), (float)this.Bar.Y, new StringFormat
                                    {
                                        Alignment = StringAlignment.Center,
                                        LineAlignment = StringAlignment.Center
                                    });
                                }
                                else
                                {
                                    G.DrawString("No", new Font("Segoe UI", 7f, FontStyle.Regular), Brushes.Gray, (float)(this.Bar.X + 18), (float)this.Bar.Y, new StringFormat
                                    {
                                        Alignment = StringAlignment.Center,
                                        LineAlignment = StringAlignment.Center
                                    });
                                }
                                break;
                            }
                        case Ce_Switch_Os._Type.OnOff:
                            {
                                bool toggled = this.Toggled;
                                if (toggled)
                                {
                                    G.DrawString("On", new Font("Segoe UI", 7f, FontStyle.Regular), Brushes.Gray, (float)(this.Bar.X + 7), (float)this.Bar.Y, new StringFormat
                                    {
                                        Alignment = StringAlignment.Center,
                                        LineAlignment = StringAlignment.Center
                                    });
                                }
                                else
                                {
                                    G.DrawString("Off", new Font("Segoe UI", 7f, FontStyle.Regular), Brushes.Gray, (float)(this.Bar.X + 18), (float)this.Bar.Y, new StringFormat
                                    {
                                        Alignment = StringAlignment.Center,
                                        LineAlignment = StringAlignment.Center
                                    });
                                }
                                break;
                            }
                        case Ce_Switch_Os._Type.IO:
                            {
                                bool toggled = this.Toggled;
                                if (toggled)
                                {
                                    G.DrawString("I", new Font("Segoe UI", 7f, FontStyle.Regular), Brushes.Gray, (float)(this.Bar.X + 7), (float)this.Bar.Y, new StringFormat
                                    {
                                        Alignment = StringAlignment.Center,
                                        LineAlignment = StringAlignment.Center
                                    });
                                }
                                else
                                {
                                    G.DrawString("O", new Font("Segoe UI", 7f, FontStyle.Regular), Brushes.Gray, (float)(this.Bar.X + 18), (float)this.Bar.Y, new StringFormat
                                    {
                                        Alignment = StringAlignment.Center,
                                        LineAlignment = StringAlignment.Center
                                    });
                                }
                                break;
                            }
                    }
                    G.FillEllipse(new SolidBrush(Color.FromArgb(249, 249, 249)), this.Bar.X + (int)Math.Round(unchecked((double)this.Bar.Width * ((double)this.ToggleLocation / 80.0))) - (int)Math.Round((double)this.cHandle.Width / 2.0), this.Bar.Y + (int)Math.Round((double)this.Bar.Height / 2.0) - (int)Math.Round(unchecked((double)this.cHandle.Height / 2.0 - 1.0)), this.cHandle.Width, this.cHandle.Height - 5);
                    G.DrawEllipse(new Pen(Color.FromArgb(177, 177, 176)), this.Bar.X + (int)Math.Round(unchecked((double)this.Bar.Width * ((double)this.ToggleLocation / 80.0) - (double)checked((int)Math.Round((double)this.cHandle.Width / 2.0)))), this.Bar.Y + (int)Math.Round((double)this.Bar.Height / 2.0) - (int)Math.Round(unchecked((double)this.cHandle.Height / 2.0 - 1.0)), this.cHandle.Width, this.cHandle.Height - 5);
                }
            }
        }
        #endregion
        #region  Switch_Button_UX

        [DefaultEvent("ToggledChanged")]
        public class Ce_Switch_UX : Control
        {

            #region  Enums

            public enum _Type
            {
                CheckMark,
                OnOff,
                YesNo,
                IO
            }

            #endregion
            #region  Variables

            public delegate void ToggledChangedEventHandler();
            private ToggledChangedEventHandler ToggledChangedEvent;

            public event ToggledChangedEventHandler ToggledChanged
            {
                add
                {
                    ToggledChangedEvent = (ToggledChangedEventHandler)System.Delegate.Combine(ToggledChangedEvent, value);
                }
                remove
                {
                    ToggledChangedEvent = (ToggledChangedEventHandler)System.Delegate.Remove(ToggledChangedEvent, value);
                }
            }

            private bool _Toggled;
            private _Type ToggleType;
            private Rectangle Bar;
            private int _Width;
            private int _Height;

            #endregion
            #region  Properties

            public bool Toggled
            {
                get
                {
                    return _Toggled;
                }
                set
                {
                    _Toggled = value;
                    Invalidate();
                    if (ToggledChangedEvent != null)
                        ToggledChangedEvent();
                }
            }

            public _Type Type
            {
                get
                {
                    return ToggleType;
                }
                set
                {
                    ToggleType = value;
                    Invalidate();
                }
            }

            #endregion
            #region  EventArgs

            protected override void OnResize(EventArgs e)
            {
                base.OnResize(e);
                this.Size = new Size(76, 33);
            }

            protected override void OnMouseUp(System.Windows.Forms.MouseEventArgs e)
            {
                base.OnMouseUp(e);
                Toggled = !Toggled;
                Focus();
            }

            #endregion

            public Ce_Switch_UX()
            {
                SetStyle((System.Windows.Forms.ControlStyles)(ControlStyles.AllPaintingInWmPaint | ControlStyles.DoubleBuffer | ControlStyles.ResizeRedraw | ControlStyles.UserPaint), true);
            }

            protected override void OnPaint(System.Windows.Forms.PaintEventArgs e)
            {
                base.OnPaint(e);
                System.Drawing.Graphics G = e.Graphics;

                G.SmoothingMode = SmoothingMode.HighQuality;
                G.Clear(Parent.BackColor);
                _Width = Width - 1;
                _Height = Height - 1;

                GraphicsPath GP = default(GraphicsPath);
                GraphicsPath GP2 = new GraphicsPath();
                Rectangle BaseRect = new Rectangle(0, 0, _Width, _Height);
                Rectangle ThumbRect = new Rectangle(_Width / 2, 0, 38, _Height);

                G.SmoothingMode = (System.Drawing.Drawing2D.SmoothingMode)2;
                G.PixelOffsetMode = (System.Drawing.Drawing2D.PixelOffsetMode)2;
                G.TextRenderingHint = (System.Drawing.Text.TextRenderingHint)5;
                G.Clear(BackColor);

                GP = RoundRectangle.RoundRect(BaseRect, 4);
                ThumbRect = new Rectangle(4, 4, 36, _Height - 8);
                GP2 = RoundRectangle.RoundRect(ThumbRect, 4);
                G.FillPath(new SolidBrush(Color.FromArgb(66, 76, 85)), GP);
                G.FillPath(new SolidBrush(Color.FromArgb(32, 41, 50)), GP2);

                if (_Toggled)
                {
                    GP = RoundRectangle.RoundRect(BaseRect, 4);
                    ThumbRect = new Rectangle((_Width / 2) - 2, 4, 36, _Height - 8);
                    GP2 = RoundRectangle.RoundRect(ThumbRect, 4);
                    G.FillPath(new SolidBrush(Color.FromArgb(181, 41, 42)), GP);
                    G.FillPath(new SolidBrush(Color.FromArgb(32, 41, 50)), GP2);
                }

                // Draw string
                switch (ToggleType)
                {
                    case _Type.CheckMark:
                        if (Toggled)
                        {
                            G.DrawString("ü", new Font("Wingdings", 18, FontStyle.Regular), Brushes.WhiteSmoke, Bar.X + 18, Bar.Y + 19, new StringFormat() { Alignment = StringAlignment.Center, LineAlignment = StringAlignment.Center });
                        }
                        else
                        {
                            G.DrawString("r", new Font("Marlett", 14, FontStyle.Regular), Brushes.DimGray, Bar.X + 59, Bar.Y + 18, new StringFormat() { Alignment = StringAlignment.Center, LineAlignment = StringAlignment.Center });
                        }
                        break;
                    case _Type.OnOff:
                        if (Toggled)
                        {
                            G.DrawString("ON", new Font("Segoe UI", 12, FontStyle.Regular), Brushes.WhiteSmoke, Bar.X + 18, Bar.Y + 16, new StringFormat() { Alignment = StringAlignment.Center, LineAlignment = StringAlignment.Center });
                        }
                        else
                        {
                            G.DrawString("OFF", new Font("Segoe UI", 12, FontStyle.Regular), Brushes.DimGray, Bar.X + 57, Bar.Y + 16, new StringFormat() { Alignment = StringAlignment.Center, LineAlignment = StringAlignment.Center });
                        }
                        break;
                    case _Type.YesNo:
                        if (Toggled)
                        {
                            G.DrawString("YES", new Font("Segoe UI", 12, FontStyle.Regular), Brushes.WhiteSmoke, Bar.X + 19, Bar.Y + 16, new StringFormat() { Alignment = StringAlignment.Center, LineAlignment = StringAlignment.Center });
                        }
                        else
                        {
                            G.DrawString("NO", new Font("Segoe UI", 12, FontStyle.Regular), Brushes.DimGray, Bar.X + 56, Bar.Y + 16, new StringFormat() { Alignment = StringAlignment.Center, LineAlignment = StringAlignment.Center });
                        }
                        break;
                    case _Type.IO:
                        if (Toggled)
                        {
                            G.DrawString("I", new Font("Segoe UI", 12, FontStyle.Regular), Brushes.WhiteSmoke, Bar.X + 18, Bar.Y + 16, new StringFormat() { Alignment = StringAlignment.Center, LineAlignment = StringAlignment.Center });
                        }
                        else
                        {
                            G.DrawString("O", new Font("Segoe UI", 12, FontStyle.Regular), Brushes.DimGray, Bar.X + 57, Bar.Y + 16, new StringFormat() { Alignment = StringAlignment.Center, LineAlignment = StringAlignment.Center });
                        }
                        break;
                }
            }
        }

        #endregion
        #region Switsh Button
        #region Draw
        static class Draw
        {
            public static GraphicsPath RoundRect(Rectangle Rectangle, int Curve)
            {
                GraphicsPath P = new GraphicsPath();
                int ArcRectangleWidth = Curve * 2;
                P.AddArc(new Rectangle(Rectangle.X, Rectangle.Y, ArcRectangleWidth, ArcRectangleWidth), -180, 90);
                P.AddArc(new Rectangle(Rectangle.Width - ArcRectangleWidth + Rectangle.X, Rectangle.Y, ArcRectangleWidth, ArcRectangleWidth), -90, 90);
                P.AddArc(new Rectangle(Rectangle.Width - ArcRectangleWidth + Rectangle.X, Rectangle.Height - ArcRectangleWidth + Rectangle.Y, ArcRectangleWidth, ArcRectangleWidth), 0, 90);
                P.AddArc(new Rectangle(Rectangle.X, Rectangle.Height - ArcRectangleWidth + Rectangle.Y, ArcRectangleWidth, ArcRectangleWidth), 90, 90);
                P.AddLine(new Point(Rectangle.X, Rectangle.Height - ArcRectangleWidth + Rectangle.Y), new Point(Rectangle.X, Curve + Rectangle.Y));
                return P;
            }
            public static GraphicsPath RoundRect(int X, int Y, int Width, int Height, int Curve)
            {
                Rectangle Rectangle = new Rectangle(X, Y, Width, Height);
                GraphicsPath P = new GraphicsPath();
                int ArcRectangleWidth = Curve * 2;
                P.AddArc(new Rectangle(Rectangle.X, Rectangle.Y, ArcRectangleWidth, ArcRectangleWidth), -180, 90);
                P.AddArc(new Rectangle(Rectangle.Width - ArcRectangleWidth + Rectangle.X, Rectangle.Y, ArcRectangleWidth, ArcRectangleWidth), -90, 90);
                P.AddArc(new Rectangle(Rectangle.Width - ArcRectangleWidth + Rectangle.X, Rectangle.Height - ArcRectangleWidth + Rectangle.Y, ArcRectangleWidth, ArcRectangleWidth), 0, 90);
                P.AddArc(new Rectangle(Rectangle.X, Rectangle.Height - ArcRectangleWidth + Rectangle.Y, ArcRectangleWidth, ArcRectangleWidth), 90, 90);
                P.AddLine(new Point(Rectangle.X, Rectangle.Height - ArcRectangleWidth + Rectangle.Y), new Point(Rectangle.X, Curve + Rectangle.Y));
                return P;
            }

            public static void InnerGlow(Graphics G, Rectangle Rectangle, Color[] Colors)
            {
                int SubtractTwo = 1;
                int AddOne = 0;
                foreach (Color c_loopVariable in Colors)
                {
                    G.DrawRectangle(new Pen(new SolidBrush(Color.FromArgb(c_loopVariable.R, c_loopVariable.B, c_loopVariable.G))), Rectangle.X + AddOne, Rectangle.Y + AddOne, Rectangle.Width - SubtractTwo, Rectangle.Height - SubtractTwo);
                    SubtractTwo += 2;
                    AddOne += 1;
                }
            }
            public static void InnerGlowRounded(Graphics G, Rectangle Rectangle, int Degree, Color[] Colors)
            {
                int SubtractTwo = 1;
                int AddOne = 0;
                foreach (Color c in Colors)
                {
                    G.DrawPath(new Pen(new SolidBrush(Color.FromArgb(c.R, c.B, c.G))), Draw.RoundRect(Rectangle.X + AddOne, Rectangle.Y + AddOne, Rectangle.Width - SubtractTwo, Rectangle.Height - SubtractTwo, Degree));
                    SubtractTwo += 2;
                    AddOne += 1;
                }
            }
        }
        enum MouseState : byte
        {
            None = 0,
            Over = 1,
            Down = 2,
            Block = 3
        }
        #endregion
        public class Ce_Switch_UI : Control
        {

            #region " Control Help - MouseState & Flicker Control"
            private MouseState State = MouseState.None;
            protected override void OnMouseEnter(System.EventArgs e)
            {
                base.OnMouseEnter(e);
                State = MouseState.Over;
                Invalidate();
            }
            protected override void OnMouseDown(System.Windows.Forms.MouseEventArgs e)
            {
                base.OnMouseDown(e);
                State = MouseState.Down;
                Invalidate();
            }
            protected override void OnMouseLeave(System.EventArgs e)
            {
                base.OnMouseLeave(e);
                State = MouseState.None;
                Invalidate();
            }
            protected override void OnMouseUp(System.Windows.Forms.MouseEventArgs e)
            {
                base.OnMouseUp(e);
                State = MouseState.Over;
                Invalidate();
            }
            protected override void OnTextChanged(System.EventArgs e)
            {
                base.OnTextChanged(e);
                Invalidate();
            }
            private bool _Checked;
            public bool Checked
            {
                get { return _Checked; }
                set
                {
                    _Checked = value;
                    Invalidate();
                }
            }
            protected override void OnResize(System.EventArgs e)
            {
                base.OnResize(e);
                Height = 24;
                Width = 50;
            }
            protected override void OnClick(System.EventArgs e)
            {
                _Checked = !_Checked;
                if (CheckedChanged != null)
                {
                    CheckedChanged(this);
                }
                base.OnClick(e);
            }
            public event CheckedChangedEventHandler CheckedChanged;
            public delegate void CheckedChangedEventHandler(object sender);
            #endregion

            public Ce_Switch_UI()
                : base()
            {
                SetStyle(ControlStyles.UserPaint | ControlStyles.SupportsTransparentBackColor | ControlStyles.OptimizedDoubleBuffer, true);
                BackColor = Color.Transparent;
                ForeColor = Color.Black;
                Size = new Size(50, 24);
                DoubleBuffered = true;
            }

            protected override void OnPaint(System.Windows.Forms.PaintEventArgs e)
            {
                Bitmap B = new Bitmap(Width, Height);
                Graphics G = Graphics.FromImage(B);
                Rectangle onoffRect = new Rectangle(0, 0, Width - 1, Height - 1);

                G.SmoothingMode = SmoothingMode.HighQuality;
                G.CompositingQuality = CompositingQuality.HighQuality;
                G.TextRenderingHint = System.Drawing.Text.TextRenderingHint.AntiAliasGridFit;

                G.Clear(Color.Transparent);

                LinearGradientBrush bodyGrad = new LinearGradientBrush(onoffRect, Color.FromArgb(40, 40, 40), Color.FromArgb(45, 45, 45), 90);
                G.FillPath(bodyGrad, Draw.RoundRect(onoffRect, 4));
                G.DrawPath(new Pen(Color.FromArgb(15, 15, 15)), Draw.RoundRect(onoffRect, 4));
                G.DrawPath(new Pen(Color.FromArgb(50, 50, 50)), Draw.RoundRect(new Rectangle(1, 1, Width - 3, Height - 3), 4));

                if (Checked)
                {
                    G.FillPath(new SolidBrush(Color.FromArgb(80, Color.Green)), Draw.RoundRect(new Rectangle(4, 2, 25, Height - 5), 4));
                    G.FillPath(new SolidBrush(Color.FromArgb(35, 35, 35)), Draw.RoundRect(new Rectangle(2, 2, 25, Height - 5), 4));
                    G.DrawPath(new Pen(new SolidBrush(Color.FromArgb(20, 20, 20))), Draw.RoundRect(new Rectangle(2, 2, 25, Height - 5), 4));
                    switch (State)
                    {
                        case MouseState.None:
                            G.DrawString("On", new Font("Tahoma", 8, FontStyle.Regular), Brushes.Silver, new Point(16, Height - 12), new StringFormat
                            {
                                Alignment = StringAlignment.Center,
                                LineAlignment = StringAlignment.Center
                            });
                            break;
                        case MouseState.Over:
                            G.DrawString("On", new Font("Tahoma", 8, FontStyle.Regular), Brushes.White, new Point(16, Height - 12), new StringFormat
                            {
                                Alignment = StringAlignment.Center,
                                LineAlignment = StringAlignment.Center
                            });
                            break;
                        case MouseState.Down:
                            G.DrawString("On", new Font("Tahoma", 8, FontStyle.Regular), Brushes.Silver, new Point(16, Height - 12), new StringFormat
                            {
                                Alignment = StringAlignment.Center,
                                LineAlignment = StringAlignment.Center
                            });
                            break;
                    }
                }
                else
                {
                    G.FillPath(new SolidBrush(Color.FromArgb(60, Color.Red)), Draw.RoundRect(new Rectangle((Width / 2) - 7, 2, Width - 25, Height - 5), 4));
                    G.FillPath(new SolidBrush(Color.FromArgb(35, 35, 35)), Draw.RoundRect(new Rectangle((Width / 2) - 5, 2, Width - 23, Height - 5), 4));
                    G.DrawPath(new Pen(new SolidBrush(Color.FromArgb(20, 20, 20))), Draw.RoundRect(new Rectangle((Width / 2) - 5, 2, Width - 23, Height - 5), 4));
                    switch (State)
                    {
                        case MouseState.None:
                            G.DrawString("Off", new Font("Tahoma", 8, FontStyle.Regular), Brushes.Silver, new Point(34, Height - 11), new StringFormat
                            {
                                Alignment = StringAlignment.Center,
                                LineAlignment = StringAlignment.Center
                            });
                            break;
                        case MouseState.Over:
                            G.DrawString("Off", new Font("Tahoma", 8, FontStyle.Regular), Brushes.White, new Point(34, Height - 11), new StringFormat
                            {
                                Alignment = StringAlignment.Center,
                                LineAlignment = StringAlignment.Center
                            });
                            break;
                        case MouseState.Down:
                            G.DrawString("Off", new Font("Tahoma", 8, FontStyle.Regular), Brushes.Silver, new Point(34, Height - 11), new StringFormat
                            {
                                Alignment = StringAlignment.Center,
                                LineAlignment = StringAlignment.Center
                            });
                            break;
                    }
                }

                e.Graphics.DrawImage((Bitmap)B.Clone(), 0, 0);
                G.Dispose();
                B.Dispose();
            }
        }
        #endregion
        #endregion
    // Radio Style
        #region  Radio Button

        [DefaultEvent("CheckedChanged")]
        public class Ce_RadioButton : Control
        {

            #region  Variables

            private int X;
            private bool _Checked;

            #endregion
            #region  Properties

            public bool Checked
            {
                get
                {
                    return _Checked;
                }
                set
                {
                    _Checked = value;
                    InvalidateControls();
                    if (CheckedChangedEvent != null)
                        CheckedChangedEvent(this);
                    Invalidate();
                }
            }

            #endregion
            #region  EventArgs

            public delegate void CheckedChangedEventHandler(object sender);
            private CheckedChangedEventHandler CheckedChangedEvent;

            public event CheckedChangedEventHandler CheckedChanged
            {
                add
                {
                    CheckedChangedEvent = (CheckedChangedEventHandler)System.Delegate.Combine(CheckedChangedEvent, value);
                }
                remove
                {
                    CheckedChangedEvent = (CheckedChangedEventHandler)System.Delegate.Remove(CheckedChangedEvent, value);
                }
            }


            protected override void OnMouseDown(System.Windows.Forms.MouseEventArgs e)
            {
                if (!_Checked)
                {
                    @Checked = true;
                }
                Focus();
                base.OnMouseDown(e);
            }
            protected override void OnMouseMove(System.Windows.Forms.MouseEventArgs e)
            {
                base.OnMouseMove(e);
                X = e.X;
                Invalidate();
            }
            protected override void OnTextChanged(System.EventArgs e)
            {
                base.OnTextChanged(e);
                int textSize = 0;
                textSize = (int)(this.CreateGraphics().MeasureString(Text, Font).Width);
                this.Width = 28 + textSize;
            }

            protected override void OnResize(EventArgs e)
            {
                base.OnResize(e);
                this.Height = 17;
            }

            #endregion

            public Ce_RadioButton()
            {
                Width = 159;
                Height = 17;
                DoubleBuffered = true;
            }

            private void InvalidateControls()
            {
                if (!IsHandleCreated || !_Checked)
                {
                    return;
                }

                foreach (Control _Control in Parent.Controls)
                {
                    if (_Control != this && _Control is Ce_RadioButton)
                    {
                        ((Ce_RadioButton)_Control).Checked = false;
                    }
                }
            }

            protected override void OnPaint(PaintEventArgs e)
            {
                base.OnPaint(e);
                Graphics G = e.Graphics;
                G.Clear(Parent.BackColor);
                G.SmoothingMode = SmoothingMode.HighQuality;

                G.FillEllipse(new SolidBrush(Color.FromArgb(66, 76, 85)), new Rectangle(0, 0, 16, 16));

                if (_Checked)
                {
                    G.DrawString("a", new Font("Marlett", 15), new SolidBrush(Color.FromArgb(181, 41, 42)), new Point(-3, -2));
                }

                G.DrawString(Text, Font, new SolidBrush(Color.FromArgb(116, 125, 132)), new Point(20, 0));
            }
        }

        #endregion
    // CheckBox Style
        #region  CheckBox

        [DefaultEvent("CheckedChanged")]
        public class Ce_CheckBox : Control
        {

            #region  Variables

            private int X;
            private bool _Checked = false;
            private GraphicsPath Shape;

            #endregion
            #region  Properties

            public bool Checked
            {
                get
                {
                    return _Checked;
                }
                set
                {
                    _Checked = value;
                    Invalidate();
                }
            }

            #endregion
            #region  EventArgs

            public delegate void CheckedChangedEventHandler(object sender);
            private CheckedChangedEventHandler CheckedChangedEvent;

            public event CheckedChangedEventHandler CheckedChanged
            {
                add
                {
                    CheckedChangedEvent = (CheckedChangedEventHandler)System.Delegate.Combine(CheckedChangedEvent, value);
                }
                remove
                {
                    CheckedChangedEvent = (CheckedChangedEventHandler)System.Delegate.Remove(CheckedChangedEvent, value);
                }
            }


            protected override void OnMouseMove(System.Windows.Forms.MouseEventArgs e)
            {
                base.OnMouseMove(e);
                X = e.Location.X;
                Invalidate();
            }
            protected override void OnMouseDown(System.Windows.Forms.MouseEventArgs e)
            {
                _Checked = !_Checked;
                Focus();
                if (CheckedChangedEvent != null)
                    CheckedChangedEvent(this);
                base.OnMouseDown(e);
            }

            protected override void OnResize(EventArgs e)
            {
                base.OnResize(e);

                this.Height = 16;

                Shape = new GraphicsPath();
                Shape.AddArc(0, 0, 10, 10, 180, 90);
                Shape.AddArc(Width - 11, 0, 10, 10, -90, 90);
                Shape.AddArc(Width - 11, Height - 11, 10, 10, 0, 90);
                Shape.AddArc(0, Height - 11, 10, 10, 90, 90);
                Shape.CloseAllFigures();
                Invalidate();
            }

            #endregion

            public Ce_CheckBox()
            {
                Width = 148;
                Height = 16;
                Font = new Font("Microsoft Sans Serif", 9);
                DoubleBuffered = true;
            }

            protected override void OnPaint(PaintEventArgs e)
            {
                base.OnPaint(e);
                Graphics G = e.Graphics;
                G.Clear(Parent.BackColor);

                if (_Checked)
                {
                    G.FillRectangle(new SolidBrush(Color.FromArgb(66, 76, 85)), new Rectangle(0, 0, 16, 16));
                    G.FillRectangle(new SolidBrush(Color.FromArgb(66, 76, 85)), new Rectangle(1, 1, 16 - 2, 16 - 2));
                }
                else
                {
                    G.FillRectangle(new SolidBrush(Color.FromArgb(66, 76, 85)), new Rectangle(0, 0, 16, 16));
                    G.FillRectangle(new SolidBrush(Color.FromArgb(66, 76, 85)), new Rectangle(1, 1, 16 - 2, 16 - 2));
                }

                if (Enabled == true)
                {
                    if (_Checked)
                    {
                        G.DrawString("a", new Font("Marlett", 16), new SolidBrush(Color.FromArgb(181, 41, 42)), new Point(-5, -3));
                    }
                }
                else
                {
                    if (_Checked)
                    {
                        G.DrawString("a", new Font("Marlett", 16), new SolidBrush(Color.Gray), new Point(-5, -3));
                    }
                }

                G.DrawString(Text, Font, new SolidBrush(Color.FromArgb(116, 125, 132)), new Point(20, 0));
            }
        }
        #endregion
    // Glow Button
        #region Glow Button
        sealed class Ce_GlowButton : Button
        {
            private readonly SolidBrush _flatBgBrush = new SolidBrush(Color.FromArgb(20, 20, 20));
            private readonly Pen _penTopLine = new Pen(Color.FromArgb(77, 77, 77));
            private readonly Pen _penOuterBorder = new Pen(Color.FromArgb(40, 40, 40));

            private readonly SolidBrush _textBrush = new SolidBrush(Color.White);

            private readonly Color _gradient1 = Color.FromArgb(30, 30, 30);
            private readonly Color _gradient2 = Color.FromArgb(5, 5, 5);

            private MouseState _mouseState = MouseState.Normal;
            enum MouseState
            {
                Normal, Hover, Pressed
            }

            private const int MaxGlowAlpha = 100;
            private const int GlowSpeed = 5;
            private int _glowAlpha;
            private bool _glowBrighter;
            private bool _showGlow;
            private readonly Timer _timer = new Timer();

            public Ce_GlowButton()
            {
                DoubleBuffered = true;
                _timer.Interval = 1;
                _timer.Tick += _timer_Tick;
                _showGlow = true;
            }

            protected override void OnPaint(PaintEventArgs e)
            {
                base.OnPaint(e);
                e.Graphics.Clear(Color.Black);
                e.Graphics.SmoothingMode = SmoothingMode.HighQuality;

                switch (_mouseState)
                {
                    case MouseState.Hover:
                        using (
                            LinearGradientBrush lgb = new LinearGradientBrush(Point.Empty, new Point(0, Height),
                                                                              _gradient2, _gradient1))
                        {
                            e.Graphics.FillRectangle(lgb, DisplayRectangle);
                        }
                        _textBrush.Color = Color.White;
                        break;
                    case MouseState.Pressed:
                        e.Graphics.FillRectangle(_flatBgBrush, DisplayRectangle);
                        _textBrush.Color = Color.FromArgb(145, 145, 145);
                        break;
                    default: // Normal
                        using (
                            LinearGradientBrush lgb = new LinearGradientBrush(Point.Empty, new Point(0, Height),
                                                                              _gradient1, _gradient2))
                        {
                            e.Graphics.FillRectangle(lgb, DisplayRectangle);
                        }
                        _textBrush.Color = Color.White;
                        break;
                }

                // Draw top line
                e.Graphics.DrawLine(_penTopLine, 0f, 0f, Width, 0f);

                // Draw other border lines
                e.Graphics.DrawLine(_penOuterBorder, 0f, 0f, 0f, Height - 1); // Left
                e.Graphics.DrawLine(_penOuterBorder, 0f, Height - 1, Width - 1, Height - 1); // Bottom
                e.Graphics.DrawLine(_penOuterBorder, Width - 1, 0f, Width - 1, Height - 1); // Right

                // Draw text
                DrawText(e.Graphics);
            }

            #region Overrided Mouse Event Methods
            protected override void OnMouseDown(MouseEventArgs e)
            {
                base.OnMouseDown(e);
                _mouseState = MouseState.Pressed;
                _showGlow = false;
            }

            protected override void OnMouseUp(MouseEventArgs e)
            {
                base.OnMouseUp(e);
                _mouseState = MouseState.Hover;
                _showGlow = true;
                Invalidate();
            }

            protected override void OnMouseMove(MouseEventArgs mevent)
            {
                base.OnMouseMove(mevent);
                _mouseState = MouseState.Hover;
                _showGlow = true;
                _glowBrighter = true;
                if (_glowAlpha < MaxGlowAlpha)
                {
                    _timer.Start();
                }
            }

            protected override void OnMouseLeave(EventArgs e)
            {
                base.OnMouseLeave(e);
                _mouseState = MouseState.Normal;
                _showGlow = true;
                _glowBrighter = false;
                if (_glowAlpha > 0)
                {
                    _timer.Start();
                }
            }
            #endregion

            private void DrawText(Graphics graphics)
            {
                string text = Text.ToUpper();
                SizeF textSize = graphics.MeasureString(text, Font);
                float x = (Width / 2) - (textSize.Width / 2);
                float y = (Height / 2) - (textSize.Height / 2);
                graphics.DrawString(text, Font, _textBrush, x, y);

                if (_showGlow)
                {
                    // Draw text glow
                    DrawGlow(graphics, new Rectangle((int)x, (int)y, (int)textSize.Width, (int)textSize.Height));
                }
            }

            private void DrawGlow(Graphics graphics, Rectangle textRect)
            {
                Rectangle glowRect = ExpandRectangle(textRect, 2);
                Point[] pts = new[]
            {
                new Point(glowRect.X, glowRect.Y),
                new Point(glowRect.X + glowRect.Width, glowRect.Y),
                new Point(glowRect.X + glowRect.Width, glowRect.Y + glowRect.Height),
                new Point(glowRect.X, glowRect.Y + glowRect.Height)
            };
                using (PathGradientBrush pgb = new PathGradientBrush(pts))
                {
                    pgb.CenterPoint = new PointF(Width / 2, Height / 2);
                    pgb.CenterColor = Color.FromArgb(_glowAlpha, Color.White);
                    pgb.SurroundColors = new[] { Color.Transparent };
                    pgb.FocusScales = new PointF(0.25f, 0.25f);
                    graphics.FillRectangle(pgb, glowRect);
                }
            }

            private void _timer_Tick(object sender, EventArgs e)
            {
                if (_glowBrighter)
                {
                    if ((_glowAlpha += GlowSpeed) >= MaxGlowAlpha)
                    {
                        _timer.Stop();
                        _glowAlpha = MaxGlowAlpha;
                    }
                }
                else
                {
                    if ((_glowAlpha -= GlowSpeed) <= 0)
                    {
                        _timer.Stop();
                        _glowAlpha = 0;
                    }
                }
                Invalidate();
            }

            private Rectangle ExpandRectangle(Rectangle rect, int expansion)
            {
                const int extraWidth = 4;
                return new Rectangle(rect.X - expansion - extraWidth, rect.Y - expansion,
                                     rect.Width + (expansion * 2) + (extraWidth * 2), rect.Height + (expansion * 2));
            }
        }

        #endregion
#endregion
        #region Massanger Pack 3+
        #region Left Chat Bubble

        public class Ce_ChatBubble_L : Control
        {

            #region Variables

            private GraphicsPath Shape;
            private Color _TextColor = Color.FromArgb(52, 52, 52);
            private Color _BubbleColor = Color.FromArgb(217, 217, 217);
            private bool _DrawBubbleArrow = true;

            #endregion
            #region Properties

            public override Color ForeColor
            {
                get { return this._TextColor; }
                set
                {
                    this._TextColor = value;
                    this.Invalidate();
                }
            }

            public Color BubbleColor
            {
                get { return this._BubbleColor; }
                set
                {
                    this._BubbleColor = value;
                    this.Invalidate();
                }
            }

            public bool DrawBubbleArrow
            {
                get { return _DrawBubbleArrow; }
                set
                {
                    _DrawBubbleArrow = value;
                    Invalidate();
                }
            }

            #endregion

            public Ce_ChatBubble_L()
            {
                SetStyle(ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer | ControlStyles.ResizeRedraw | ControlStyles.SupportsTransparentBackColor | ControlStyles.UserPaint, true);
                DoubleBuffered = true;
                Size = new Size(152, 38);
                BackColor = Color.Transparent;
                ForeColor = Color.FromArgb(52, 52, 52);
                Font = new Font("Segoe UI", 10);
            }

            protected override void OnResize(System.EventArgs e)
            {
                Shape = new GraphicsPath();

                var _Shape = Shape;
                _Shape.AddArc(9, 0, 10, 10, 180, 90);
                _Shape.AddArc(Width - 11, 0, 10, 10, -90, 90);
                _Shape.AddArc(Width - 11, Height - 11, 10, 10, 0, 90);
                _Shape.AddArc(9, Height - 11, 10, 10, 90, 90);
                _Shape.CloseAllFigures();

                Invalidate();
                base.OnResize(e);
            }

            protected override void OnPaint(PaintEventArgs e)
            {
                base.OnPaint(e);
                Bitmap B = new Bitmap(this.Width, this.Height);
                Graphics G = Graphics.FromImage(B);
                var _G = G;
                _G.SmoothingMode = SmoothingMode.HighQuality;
                _G.PixelOffsetMode = PixelOffsetMode.HighQuality;
                _G.Clear(BackColor);

                // Fill the body of the bubble with the specified color
                _G.FillPath(new SolidBrush(_BubbleColor), Shape);
                // Draw the string specified in 'Text' property
                _G.DrawString(Text, Font, new SolidBrush(ForeColor), new Rectangle(15, 4, Width - 17, Height - 5));

                // Draw a polygon on the right side of the bubble
                if (_DrawBubbleArrow == true)
                {
                    Point[] p = {
                            new Point(9, Height - 19),
                            new Point(0, Height - 25),
                            new Point(9, Height - 30)
                        };
                    _G.FillPolygon(new SolidBrush(_BubbleColor), p);
                    _G.DrawPolygon(new Pen(new SolidBrush(_BubbleColor)), p);
                }
                G.Dispose();
                e.Graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;
                e.Graphics.DrawImageUnscaled(B, 0, 0);
                B.Dispose();
            }
        }

        #endregion
        #region Right Chat Bubble

        public class Ce_ChatBubble_R : Control
        {

            #region Variables

            private GraphicsPath Shape;
            private Color _TextColor = Color.FromArgb(52, 52, 52);
            private Color _BubbleColor = Color.FromArgb(192, 206, 215);
            private bool _DrawBubbleArrow = true;

            #endregion
            #region Properties

            public override Color ForeColor
            {
                get { return this._TextColor; }
                set
                {
                    this._TextColor = value;
                    this.Invalidate();
                }
            }

            public Color BubbleColor
            {
                get { return this._BubbleColor; }
                set
                {
                    this._BubbleColor = value;
                    this.Invalidate();
                }
            }

            public bool DrawBubbleArrow
            {
                get { return _DrawBubbleArrow; }
                set
                {
                    _DrawBubbleArrow = value;
                    Invalidate();
                }
            }

            #endregion

            public Ce_ChatBubble_R()
            {
                SetStyle(ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer | ControlStyles.ResizeRedraw | ControlStyles.SupportsTransparentBackColor | ControlStyles.UserPaint, true);
                DoubleBuffered = true;
                Size = new Size(152, 38);
                BackColor = Color.Transparent;
                ForeColor = Color.FromArgb(52, 52, 52);
                Font = new Font("Segoe UI", 10);
            }

            protected override void OnResize(System.EventArgs e)
            {
                base.OnResize(e);
                Shape = new GraphicsPath();

                var _with1 = Shape;
                _with1.AddArc(0, 0, 10, 10, 180, 90);
                _with1.AddArc(Width - 18, 0, 10, 10, -90, 90);
                _with1.AddArc(Width - 18, Height - 11, 10, 10, 0, 90);
                _with1.AddArc(0, Height - 11, 10, 10, 90, 90);
                _with1.CloseAllFigures();

                Invalidate();
            }

            protected override void OnPaint(PaintEventArgs e)
            {
                base.OnPaint(e);
                Bitmap B = new Bitmap(this.Width, this.Height);
                Graphics G = Graphics.FromImage(B);

                var _G = G;
                _G.SmoothingMode = SmoothingMode.HighQuality;
                _G.PixelOffsetMode = PixelOffsetMode.HighQuality;
                _G.Clear(BackColor);

                // Fill the body of the bubble with the specified color
                _G.FillPath(new SolidBrush(_BubbleColor), Shape);
                // Draw the string specified in 'Text' property
                _G.DrawString(Text, Font, new SolidBrush(ForeColor), (new Rectangle(6, 4, Width - 15, Height)));

                // Draw a polygon on the right side of the bubble
                if (_DrawBubbleArrow == true)
                {
                    Point[] p = {
            new Point(Width - 8, Height - 19),
            new Point(Width, Height - 25),
            new Point(Width - 8, Height - 30)
        };
                    _G.FillPolygon(new SolidBrush(_BubbleColor), p);
                    _G.DrawPolygon(new Pen(new SolidBrush(_BubbleColor)), p);
                }

                G.Dispose();
                e.Graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;
                e.Graphics.DrawImageUnscaled(B, 0, 0);
                B.Dispose();
            }
        }

        #endregion
        #region Notification Number

        class Ce_NotificationNumber : Control
        {
            #region Variables

            private int _Value = 0;
            private int _Maximum = 99;

            #endregion
            #region Properties

            public int Value
            {
                get
                {
                    if (this._Value == 0)
                    {
                        return 0;
                    }
                    return this._Value;
                }
                set
                {
                    if (value > this._Maximum)
                    {
                        value = this._Maximum;
                    }
                    this._Value = value;
                    this.Invalidate();
                }
            }

            public int Maximum
            {
                get
                {
                    return this._Maximum;
                }
                set
                {
                    if (value < this._Value)
                    {
                        this._Value = value;
                    }
                    this._Maximum = value;
                    this.Invalidate();
                }
            }



            #endregion

            public Ce_NotificationNumber()
            {
                SetStyle(ControlStyles.SupportsTransparentBackColor, true);
                SetStyle(ControlStyles.UserPaint, true);

                Text = null;
                DoubleBuffered = true;
            }

            protected override void OnResize(EventArgs e)
            {
                base.OnResize(e);
                Height = 20;
                Width = 20;
            }

            protected override void OnPaint(PaintEventArgs e)
            {
                base.OnPaint(e);
                var _G = e.Graphics;
                string myString = _Value.ToString();
                _G.Clear(BackColor);
                _G.SmoothingMode = SmoothingMode.AntiAlias;
                LinearGradientBrush LGB = new LinearGradientBrush(new Rectangle(new Point(0, 0), new Size(18, 20)), Color.FromArgb(197, 69, 68), Color.FromArgb(176, 52, 52), 90f);

                // Fills the body with LGB gradient
                _G.FillEllipse(LGB, new Rectangle(new Point(0, 0), new Size(18, 18)));
                // Draw border
                _G.DrawEllipse(new Pen(Color.FromArgb(205, 70, 66)), new Rectangle(new Point(0, 0), new Size(18, 18)));
                _G.DrawString(myString, new Font("Segoe UI", 8, FontStyle.Bold), new SolidBrush(Color.FromArgb(255, 255, 253)), new Rectangle(0, 0, Width - 2, Height), new StringFormat
                {
                    Alignment = StringAlignment.Center,
                    LineAlignment = StringAlignment.Center
                });
                e.Dispose();
            }

        }

        #endregion
        #endregion
        #region GroupBox Pack 2+
        #region GroupBox_Old
        public class Ce_GroupBox_Old : ContainerControl
        {
            #region " Control Help - Properties & Flicker Control"
            protected override void OnPaintBackground(System.Windows.Forms.PaintEventArgs pevent)
            {
            }
            protected override void OnTextChanged(System.EventArgs e)
            {
                base.OnTextChanged(e);
                Invalidate();
            }
            #endregion

            public Ce_GroupBox_Old()
                : base()
            {
                BackColor = Color.FromArgb(33, 33, 33);
            }

            protected override void OnPaint(System.Windows.Forms.PaintEventArgs e)
            {
                base.OnPaint(e);
                Graphics G = e.Graphics;

                G.Clear(BackColor);
                G.SmoothingMode = SmoothingMode.HighQuality;

                LinearGradientBrush DrawGradientBrush2 = new LinearGradientBrush(new Rectangle(0, 0, Width, 24), Color.FromArgb(10, 10, 10), Color.FromArgb(50, 50, 50), 90);

                G.FillRectangle(DrawGradientBrush2, new Rectangle(0, 0, Width, 24));
                LinearGradientBrush gloss = new LinearGradientBrush(new Rectangle(0, 0, Width, 12), Color.FromArgb(60, Color.White), Color.FromArgb(20, Color.White), 90);
                G.FillRectangle(gloss, new Rectangle(0, 0, Width, 12));
                G.DrawLine(Pens.Black, 0, 24, Width, 24);

                G.DrawRectangle((new Pen(new SolidBrush(Color.Black))), new Rectangle(1, 1, Width - 3, Height - 3));
                G.DrawRectangle((new Pen(new SolidBrush(Color.FromArgb(70, 70, 70)))), new Rectangle(0, 0, Width - 1, Height - 1));
                G.DrawLine(new Pen(new SolidBrush(Color.FromArgb(45, 45, 45))), 0, 0, Width, 0);
                G.DrawLine(new Pen(new SolidBrush(Color.FromArgb(45, 45, 45))), 0, 0, 0, Height);
                G.DrawLine(new Pen(new SolidBrush(Color.FromArgb(45, 45, 45))), Width - 1, 0, Width - 1, Height);
                G.DrawLine(new Pen(new SolidBrush(Color.FromArgb(31, 31, 31))), 2, 2, Width - 3, 2);

                G.DrawString(Text, Font, Brushes.Black, Width / 2 - (3 * Text.Length) + 1, 6);
                G.DrawString(Text, Font, Brushes.White, Width / 2 - (3 * Text.Length) + 1, 7);
            }
        }
        #endregion
        #region GroupBox_New
        class Ce_GroupBox_New : Ce_ThemeContainer
        {
            //Coded by HΛWK

            int x = 1;

            bool gR = true;
            public bool Animated
            {
                get { return IsAnimated; }
                set
                {
                    IsAnimated = value;
                    Invalidate();
                }
            }

            //Coded by HΛWK
            public Ce_GroupBox_New()
            {
                ControlMode = true;
                Font = new Font("Arial", 9);
                Size = new Size(150, 100);
                Animated = true;
            }

            protected override void OnAnimation()
            {
                base.OnAnimation();
                if (gR == true)
                {
                    x += 1;
                }
                else
                {
                    x -= 1;
                }
                if (x >= this.Width - 1)
                {
                    x = -39;
                }
                else if (x <= 1)
                {
                    gR = true;
                }
                Invalidate();
            }

            protected override void ColorHook()
            {
            }

            //Coded by HΛWK
            protected override void PaintHook()
            {
                G.Clear(Color.FromArgb(30, 30, 30));
                int textWidth = (int)CreateGraphics().MeasureString(Text, Font).Width;
                int textHeight = (int)CreateGraphics().MeasureString(Text, Font).Height;
                //Borders
                Point[] borderPoints = {
            new Point(0, 1),
            new Point(1, 0),
            new Point(Width - 2, 0),
            new Point(Width - 1, 1),
            new Point(Width - 1, Height - 2),
            new Point(Width - 2, Height - 1),
            new Point(1, Height - 1),
            new Point(0, Height - 2)
        };
                G.DrawPolygon(Pens.Black, borderPoints);
                G.DrawLine(Pens.Black, new Point(0, textHeight + 4), new Point(Width - 1, textHeight + 4));
                //GroupArea
                Rectangle groupRect = new Rectangle(1, textHeight + 5, Width - 2, Height - (textHeight + 6));
                G.FillRectangle(new SolidBrush(Color.FromArgb(22, 22, 22)), groupRect);
                G.DrawRectangle(new Pen(new SolidBrush(Color.FromArgb(12, 12, 12))), new Rectangle(1, textHeight + 6, Width - 3, Height - (textHeight + 6) - 2));
                //TextArea
                Rectangle textRect = new Rectangle(1, 1, Width - 2, textHeight + 5);
                G.FillRectangle(new SolidBrush(Color.FromArgb(15, 15, 15)), textRect);
                //TextArea Glow
                if (Animated == true)
                {
                    Rectangle glowRect = new Rectangle(x, 1, 40, textHeight + 4);
                    ColorBlend text_cblend = new ColorBlend(3);
                    text_cblend.Colors[0] = Color.FromArgb(15, 15, 15);
                    text_cblend.Colors[1] = Color.FromArgb(150, 0, 0);
                    text_cblend.Colors[2] = Color.FromArgb(15, 15, 15);
                    text_cblend.Positions = new[] { 0, (float)0.5, (float)1.0 };
                    DrawGradient(text_cblend, glowRect, 0f);
                    //Reinforce Borders
                    G.DrawPolygon(Pens.Black, borderPoints);
                }
                G.DrawLine(Pens.Black, new Point(0, (textHeight + 5)), new Point((Width - 1), (textHeight + 5)));
                //Text
                int h = (Width - 1) / 2;
                G.DrawString(Text, Font, Brushes.Black, new Point(h - (textWidth / 2), 4));
                G.DrawString(Text, Font, Brushes.White, new Point(h - (textWidth / 2), 3));
            }
        }
        #endregion
        #endregion
        #region TrackBar Pack 2+
        #region  TrackBar_New

        [DefaultEvent("ValueChanged")]
        public class Ce_TrackBar_New : Control
        {

            #region  Enums

            public enum ValueDivisor
            {
                By1 = 1,
                By10 = 10,
                By100 = 100,
                By1000 = 1000
            }

            #endregion
            #region  Variables

            private Rectangle FillValue;
            private Rectangle PipeBorder;
            private Rectangle TrackBarHandleRect;
            private bool Cap;
            private int ValueDrawer;

            private Size ThumbSize = new Size(14, 14);
            private Rectangle TrackThumb;

            private int _Minimum = 0;
            private int _Maximum = 10;
            private int _Value = 0;

            private bool _JumpToMouse = false;
            private ValueDivisor DividedValue = ValueDivisor.By1;

            #endregion
            #region  Properties

            public int Minimum
            {
                get
                {
                    return _Minimum;
                }
                set
                {

                    if (value >= _Maximum)
                    {
                        value = _Maximum - 10;
                    }
                    if (_Value < value)
                    {
                        _Value = value;
                    }

                    _Minimum = value;
                    Invalidate();
                }
            }

            public int Maximum
            {
                get
                {
                    return _Maximum;
                }
                set
                {

                    if (value <= _Minimum)
                    {
                        value = _Minimum + 10;
                    }
                    if (_Value > value)
                    {
                        _Value = value;
                    }

                    _Maximum = value;
                    Invalidate();
                }
            }

            public delegate void ValueChangedEventHandler();
            private ValueChangedEventHandler ValueChangedEvent;

            public event ValueChangedEventHandler ValueChanged
            {
                add
                {
                    ValueChangedEvent = (ValueChangedEventHandler)System.Delegate.Combine(ValueChangedEvent, value);
                }
                remove
                {
                    ValueChangedEvent = (ValueChangedEventHandler)System.Delegate.Remove(ValueChangedEvent, value);
                }
            }

            public int Value
            {
                get
                {
                    return _Value;
                }
                set
                {
                    if (_Value != value)
                    {
                        if (value < _Minimum)
                        {
                            _Value = _Minimum;
                        }
                        else
                        {
                            if (value > _Maximum)
                            {
                                _Value = _Maximum;
                            }
                            else
                            {
                                _Value = value;
                            }
                        }
                        Invalidate();
                        if (ValueChangedEvent != null)
                            ValueChangedEvent();
                    }
                }
            }

            public ValueDivisor ValueDivison
            {
                get
                {
                    return DividedValue;
                }
                set
                {
                    DividedValue = value;
                    Invalidate();
                }
            }

            [Browsable(false)]
            public float ValueToSet
            {
                get
                {
                    return _Value / (int)DividedValue;
                }
                set
                {
                    Value = (int)(value * (int)DividedValue);
                }
            }

            public bool JumpToMouse
            {
                get
                {
                    return _JumpToMouse;
                }
                set
                {
                    _JumpToMouse = value;
                    Invalidate();
                }
            }

            #endregion
            #region  EventArgs

            protected override void OnMouseMove(MouseEventArgs e)
            {
                base.OnMouseMove(e);
                checked
                {
                    bool flag = this.Cap && e.X > -1 && e.X < this.Width + 1;
                    if (flag)
                    {
                        this.Value = this._Minimum + (int)Math.Round((double)(this._Maximum - this._Minimum) * ((double)e.X / (double)this.Width));
                    }
                }
            }

            protected override void OnMouseDown(MouseEventArgs e)
            {
                base.OnMouseDown(e);
                if (e.Button == MouseButtons.Left)
                {
                    this.ValueDrawer = (int)Math.Round(((double)(this._Value - this._Minimum) / (double)(this._Maximum - this._Minimum)) * (double)(this.Width - 11));
                    TrackBarHandleRect = new Rectangle(ValueDrawer, 0, 25, 25);
                    Cap = TrackBarHandleRect.Contains(e.Location);
                    Focus();
                    if (_JumpToMouse)
                    {
                        this.Value = this._Minimum + (int)Math.Round((double)(this._Maximum - this._Minimum) * ((double)e.X / (double)this.Width));
                    }
                }
            }

            protected override void OnMouseUp(MouseEventArgs e)
            {
                base.OnMouseUp(e);
                Cap = false;
            }

            #endregion

            public Ce_TrackBar_New()
            {
                SetStyle((System.Windows.Forms.ControlStyles)(ControlStyles.AllPaintingInWmPaint | ControlStyles.UserPaint | ControlStyles.ResizeRedraw | ControlStyles.DoubleBuffer), true);

                Size = new Size(80, 22);
                MinimumSize = new Size(47, 22);
            }

            protected override void OnResize(EventArgs e)
            {
                base.OnResize(e);
                Height = 22;
            }

            protected override void OnPaint(System.Windows.Forms.PaintEventArgs e)
            {
                base.OnPaint(e);
                Graphics G = e.Graphics;

                G.Clear(Parent.BackColor);
                G.SmoothingMode = SmoothingMode.AntiAlias;
                TrackThumb = new Rectangle(7, 10, Width - 16, 2);
                PipeBorder = new Rectangle(1, 10, Width - 3, 2);

                try
                {
                    this.ValueDrawer = (int)Math.Round(((double)(this._Value - this._Minimum) / (double)(this._Maximum - this._Minimum)) * (double)(this.Width));
                }
                catch (Exception)
                {
                }

                TrackBarHandleRect = new Rectangle(ValueDrawer, 0, 3, 20);

                G.FillRectangle(new SolidBrush(Color.FromArgb(124, 131, 137)), PipeBorder);
                FillValue = new Rectangle(0, 10, TrackBarHandleRect.X + TrackBarHandleRect.Width - 4, 3);

                G.ResetClip();

                G.SmoothingMode = SmoothingMode.Default;
                G.DrawRectangle(new Pen(Color.FromArgb(124, 131, 137)), PipeBorder); // Draw pipe border
                G.FillRectangle(new SolidBrush(Color.FromArgb(181, 41, 42)), FillValue);

                G.ResetClip();

                G.SmoothingMode = SmoothingMode.HighQuality;

                G.FillEllipse(new SolidBrush(Color.FromArgb(181, 41, 42)), this.TrackThumb.X + (int)Math.Round(unchecked((double)this.TrackThumb.Width * ((double)this.Value / (double)this.Maximum))) - (int)Math.Round((double)this.ThumbSize.Width / 2.0), this.TrackThumb.Y + (int)Math.Round((double)this.TrackThumb.Height / 2.0) - (int)Math.Round((double)this.ThumbSize.Height / 2.0), this.ThumbSize.Width, this.ThumbSize.Height);
                G.DrawEllipse(new Pen(Color.FromArgb(181, 41, 42)), this.TrackThumb.X + (int)Math.Round(unchecked((double)this.TrackThumb.Width * ((double)this.Value / (double)this.Maximum))) - (int)Math.Round((double)this.ThumbSize.Width / 2.0), this.TrackThumb.Y + (int)Math.Round((double)this.TrackThumb.Height / 2.0) - (int)Math.Round((double)this.ThumbSize.Height / 2.0), this.ThumbSize.Width, this.ThumbSize.Height);
            }
        }

        #endregion
        #region TrackBar_Old

        [DefaultEvent("ValueChanged")]
        class Ce_TrackBar_Old : Control
        {

            #region Enums

            public enum ValueDivisor
            {
                By1 = 1,
                By10 = 10,
                By100 = 100,
                By1000 = 1000
            }

            #endregion
            #region Variables

            private GraphicsPath PipeBorder;
            private GraphicsPath TrackBarHandle;
            private Rectangle TrackBarHandleRect;
            private Rectangle ValueRect;
            private LinearGradientBrush VlaueLGB;
            private LinearGradientBrush TrackBarHandleLGB;
            private bool Cap;

            private int ValueDrawer;
            private int _Minimum = 0;
            private int _Maximum = 10;
            private int _Value = 0;
            private Color _ValueColour = Color.FromArgb(224, 224, 224);
            private bool _DrawHatch = true;
            private bool _DrawValueString = false;
            private bool _JumpToMouse = false;
            private ValueDivisor DividedValue = ValueDivisor.By1;

            #endregion
            #region Custom Properties

            public int Minimum
            {
                get { return _Minimum; }

                set
                {
                    if (value >= _Maximum)
                        value = _Maximum - 10;
                    if (_Value < value)
                        _Value = value;

                    _Minimum = value;
                    Invalidate();
                }
            }

            public int Maximum
            {
                get { return _Maximum; }

                set
                {
                    if (value <= _Minimum)
                        value = _Minimum + 10;
                    if (_Value > value)
                        _Value = value;

                    _Maximum = value;
                    Invalidate();
                }
            }

            public event ValueChangedEventHandler ValueChanged;
            public delegate void ValueChangedEventHandler();
            public int Value
            {
                get { return _Value; }
                set
                {
                    if (_Value != value)
                    {
                        if (value < _Minimum)
                        {
                            _Value = _Minimum;
                        }
                        else
                        {
                            if (value > _Maximum)
                            {
                                _Value = _Maximum;
                            }
                            else
                            {
                                _Value = value;
                            }
                        }
                        Invalidate();
                        if (ValueChanged != null)
                        {
                            ValueChanged();
                        }
                    }
                }
            }

            public ValueDivisor ValueDivison
            {
                get
                {
                    return this.DividedValue;
                }
                set
                {
                    this.DividedValue = value;
                    this.Invalidate();
                }
            }

            [Browsable(false)]
            public float ValueToSet
            {
                get
                {
                    return (float)(((double)this._Value) / ((double)this.DividedValue));
                }
                set
                {
                    this.Value = (int)Math.Round((double)(value * ((float)this.DividedValue)));
                }
            }

            public Color ValueColour
            {
                get { return _ValueColour; }
                set
                {
                    _ValueColour = value;
                    Invalidate();
                }
            }

            public bool DrawHatch
            {
                get { return _DrawHatch; }
                set
                {
                    _DrawHatch = value;
                    Invalidate();
                }
            }

            public bool DrawValueString
            {
                get { return _DrawValueString; }
                set
                {
                    _DrawValueString = value;
                    if (_DrawValueString == true)
                    {
                        Height = 40;
                    }
                    else
                    {
                        Height = 22;
                    }
                    Invalidate();
                }
            }

            public bool JumpToMouse
            {
                get
                {
                    return this._JumpToMouse;
                }
                set
                {
                    this._JumpToMouse = value;
                }
            }

            #endregion
            #region EventArgs

            protected override void OnMouseMove(MouseEventArgs e)
            {
                base.OnMouseMove(e);
                if ((this.Cap && (e.X > -1)) && (e.X < (this.Width + 1)))
                {
                    this.Value = this._Minimum + ((int)Math.Round((double)((this._Maximum - this._Minimum) * (((double)e.X) / ((double)this.Width)))));
                }
            }

            protected override void OnMouseDown(MouseEventArgs e)
            {
                base.OnMouseDown(e);
                if (e.Button == MouseButtons.Left)
                {
                    this.ValueDrawer = (int)Math.Round((double)((((double)(this._Value - this._Minimum)) / ((double)(this._Maximum - this._Minimum))) * (this.Width - 11)));
                    this.TrackBarHandleRect = new Rectangle(this.ValueDrawer, 0, 10, 20);
                    this.Cap = this.TrackBarHandleRect.Contains(e.Location);
                    if (this._JumpToMouse)
                    {
                        this.Value = this._Minimum + ((int)Math.Round((double)((this._Maximum - this._Minimum) * (((double)e.X) / ((double)this.Width)))));
                    }
                }
            }

            protected override void OnMouseUp(MouseEventArgs e)
            {
                base.OnMouseUp(e);
                this.Cap = false;
            }


            #endregion

            public Ce_TrackBar_Old()
            {
                SetStyle(ControlStyles.AllPaintingInWmPaint | ControlStyles.UserPaint | ControlStyles.ResizeRedraw | ControlStyles.DoubleBuffer, true);

                _DrawHatch = true;
                Size = new Size(80, 22);
                MinimumSize = new Size(37, 22);
            }

            protected override void OnResize(EventArgs e)
            {
                base.OnResize(e);
                if (_DrawValueString == true)
                {
                    Height = 40;
                }
                else
                {
                    Height = 22;
                }
            }

            protected override void OnPaint(PaintEventArgs e)
            {
                base.OnPaint(e);
                Graphics G = e.Graphics;
                HatchBrush Hatch = new HatchBrush(HatchStyle.WideDownwardDiagonal, Color.FromArgb(20, Color.Black), Color.Transparent);
                G.Clear(Parent.BackColor);
                G.SmoothingMode = SmoothingMode.AntiAlias;
                checked
                {
                    this.PipeBorder = RoundRectangle.RoundRect(1, 6, this.Width - 3, 8, 3);
                    try
                    {
                        this.ValueDrawer = (int)Math.Round(unchecked(checked((double)(this._Value - this._Minimum) / (double)(this._Maximum - this._Minimum)) * (double)checked(this.Width - 11)));
                    }
                    catch (Exception)
                    {
                    }
                    this.TrackBarHandleRect = new Rectangle(this.ValueDrawer, 0, 10, 20);
                    G.SetClip(this.PipeBorder);
                    this.ValueRect = new Rectangle(1, 7, this.TrackBarHandleRect.X + this.TrackBarHandleRect.Width - 2, 7);
                    this.VlaueLGB = new LinearGradientBrush(this.ValueRect, this._ValueColour, this._ValueColour, 90f);
                    G.FillRectangle(this.VlaueLGB, this.ValueRect);

                    if (_DrawHatch == true)
                    {
                        G.FillRectangle(Hatch, this.ValueRect);
                    }

                    G.ResetClip();
                    G.SmoothingMode = SmoothingMode.AntiAlias;
                    G.DrawPath(new Pen(Color.FromArgb(180, 180, 180)), this.PipeBorder);
                    this.TrackBarHandle = RoundRectangle.RoundRect(this.TrackBarHandleRect, 3);
                    this.TrackBarHandleLGB = new LinearGradientBrush(this.ClientRectangle, SystemColors.Control, SystemColors.Control, 90f);
                    G.FillPath(this.TrackBarHandleLGB, this.TrackBarHandle);
                    G.DrawPath(new Pen(Color.FromArgb(180, 180, 180)), this.TrackBarHandle);

                    if (_DrawValueString == true)
                    {
                        G.DrawString(System.Convert.ToString(ValueToSet), Font, Brushes.Gray, 0, 25);
                    }
                }
            }
        }

        #endregion
#endregion
        #region TextBox Pack 3+
        #region MultiLineTextBox
        public class Ce_MultiLineTextBox : Control
        {
            private TextBox withEventsField_txtbox = new TextBox();
            public TextBox txtbox
            {
                get { return withEventsField_txtbox; }
                set
                {
                    if (withEventsField_txtbox != null)
                    {
                        //withEventsField_txtbox.TextChanged -= TextChngTxtBox;
                    }
                    withEventsField_txtbox = value;
                    if (withEventsField_txtbox != null)
                    {
                        //withEventsField_txtbox.TextChanged += TextChngTxtBox;
                    }
                }

            }
            #region " Control Help - Properties & Flicker Control "
            private int _maxchars = 32767;
            public int MaxCharacters
            {
                get { return _maxchars; }
                set
                {
                    _maxchars = value;
                    Invalidate();
                }
            }
            private HorizontalAlignment _align;
            public HorizontalAlignment TextAlign
            {
                get { return _align; }
                set
                {
                    _align = value;
                    Invalidate();
                }
            }


            protected override void OnPaintBackground(System.Windows.Forms.PaintEventArgs pevent)
            {
            }
            protected override void OnTextChanged(System.EventArgs e)
            {
                base.OnTextChanged(e);
                Invalidate();
            }
            protected override void OnBackColorChanged(System.EventArgs e)
            {
                base.OnBackColorChanged(e);
                txtbox.BackColor = BackColor;
                Invalidate();
            }
            protected override void OnForeColorChanged(System.EventArgs e)
            {
                base.OnForeColorChanged(e);
                txtbox.ForeColor = ForeColor;
                Invalidate();
            }
            protected override void OnSizeChanged(System.EventArgs e)
            {
                base.OnSizeChanged(e);
                txtbox.Size = new Size(Width - 10, Height - 11);
            }
            protected override void OnFontChanged(System.EventArgs e)
            {
                base.OnFontChanged(e);
                txtbox.Font = Font;
            }
            protected override void OnGotFocus(System.EventArgs e)
            {
                base.OnGotFocus(e);
                txtbox.Focus();
            }
            public void TextChngTxtBox()
            {
                Text = txtbox.Text;
            }
            public void TextChng()
            {
                txtbox.Text = Text;
            }
            public void NewTextBox()
            {
                var _with1 = txtbox;
                _with1.Multiline = true;
                _with1.BackColor = BackColor;
                _with1.ForeColor = ForeColor;
                _with1.Text = string.Empty;
                _with1.TextAlign = HorizontalAlignment.Center;
                _with1.BorderStyle = BorderStyle.None;
                _with1.Location = new Point(2, 4);
                _with1.Font = new Font("Verdana", (float)7.25, FontStyle.Regular);
                _with1.Size = new Size(Width - 10, Height - 10);
            }
            #endregion

            public Ce_MultiLineTextBox()
                : base()
            {
                //TextChanged += TextChng;

                NewTextBox();
                Controls.Add(txtbox);

                Text = "";
                BackColor = Color.FromArgb(37, 37, 37);
                ForeColor = Color.White;
                Size = new Size(135, 35);
                DoubleBuffered = true;
            }

            protected override void OnPaint(System.Windows.Forms.PaintEventArgs e)
            {
                Graphics G = e.Graphics;
                base.OnPaint(e);

                txtbox.TextAlign = TextAlign;

                G.FillRectangle(new SolidBrush(Color.FromArgb(37, 37, 37)), new Rectangle(1, 1, Width - 2, Height - 2));
                G.DrawRectangle((new Pen(new SolidBrush(Color.Black))), new Rectangle(1, 1, Width - 3, Height - 3));
                G.DrawRectangle((new Pen(new SolidBrush(Color.FromArgb(70, 70, 70)))), new Rectangle(0, 0, Width - 1, Height - 1));
                G.DrawLine(new Pen(new SolidBrush(Color.FromArgb(45, 45, 45))), 0, 0, Width, 0);
                G.DrawLine(new Pen(new SolidBrush(Color.FromArgb(45, 45, 45))), 0, 0, 0, Height);
                G.DrawLine(new Pen(new SolidBrush(Color.FromArgb(45, 45, 45))), Width - 1, 0, Width - 1, Height);
                G.DrawLine(new Pen(new SolidBrush(Color.FromArgb(31, 31, 31))), 2, 2, Width - 3, 2);
            }
        }

        #endregion
        #region  TextBox_New

        [DefaultEvent("TextChanged")]
        public class Ce_TextBox_New : Control
        {

            #region  Variables

            public TextBox MonoFlatTB = new TextBox();
            private int _maxchars = 32767;
            private bool _ReadOnly;
            private bool _Multiline;
            private Image _Image;
            private Size _ImageSize;
            private HorizontalAlignment ALNType;
            private bool isPasswordMasked = false;
            private Pen P1;
            private SolidBrush B1;
            private GraphicsPath Shape;

            #endregion
            #region  Properties

            public HorizontalAlignment TextAlignment
            {
                get
                {
                    return ALNType;
                }
                set
                {
                    ALNType = value;
                    Invalidate();
                }
            }
            public int MaxLength
            {
                get
                {
                    return _maxchars;
                }
                set
                {
                    _maxchars = value;
                    MonoFlatTB.MaxLength = MaxLength;
                    Invalidate();
                }
            }

            public bool UseSystemPasswordChar
            {
                get
                {
                    return isPasswordMasked;
                }
                set
                {
                    MonoFlatTB.UseSystemPasswordChar = UseSystemPasswordChar;
                    isPasswordMasked = value;
                    Invalidate();
                }
            }
            public bool ReadOnly
            {
                get
                {
                    return _ReadOnly;
                }
                set
                {
                    _ReadOnly = value;
                    if (MonoFlatTB != null)
                    {
                        MonoFlatTB.ReadOnly = value;
                    }
                }
            }
            public bool Multiline
            {
                get
                {
                    return _Multiline;
                }
                set
                {
                    _Multiline = value;
                    if (MonoFlatTB != null)
                    {
                        MonoFlatTB.Multiline = value;

                        if (value)
                        {
                            MonoFlatTB.Height = Height - 23;
                        }
                        else
                        {
                            Height = MonoFlatTB.Height + 23;
                        }
                    }
                }
            }

            public Image Image
            {
                get
                {
                    return _Image;
                }
                set
                {
                    if (value == null)
                    {
                        _ImageSize = Size.Empty;
                    }
                    else
                    {
                        _ImageSize = value.Size;
                    }

                    _Image = value;

                    if (Image == null)
                    {
                        MonoFlatTB.Location = new Point(8, 10);
                    }
                    else
                    {
                        MonoFlatTB.Location = new Point(35, 11);
                    }
                    Invalidate();
                }
            }

            protected Size ImageSize
            {
                get
                {
                    return _ImageSize;
                }
            }

            #endregion
            #region  EventArgs

            private void _Enter(object Obj, EventArgs e)
            {
                P1 = new Pen(Color.FromArgb(181, 41, 42));
                Refresh();
            }

            private void _Leave(object Obj, EventArgs e)
            {
                P1 = new Pen(Color.FromArgb(32, 41, 50));
                Refresh();
            }

            private void OnBaseTextChanged(object s, EventArgs e)
            {
                Text = MonoFlatTB.Text;
            }

            protected override void OnTextChanged(System.EventArgs e)
            {
                base.OnTextChanged(e);
                MonoFlatTB.Text = Text;
                Invalidate();
            }

            protected override void OnForeColorChanged(System.EventArgs e)
            {
                base.OnForeColorChanged(e);
                MonoFlatTB.ForeColor = ForeColor;
                Invalidate();
            }

            protected override void OnFontChanged(System.EventArgs e)
            {
                base.OnFontChanged(e);
                MonoFlatTB.Font = Font;
            }

            protected override void OnPaintBackground(PaintEventArgs e)
            {
                base.OnPaintBackground(e);
            }

            private void _OnKeyDown(object Obj, KeyEventArgs e)
            {
                if (e.Control && e.KeyCode == Keys.A)
                {
                    MonoFlatTB.SelectAll();
                    e.SuppressKeyPress = true;
                }
                if (e.Control && e.KeyCode == Keys.C)
                {
                    MonoFlatTB.Copy();
                    e.SuppressKeyPress = true;
                }
            }

            protected override void OnResize(System.EventArgs e)
            {
                base.OnResize(e);
                if (_Multiline)
                {
                    MonoFlatTB.Height = Height - 23;
                }
                else
                {
                    Height = MonoFlatTB.Height + 23;
                }

                Shape = new GraphicsPath();
                Shape.AddArc(0, 0, 10, 10, 180, 90);
                Shape.AddArc(Width - 11, 0, 10, 10, -90, 90);
                Shape.AddArc(Width - 11, Height - 11, 10, 10, 0, 90);
                Shape.AddArc(0, Height - 11, 10, 10, 90, 90);
                Shape.CloseAllFigures();
            }

            protected override void OnGotFocus(System.EventArgs e)
            {
                base.OnGotFocus(e);
                MonoFlatTB.Focus();
            }

            public void _TextChanged(System.Object sender, System.EventArgs e)
            {
                Text = MonoFlatTB.Text;
            }

            public void _BaseTextChanged(System.Object sender, System.EventArgs e)
            {
                MonoFlatTB.Text = Text;
            }

            #endregion

            public void AddTextBox()
            {
                MonoFlatTB.Location = new Point(8, 10);
                MonoFlatTB.Text = String.Empty;
                MonoFlatTB.BorderStyle = BorderStyle.None;
                MonoFlatTB.TextAlign = HorizontalAlignment.Left;
                MonoFlatTB.Font = new Font("Tahoma", 11);
                MonoFlatTB.UseSystemPasswordChar = UseSystemPasswordChar;
                MonoFlatTB.Multiline = false;
                MonoFlatTB.BackColor = Color.FromArgb(66, 76, 85);
                MonoFlatTB.ScrollBars = ScrollBars.None;
                MonoFlatTB.KeyDown += _OnKeyDown;
                MonoFlatTB.Enter += _Enter;
                MonoFlatTB.Leave += _Leave;
                MonoFlatTB.TextChanged += OnBaseTextChanged;
            }

            public Ce_TextBox_New()
            {
                SetStyle(ControlStyles.SupportsTransparentBackColor, true);
                SetStyle(ControlStyles.UserPaint, true);

                AddTextBox();
                Controls.Add(MonoFlatTB);

                P1 = new Pen(Color.FromArgb(32, 41, 50));
                B1 = new SolidBrush(Color.FromArgb(66, 76, 85));
                BackColor = Color.Transparent;
                ForeColor = Color.FromArgb(176, 183, 191);

                Text = null;
                Font = new Font("Tahoma", 11);
                Size = new Size(135, 43);
                DoubleBuffered = true;
            }

            protected override void OnPaint(System.Windows.Forms.PaintEventArgs e)
            {
                base.OnPaint(e);
                Bitmap B = new Bitmap(Width, Height);
                Graphics G = Graphics.FromImage(B);

                G.SmoothingMode = SmoothingMode.AntiAlias;


                if (Image == null)
                {
                    MonoFlatTB.Width = Width - 18;
                }
                else
                {
                    MonoFlatTB.Width = Width - 45;
                }

                MonoFlatTB.TextAlign = TextAlignment;
                MonoFlatTB.UseSystemPasswordChar = UseSystemPasswordChar;

                G.Clear(Color.Transparent);

                G.FillPath(B1, Shape);
                G.DrawPath(P1, Shape);

                if (Image != null)
                {
                    G.DrawImage(_Image, 5, 8, 24, 24);
                    // 24x24 is the perfect size of the image
                }

                e.Graphics.DrawImage((Image)(B.Clone()), 0, 0);
                G.Dispose();
                B.Dispose();
            }
        }

        #endregion
        #region TextBox_Old
        public class Ce_TextBox_Old : Control
        {
            private TextBox withEventsField_txtbox = new TextBox();
            public TextBox txtbox
            {
                get { return withEventsField_txtbox; }
                set
                {
                    if (withEventsField_txtbox != null)
                    {
                        //withEventsField_txtbox.TextChanged -= TextChngTxtBox;
                    }
                    withEventsField_txtbox = value;
                    if (withEventsField_txtbox != null)
                    {
                        //withEventsField_txtbox.TextChanged += TextChngTxtBox;
                    }
                }

            }
            #region " Control Help - Properties & Flicker Control "
            private bool _passmask = false;
            public bool UseSystemPasswordChar
            {
                get { return _passmask; }
                set
                {
                    txtbox.UseSystemPasswordChar = UseSystemPasswordChar;
                    _passmask = value;
                    Invalidate();
                }
            }
            private int _maxchars = 32767;
            public int MaxLength
            {
                get { return _maxchars; }
                set
                {
                    _maxchars = value;
                    txtbox.MaxLength = MaxLength;
                    Invalidate();
                }
            }
            private HorizontalAlignment _align;
            public HorizontalAlignment TextAlignment
            {
                get { return _align; }
                set
                {
                    _align = value;
                    Invalidate();
                }
            }
            private bool _multiline = false;
            public bool MultiLine
            {
                get { return _multiline; }
                set
                {
                    _multiline = value;
                    Invalidate();
                }
            }


            protected override void OnTextChanged(System.EventArgs e)
            {
                base.OnTextChanged(e);
                Invalidate();
            }
            protected override void OnBackColorChanged(System.EventArgs e)
            {
                base.OnBackColorChanged(e);
                txtbox.BackColor = BackColor;
                Invalidate();
            }
            protected override void OnForeColorChanged(System.EventArgs e)
            {
                base.OnForeColorChanged(e);
                txtbox.ForeColor = ForeColor;
                Invalidate();
            }
            protected override void OnFontChanged(System.EventArgs e)
            {
                base.OnFontChanged(e);
                txtbox.Font = Font;
            }
            protected override void OnGotFocus(System.EventArgs e)
            {
                base.OnGotFocus(e);
                txtbox.Focus();
            }
            public void TextChngTxtBox()
            {
                Text = txtbox.Text;
            }
            public void TextChng()
            {
                txtbox.Text = Text;
            }
            public void NewTextBox()
            {
                var _with1 = txtbox;
                _with1.Multiline = false;
                _with1.BackColor = Color.FromArgb(43, 43, 43);
                _with1.ForeColor = ForeColor;
                _with1.Text = string.Empty;
                _with1.TextAlign = HorizontalAlignment.Center;
                _with1.BorderStyle = BorderStyle.None;
                _with1.Location = new Point(5, 4);
                _with1.Font = new Font("Trebuchet MS", 8.25f, FontStyle.Bold);
                _with1.Size = new Size(Width - 10, Height - 11);
                _with1.UseSystemPasswordChar = UseSystemPasswordChar;

            }
            #endregion

            public Ce_TextBox_Old()
                : base()
            {
                //TextChanged += TextChng;

                NewTextBox();
                Controls.Add(txtbox);

                SetStyle(ControlStyles.UserPaint, true);
                SetStyle(ControlStyles.SupportsTransparentBackColor, true);

                Text = "";
                BackColor = Color.FromArgb(233, 233, 233);
                ForeColor = Color.FromArgb(27, 94, 137);
                Font = new Font("Verdana", 6.75f, FontStyle.Bold);
                Size = new Size(135, 35);
                DoubleBuffered = true;
            }

            protected override void OnPaint(System.Windows.Forms.PaintEventArgs e)
            {
                Bitmap B = new Bitmap(Width, Height);
                Graphics G = Graphics.FromImage(B);
                G.SmoothingMode = SmoothingMode.HighQuality;

                Height = txtbox.Height + 10;
                var _with2 = txtbox;
                _with2.Width = Width - 10;
                _with2.TextAlign = TextAlignment;
                _with2.UseSystemPasswordChar = UseSystemPasswordChar;

                G.Clear(Color.Transparent);

                LinearGradientBrush innerBorderBrush = new LinearGradientBrush(new Rectangle(1, 1, Width - 3, Height - 3), Color.FromArgb(220, 220, 220), Color.FromArgb(228, 228, 228), 90);
                Pen innerBorderPen = new Pen(innerBorderBrush);
                G.DrawRectangle(innerBorderPen, new Rectangle(1, 1, Width - 3, Height - 3));
                G.DrawLine(new Pen(Color.FromArgb(191, 191, 191)), new Point(1, 1), new Point(Width - 3, 1));

                G.DrawRectangle(new Pen(Color.FromArgb(254, 254, 254)), new Rectangle(0, 0, Width - 1, Height - 1));
                e.Graphics.DrawImage((Bitmap)B.Clone(), 0, 0);
                G.Dispose();
                B.Dispose();
            }
        }
        #endregion
#endregion
        #region ProgressbBar Pack 3+
        #region Glass ProgreSsBar
        class Ce_GlassProgreSsBar : Control
        {
            private System.Windows.Forms.Timer GlowAnimation = new System.Windows.Forms.Timer();
            //Private _GlowColor As Color = Color.FromArgb(55, 65, 75)
            private Color _GlowColor = Color.FromArgb(50, 255, 255, 255);
            private bool _Animate = true;
            private Int32 _Value = 0;
            private Color _HighlightColor = Color.Silver;
            private Color _BackgroundColor = Color.FromArgb(150, 150, 150);
            #region "Properties"
            private Color _StartColor = Color.FromArgb(110, 110, 110);
            public Color Color
            {
                get { return _StartColor; }
                set
                {
                    _StartColor = value;
                    this.Invalidate();
                }
            }
            public bool Animate
            {
                get { return _Animate; }
                set
                {
                    _Animate = value;
                    if (value == true)
                    {
                        GlowAnimation.Start();
                    }
                    else
                    {
                        GlowAnimation.Stop();
                    }
                    this.Invalidate();
                }
            }
            public Color GlowColor
            {
                get { return _GlowColor; }
                set
                {
                    _GlowColor = value;
                    this.Invalidate();
                }
            }
            public Int32 Value
            {
                get { return _Value; }
                set
                {
                    if (value < 0)
                        return;
                    _Value = value;
                    if (value < 100)
                        GlowAnimation.Start();

                    this.Invalidate();
                }
            }
            public Color BackgroundColor
            {
                get { return _BackgroundColor; }
                set
                {
                    _BackgroundColor = value;
                    this.Invalidate();
                }
            }
            public Color HighlightColor
            {
                get { return _HighlightColor; }
                set
                {
                    _HighlightColor = value;
                    this.Invalidate();
                }
            }

            #endregion
            private bool InDesignMode()
            {
                return (LicenseManager.UsageMode == LicenseUsageMode.Designtime);
            }
            public Ce_GlassProgreSsBar()
                : base()
            {
                DoubleBuffered = true;
                SetStyle(ControlStyles.UserPaint | ControlStyles.SupportsTransparentBackColor, true);

                if (!InDesignMode())
                {
                    GlowAnimation.Interval = 15;
                    if (Value < 100)
                        GlowAnimation.Start();

                    GlowAnimation.Tick += GlowAnimation_Tick;
                }
            }

            private int _mGlowPosition = -100;
            protected override void OnPaint(System.Windows.Forms.PaintEventArgs e)
            {
                Bitmap B = new Bitmap(Width, Height);
                Graphics G = Graphics.FromImage(B);
                G.SmoothingMode = SmoothingMode.HighQuality;

                G.Clear(Color.FromArgb(43, 53, 63));
                //   -------------------Draw Background for the MBProgressBar--------------------

                LinearGradientBrush s2 = new LinearGradientBrush(new Rectangle(0, 2, Width - 3, 50), Color.FromArgb(35, 45, 55), Color.FromArgb(50, Color.White), 90);

                LinearGradientBrush s1 = new LinearGradientBrush(new Rectangle(0, 2, Width - 3, 50), Color.FromArgb(75, Color.White), Color.FromArgb(35, 45, 55), 90);

                Rectangle BackRectangle = this.ClientRectangle;
                BackRectangle.Width = BackRectangle.Width - 1;
                BackRectangle.Height = BackRectangle.Height - 1;
                GraphicsPath GrafP = RoundRect(BackRectangle, 2, 2, 2, 2);
                G.FillPath(s1, GrafP);


                //--------------------Draw Background Shadows for MBProgrssBar------------------
                Rectangle BGSH = new Rectangle(2, 2, 10, this.Height - 5);
                LinearGradientBrush LGBS = new LinearGradientBrush(BGSH, Color.FromArgb(70, 80, 90), Color.FromArgb(95, 105, 115), LinearGradientMode.Horizontal);
                G.FillRectangle(LGBS, BGSH);
                Rectangle BGSRectangle = new Rectangle(this.Width - 12, 2, 10, this.Height - 5);
                LinearGradientBrush LG = new LinearGradientBrush(BGSRectangle, Color.FromArgb(80, 90, 100), Color.FromArgb(75, 85, 95), LinearGradientMode.Horizontal);
                G.FillRectangle(LG, BGSRectangle);


                //----------------------Draw MBProgressBar--------------------	
                Rectangle ProgressRect = new Rectangle(1, 2, this.Width - 3, this.Height - 3);
                ProgressRect.Width = Convert.ToInt32((Value * 1f / (100) * this.Width));
                G.FillRectangle(s2, ProgressRect);


                //----------------------Draw Shadows for MBProgressBar------------------
                Rectangle SHRect = new Rectangle(1, 2, 15, this.Height - 3);
                LinearGradientBrush LGSHP = new LinearGradientBrush(SHRect, Color.Black, Color.Black, LinearGradientMode.Horizontal);

                ColorBlend BColor = new ColorBlend(3);
                BColor.Colors = new Color[] {
            Color.Gray,
            Color.FromArgb(40, 0, 0, 0),
            Color.Transparent
        };
                BColor.Positions = new float[] {
            0f,
            0.2f,
            1f
        };
                LGSHP.InterpolationColors = BColor;

                SHRect.X = SHRect.X - 1;
                G.FillRectangle(LGSHP, SHRect);

                Rectangle Rect1 = new Rectangle(this.Width - 3, 2, 15, this.Height - 3);
                Rect1.X = Convert.ToInt32((Value * 1f / (100) * this.Width) - 14);
                LinearGradientBrush LGSH1 = new LinearGradientBrush(Rect1, Color.Black, Color.Black, LinearGradientMode.Horizontal);

                ColorBlend BColor1 = new ColorBlend(3);
                BColor1.Colors = new Color[] {
            Color.Transparent,
            Color.FromArgb(70, 0, 0, 0),
            Color.Transparent
        };
                BColor1.Positions = new float[] {
            0f,
            0.8f,
            1f
        };
                LGSH1.InterpolationColors = BColor1;

                G.FillRectangle(LGSH1, Rect1);


                //-------------------------Draw Highlight for MBProgressBar-----------------
                Rectangle HLRect = new Rectangle(1, 1, this.Width - 1, 6);
                GraphicsPath HLGPa = RoundRect(HLRect, 2, 2, 0, 0);
                //G.SetClip(HLGPa)
                LinearGradientBrush HLGBS = new LinearGradientBrush(HLRect, Color.FromArgb(190, 190, 190), Color.FromArgb(150, 150, 150), LinearGradientMode.Vertical);
                G.FillPath(HLGBS, HLGPa);
                G.ResetClip();
                Rectangle HLrect2 = new Rectangle(1, this.Height - 8, this.Width - 1, 6);
                GraphicsPath bp1 = RoundRect(HLrect2, 0, 0, 2, 2);
                // G.SetClip(bp1)
                LinearGradientBrush bg1 = new LinearGradientBrush(HLrect2, Color.Transparent, Color.FromArgb(150, this.HighlightColor), LinearGradientMode.Vertical);
                G.FillPath(bg1, bp1);
                G.ResetClip();


                //--------------------Draw Inner Sroke for MBProgressBar--------------
                Rectangle Rect20 = this.ClientRectangle;
                Rect20.X = Rect20.X + 1;
                Rect20.Y = Rect20.Y + 1;
                Rect20.Width -= 3;
                Rect20.Height -= 3;
                GraphicsPath Rect15 = RoundRect(Rect20, 2, 2, 2, 2);
                G.DrawPath(new Pen(Color.FromArgb(55, 65, 75)), Rect15);

                //-----------------------Draw Outer Stroke on the Control----------------------------
                Rectangle StrokeRect = this.ClientRectangle;
                StrokeRect.Width = StrokeRect.Width - 1;
                StrokeRect.Height = StrokeRect.Height - 1;
                GraphicsPath GGH = RoundRect(StrokeRect, 2, 2, 2, 2);
                G.DrawPath(new Pen(Color.FromArgb(122, 122, 122)), GGH);

                //------------------------Draw Glow for MBProgressBar-----------------------
                Rectangle GlowRect = new Rectangle(_mGlowPosition, 6, 60, 60);
                LinearGradientBrush GlowLGBS = new LinearGradientBrush(GlowRect, Color.FromArgb(127, 137, 147), Color.FromArgb(75, 85, 95), LinearGradientMode.Horizontal);
                ColorBlend BColor3 = new ColorBlend(4);
                BColor3.Colors = new Color[] {
            Color.Transparent,
            this.GlowColor,
            this.GlowColor,
            Color.Transparent
        };
                BColor3.Positions = new float[] {
            0f,
            0.5f,
            0.6f,
            1f
        };
                GlowLGBS.InterpolationColors = BColor3;
                Rectangle clip = new Rectangle(1, 2, this.Width - 3, this.Height - 3);
                clip.Width = Convert.ToInt32((Value * 1f / (100) * this.Width));
                G.SetClip(clip);
                G.FillRectangle(GlowLGBS, GlowRect);
                G.ResetClip();

                e.Graphics.DrawImage((Bitmap)B.Clone(), 0, 0);
                G.Dispose();
                B.Dispose();
            }

            private GraphicsPath RoundRect(RectangleF r, float r1, float r2, float r3, float r4)
            {
                float x = r.X;
                float y = r.Y;
                float w = r.Width;
                float h = r.Height;
                GraphicsPath rr5 = new GraphicsPath();
                rr5.AddBezier(x, y + r1, x, y, x + r1, y, x + r1, y);
                rr5.AddLine(x + r1, y, x + w - r2, y);
                rr5.AddBezier(x + w - r2, y, x + w, y, x + w, y + r2, x + w, y + r2);
                rr5.AddLine(x + w, y + r2, x + w, y + h - r3);
                rr5.AddBezier(x + w, y + h - r3, x + w, y + h, x + w - r3, y + h, x + w - r3, y + h);
                rr5.AddLine(x + w - r3, y + h, x + r4, y + h);
                rr5.AddBezier(x + r4, y + h, x, y + h, x, y + h - r4, x, y + h - r4);
                rr5.AddLine(x, y + h - r4, x, y + r1);
                return rr5;
            }
            private void GlowAnimation_Tick(object sender, EventArgs e)
            {
                if (this.Animate)
                {
                    _mGlowPosition += 4;
                    if (_mGlowPosition > this.Width)
                    {
                        _mGlowPosition = -10;
                        this.Invalidate();
                    }


                }
                else
                {
                    GlowAnimation.Stop();

                    _mGlowPosition = -50;
                }
            }

        }
        #endregion
        #region Circular ProgressBar

        public class Ce_ProgressBar_Circlular : Control
        {

            #region Enums

            public enum _ProgressShape
            {
                Round,
                Flat
            }

            #endregion
            #region Variables

            private long _Value;
            private long _Maximum = 100;
            private Color _ProgressColor1 = Color.FromArgb(92, 92, 92);
            private Color _ProgressColor2 = Color.FromArgb(92, 92, 92);
            private _ProgressShape ProgressShapeVal;

            #endregion
            #region Custom Properties

            public long Value
            {
                get { return _Value; }
                set
                {
                    if (value > _Maximum)
                        value = _Maximum;
                    _Value = value;
                    Invalidate();
                }
            }

            public long Maximum
            {
                get { return _Maximum; }
                set
                {
                    if (value < 1)
                        value = 1;
                    _Maximum = value;
                    Invalidate();
                }
            }

            public Color ProgressColor1
            {
                get { return _ProgressColor1; }
                set
                {
                    _ProgressColor1 = value;
                    Invalidate();
                }
            }

            public Color ProgressColor2
            {
                get { return _ProgressColor2; }
                set
                {
                    _ProgressColor2 = value;
                    Invalidate();
                }
            }

            public _ProgressShape ProgressShape
            {
                get { return ProgressShapeVal; }
                set
                {
                    ProgressShapeVal = value;
                    Invalidate();
                }
            }

            #endregion
            #region EventArgs

            protected override void OnResize(EventArgs e)
            {
                base.OnResize(e);
                SetStandardSize();
            }

            protected override void OnSizeChanged(EventArgs e)
            {
                base.OnSizeChanged(e);
                SetStandardSize();
            }

            protected override void OnPaintBackground(PaintEventArgs p)
            {
                base.OnPaintBackground(p);
            }

            #endregion

            public Ce_ProgressBar_Circlular()
            {
                Size = new Size(130, 130);
                Font = new Font("Segoe UI", 15);
                MinimumSize = new Size(100, 100);
                DoubleBuffered = true;
            }

            private void SetStandardSize()
            {
                int _Size = Math.Max(Width, Height);
                Size = new Size(_Size, _Size);
            }

            public void Increment(int Val)
            {
                this._Value += Val;
                Invalidate();
            }

            public void Decrement(int Val)
            {
                this._Value -= Val;
                Invalidate();
            }

            protected override void OnPaint(PaintEventArgs e)
            {
                base.OnPaint(e);
                using (Bitmap bitmap = new Bitmap(this.Width, this.Height))
                {
                    using (Graphics graphics = Graphics.FromImage(bitmap))
                    {
                        graphics.SmoothingMode = SmoothingMode.AntiAlias;
                        graphics.Clear(this.BackColor);
                        using (LinearGradientBrush brush = new LinearGradientBrush(this.ClientRectangle, this._ProgressColor1, this._ProgressColor2, LinearGradientMode.ForwardDiagonal))
                        {
                            using (Pen pen = new Pen(brush, 14f))
                            {
                                switch (this.ProgressShapeVal)
                                {
                                    case _ProgressShape.Round:
                                        pen.StartCap = LineCap.Round;
                                        pen.EndCap = LineCap.Round;
                                        break;

                                    case _ProgressShape.Flat:
                                        pen.StartCap = LineCap.Flat;
                                        pen.EndCap = LineCap.Flat;
                                        break;
                                }
                                graphics.DrawArc(pen, 0x12, 0x12, (this.Width - 0x23) - 2, (this.Height - 0x23) - 2, -90, (int)Math.Round((double)((360.0 / ((double)this._Maximum)) * this._Value)));
                            }
                        }
                        using (LinearGradientBrush brush2 = new LinearGradientBrush(this.ClientRectangle, Color.FromArgb(0x34, 0x34, 0x34), Color.FromArgb(0x34, 0x34, 0x34), LinearGradientMode.Vertical))
                        {
                            graphics.FillEllipse(brush2, 0x18, 0x18, (this.Width - 0x30) - 1, (this.Height - 0x30) - 1);
                        }
                        SizeF MS = graphics.MeasureString(Convert.ToString(Convert.ToInt32((100 / _Maximum) * _Value)), Font);
                        graphics.DrawString(Convert.ToString(Convert.ToInt32((100 / _Maximum) * _Value)), Font, Brushes.White, Convert.ToInt32(Width / 2 - MS.Width / 2), Convert.ToInt32(Height / 2 - MS.Height / 2));
                        e.Graphics.DrawImage(bitmap, 0, 0);
                        graphics.Dispose();
                        bitmap.Dispose();
                    }
                }
            }
        }

        #endregion
        #region Normal Progress Bar
        class Ce_ProgressBar : ThemeControl154
        {
            //Coded by HΛWK
            private int _Maximum = 100;
            private int _Value;

            private int Progress;
            public int Maximum
            {
                get { return _Maximum; }
                set
                {
                    if (value < 1)
                        value = 1;
                    if (value < _Value)
                        _Value = value;
                    _Maximum = value;
                    Invalidate();
                }
            }
            public int Value
            {
                get { return _Value; }
                set
                {
                    if (value > _Maximum)
                        value = Maximum;
                    _Value = value;
                    Invalidate();
                }
            }

            public Ce_ProgressBar()
            {
                Size = new Size(200, 25);
            }

            protected override void ColorHook()
            {
            }

            //Coded by HΛWK
            protected override void PaintHook()
            {
                G.Clear(Color.FromArgb(22, 22, 22));
                //Background
                ColorBlend bg_cblend = new ColorBlend(3);
                bg_cblend.Colors[0] = Color.FromArgb(20, 20, 20);
                bg_cblend.Colors[1] = Color.FromArgb(15, 15, 15);
                bg_cblend.Colors[2] = Color.FromArgb(20, 20, 20);
                bg_cblend.Positions = new[] { 0, (float)0.5, 1 };
                DrawGradient(bg_cblend, new Rectangle(1, 1, Width - 2, Height - 2));
                //Bar
                ColorBlend bar_cblend = new ColorBlend(3);
                bar_cblend.Colors[0] = Color.FromArgb(210, 10, 10);
                bar_cblend.Colors[1] = Color.FromArgb(120, 10, 10);
                bar_cblend.Colors[2] = Color.FromArgb(165, 10, 10);
                bar_cblend.Positions = new[] { 0, (float)0.5, 1 };
                DrawGradient(bar_cblend, new Rectangle(1, 1, Convert.ToInt32(((Width / _Maximum) * _Value) - 2), Height - 2));
                //Border
                Point[] borderPoints = {
            new Point(0, 2),
            new Point(2, 0),
            new Point(Width - 3, 0),
            new Point(Width - 1, 2),
            new Point(Width - 1, Height - 3),
            new Point(Width - 3, Height - 1),
            new Point(2, Height - 1),
            new Point(0, Height - 3)
        };
                G.DrawPolygon(Pens.Black, borderPoints);
            }
        }
        #endregion
        #endregion
        #region Other Packs 7+
          #region  Panel

        public class Ce_Panel : ContainerControl
        {

            private GraphicsPath Shape;

            public Ce_Panel()
            {
                SetStyle(ControlStyles.SupportsTransparentBackColor, true);
                SetStyle(ControlStyles.UserPaint, true);

                BackColor = Color.FromArgb(39, 51, 63);
                this.Size = new Size(187, 117);
                Padding = new Padding(5, 5, 5, 5);
                DoubleBuffered = true;
            }

            protected override void OnResize(System.EventArgs e)
            {
                base.OnResize(e);

                Shape = new GraphicsPath();
                Shape.AddArc(0, 0, 10, 10, 180, 90);
                Shape.AddArc(Width - 11, 0, 10, 10, -90, 90);
                Shape.AddArc(Width - 11, Height - 11, 10, 10, 0, 90);
                Shape.AddArc(0, Height - 11, 10, 10, 90, 90);
                Shape.CloseAllFigures();
            }

            protected override void OnPaint(System.Windows.Forms.PaintEventArgs e)
            {
                base.OnPaint(e);
                Bitmap B = new Bitmap(Width, Height);
                var G = Graphics.FromImage(B);

                G.SmoothingMode = SmoothingMode.HighQuality;

                G.Clear(Color.FromArgb(32, 41, 50)); // Set control background to transparent
                G.FillPath(new SolidBrush(Color.FromArgb(39, 51, 63)), Shape); // Draw RTB background
                G.DrawPath(new Pen(Color.FromArgb(39, 51, 63)), Shape); // Draw border

                G.Dispose();
                e.Graphics.DrawImage((Image)(B.Clone()), 0, 0);
                B.Dispose();
            }
        }

        #endregion        
          #region GradientPanel
        class Ce_GradientPanel : Panel
        {
            public Color ColorTop { get; set; }
            public Color ColorBottom { get; set; }

            protected override void OnPaint(PaintEventArgs e)
            {
                LinearGradientBrush lgb = new LinearGradientBrush(this.ClientRectangle, this.ColorTop, this.ColorBottom, 90F);
                Graphics g = e.Graphics;
                g.FillRectangle(lgb, this.ClientRectangle);
                base.OnPaint(e);
            }
        }
        #endregion
          #region  NotificationBox

        public class Ce_NotificationBox : Control
        {

            #region  Variables

            private Point CloseCoordinates;
            private bool IsOverClose;
            private int _BorderCurve = 8;
            private GraphicsPath CreateRoundPath;
            private string NotificationText = null;
            private Type _NotificationType;
            private bool _RoundedCorners;
            private bool _ShowCloseButton;
            private Image _Image;
            private Size _ImageSize;

            #endregion
            #region  Enums

            // Create a list of Notification Types
            public enum Type
            {
                @Notice,
                @Success,
                @Warning,
                @Error
            }

            #endregion
            #region  Custom Properties

            // Create a NotificationType property and add the Type enum to it
            public Type NotificationType
            {
                get
                {
                    return _NotificationType;
                }
                set
                {
                    _NotificationType = value;
                    Invalidate();
                }
            }
            // Boolean value to determine whether the control should use border radius
            public bool RoundCorners
            {
                get
                {
                    return _RoundedCorners;
                }
                set
                {
                    _RoundedCorners = value;
                    Invalidate();
                }
            }
            // Boolean value to determine whether the control should draw the close button
            public bool ShowCloseButton
            {
                get
                {
                    return _ShowCloseButton;
                }
                set
                {
                    _ShowCloseButton = value;
                    Invalidate();
                }
            }
            // Integer value to determine the curve level of the borders
            public int BorderCurve
            {
                get
                {
                    return _BorderCurve;
                }
                set
                {
                    _BorderCurve = value;
                    Invalidate();
                }
            }
            // Image value to determine whether the control should draw an image before the header
            public Image Image
            {
                get
                {
                    return _Image;
                }
                set
                {
                    if (value == null)
                    {
                        _ImageSize = Size.Empty;
                    }
                    else
                    {
                        _ImageSize = value.Size;
                    }

                    _Image = value;
                    Invalidate();
                }
            }
            // Size value - returns the image size
            protected Size ImageSize
            {
                get
                {
                    return _ImageSize;
                }
            }

            #endregion
            #region  EventArgs

            protected override void OnMouseMove(System.Windows.Forms.MouseEventArgs e)
            {
                base.OnMouseMove(e);

                // Decides the location of the drawn ellipse. If mouse is over the correct coordinates, "IsOverClose" boolean will be triggered to draw the ellipse
                if (e.X >= Width - 19 && e.X <= Width - 10 && e.Y > CloseCoordinates.Y && e.Y < CloseCoordinates.Y + 12)
                {
                    IsOverClose = true;
                }
                else
                {
                    IsOverClose = false;
                }
                // Updates the control
                Invalidate();
            }
            protected override void OnMouseDown(System.Windows.Forms.MouseEventArgs e)
            {
                base.OnMouseDown(e);

                // Disposes the control when the close button is clicked
                if (_ShowCloseButton == true)
                {
                    if (IsOverClose)
                    {
                        Dispose();
                    }
                }
            }

            #endregion

            internal GraphicsPath CreateRoundRect(Rectangle r, int curve)
            {
                // Draw a border radius
                try
                {
                    CreateRoundPath = new GraphicsPath(FillMode.Winding);
                    CreateRoundPath.AddArc(r.X, r.Y, curve, curve, 180.0F, 90.0F);
                    CreateRoundPath.AddArc(r.Right - curve, r.Y, curve, curve, 270.0F, 90.0F);
                    CreateRoundPath.AddArc(r.Right - curve, r.Bottom - curve, curve, curve, 0.0F, 90.0F);
                    CreateRoundPath.AddArc(r.X, r.Bottom - curve, curve, curve, 90.0F, 90.0F);
                    CreateRoundPath.CloseFigure();
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message + Environment.NewLine + Environment.NewLine + "Value must be either \'1\' or higher", "Invalid Integer", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    // Return to the default border curve if the parameter is less than "1"
                    _BorderCurve = 8;
                    BorderCurve = 8;
                }
                return CreateRoundPath;
            }

            public Ce_NotificationBox()
            {
                SetStyle((System.Windows.Forms.ControlStyles)(ControlStyles.AllPaintingInWmPaint | ControlStyles.UserPaint | ControlStyles.OptimizedDoubleBuffer | ControlStyles.ResizeRedraw), true);

                Font = new Font("Tahoma", 9);
                this.MinimumSize = new Size(100, 40);
                RoundCorners = false;
                ShowCloseButton = true;
            }

            protected override void OnPaint(System.Windows.Forms.PaintEventArgs e)
            {
                base.OnPaint(e);

                // Declare Graphics to draw the control
                Graphics GFX = e.Graphics;
                // Declare Color to paint the control's Text, Background and Border
                Color ForeColor = new Color();
                Color BackgroundColor = new Color();
                Color BorderColor = new Color();
                // Determine the header Notification Type font
                Font TypeFont = new Font(Font.FontFamily, Font.Size, FontStyle.Bold);
                // Decalre a new rectangle to draw the control inside it
                Rectangle MainRectangle = new Rectangle(0, 0, Width - 1, Height - 1);
                // Declare a GraphicsPath to create a border radius
                GraphicsPath CrvBorderPath = CreateRoundRect(MainRectangle, _BorderCurve);

                GFX.SmoothingMode = SmoothingMode.HighQuality;
                GFX.TextRenderingHint = System.Drawing.Text.TextRenderingHint.ClearTypeGridFit;
                GFX.Clear(Parent.BackColor);

                switch (_NotificationType)
                {
                    case Type.Notice:
                        BackgroundColor = Color.FromArgb(111, 177, 199);
                        BorderColor = Color.FromArgb(111, 177, 199);
                        ForeColor = Color.White;
                        break;
                    case Type.Success:
                        BackgroundColor = Color.FromArgb(91, 195, 162);
                        BorderColor = Color.FromArgb(91, 195, 162);
                        ForeColor = Color.White;
                        break;
                    case Type.Warning:
                        BackgroundColor = Color.FromArgb(254, 209, 108);
                        BorderColor = Color.FromArgb(254, 209, 108);
                        ForeColor = Color.DimGray;
                        break;
                    case Type.Error:
                        BackgroundColor = Color.FromArgb(217, 103, 93);
                        BorderColor = Color.FromArgb(217, 103, 93);
                        ForeColor = Color.White;
                        break;
                }

                if (_RoundedCorners == true)
                {
                    GFX.FillPath(new SolidBrush(BackgroundColor), CrvBorderPath);
                    GFX.DrawPath(new Pen(BorderColor), CrvBorderPath);
                }
                else
                {
                    GFX.FillRectangle(new SolidBrush(BackgroundColor), MainRectangle);
                    GFX.DrawRectangle(new Pen(BorderColor), MainRectangle);
                }

                switch (_NotificationType)
                {
                    case Type.Notice:
                        NotificationText = "NOTICE";
                        break;
                    case Type.Success:
                        NotificationText = "SUCCESS";
                        break;
                    case Type.Warning:
                        NotificationText = "WARNING";
                        break;
                    case Type.Error:
                        NotificationText = "ERROR";
                        break;
                }

                if (Image == null)
                {
                    GFX.DrawString(NotificationText, TypeFont, new SolidBrush(ForeColor), new Point(10, 5));
                    GFX.DrawString(Text, Font, new SolidBrush(ForeColor), new Rectangle(10, 21, Width - 17, Height - 5));
                }
                else
                {
                    GFX.DrawImage(_Image, 12, 4, 16, 16);
                    GFX.DrawString(NotificationText, TypeFont, new SolidBrush(ForeColor), new Point(30, 5));
                    GFX.DrawString(Text, Font, new SolidBrush(ForeColor), new Rectangle(10, 21, Width - 17, Height - 5));
                }

                CloseCoordinates = new Point(Width - 26, 4);

                if (_ShowCloseButton == true)
                {
                    // Draw the close button
                    GFX.DrawString("r", new Font("Marlett", 7, FontStyle.Regular), new SolidBrush(Color.FromArgb(130, 130, 130)), new Rectangle(Width - 20, 10, Width, Height), new StringFormat() { Alignment = StringAlignment.Near, LineAlignment = StringAlignment.Near });
                }

                CrvBorderPath.Dispose();
            }
        }

        #endregion
          #region  NumericUpDown

        public class Ce_NumericUpDown : Control
        {

            #region  Enums

            public enum _TextAlignment
            {
                Near,
                Center
            }

            #endregion
            #region  Variables

            private GraphicsPath Shape;
            private Pen P1;
            private SolidBrush B1;

            private long _Value;
            private long _Minimum;
            private long _Maximum;
            private int Xval;
            private int Yval;
            private bool KeyboardNum;
            private _TextAlignment MyStringAlignment;

            #endregion
            #region  Properties

            public long Value
            {
                get
                {
                    return _Value;
                }
                set
                {
                    if (value <= _Maximum & value >= _Minimum)
                    {
                        _Value = value;
                    }
                    Invalidate();
                }
            }

            public long Minimum
            {
                get
                {
                    return _Minimum;
                }
                set
                {
                    if (value < _Maximum)
                    {
                        _Minimum = value;
                    }
                    if (_Value < _Minimum)
                    {
                        _Value = Minimum;
                    }
                    Invalidate();
                }
            }

            public long Maximum
            {
                get
                {
                    return _Maximum;
                }
                set
                {
                    if (value > _Minimum)
                    {
                        _Maximum = value;
                    }
                    if (_Value > _Maximum)
                    {
                        _Value = _Maximum;
                    }
                    Invalidate();
                }
            }

            public _TextAlignment TextAlignment
            {
                get
                {
                    return MyStringAlignment;
                }
                set
                {
                    MyStringAlignment = value;
                    Invalidate();
                }
            }

            #endregion
            #region  EventArgs

            protected override void OnResize(System.EventArgs e)
            {
                base.OnResize(e);
                Height = 28;
                Shape = new GraphicsPath();
                Shape.AddArc(0, 0, 10, 10, 180, 90);
                Shape.AddArc(Width - 11, 0, 10, 10, -90, 90);
                Shape.AddArc(Width - 11, Height - 11, 10, 10, 0, 90);
                Shape.AddArc(0, Height - 11, 10, 10, 90, 90);
                Shape.CloseAllFigures();
            }

            protected override void OnMouseMove(System.Windows.Forms.MouseEventArgs e)
            {
                base.OnMouseMove(e);
                Xval = e.Location.X;
                Yval = e.Location.Y;
                Invalidate();

                if (e.X < Width - 24)
                {
                    Cursor = Cursors.IBeam;
                }
                else
                {
                    Cursor = Cursors.Default;
                }
            }

            protected override void OnMouseDown(System.Windows.Forms.MouseEventArgs e)
            {
                base.OnMouseClick(e);
                if (Xval > this.Width - 23 && Xval < this.Width - 3)
                {
                    if (Yval < 15)
                    {
                        if ((Value + 1) <= _Maximum)
                        {
                            _Value++;
                        }
                    }
                    else
                    {
                        if ((Value - 1) >= _Minimum)
                        {
                            _Value--;
                        }
                    }
                }
                else
                {
                    KeyboardNum = !KeyboardNum;
                    Focus();
                }
                Invalidate();
            }

            protected override void OnKeyPress(System.Windows.Forms.KeyPressEventArgs e)
            {
                base.OnKeyPress(e);
                try
                {
                    if (KeyboardNum == true)
                    {
                        _Value = long.Parse((_Value).ToString() + e.KeyChar.ToString().ToString());
                    }
                    if (_Value > _Maximum)
                    {
                        _Value = _Maximum;
                    }
                }
                catch (Exception)
                {
                }
            }

            protected override void OnKeyUp(System.Windows.Forms.KeyEventArgs e)
            {
                base.OnKeyUp(e);
                if (e.KeyCode == Keys.Back)
                {
                    string TemporaryValue = _Value.ToString();
                    TemporaryValue = TemporaryValue.Remove(Convert.ToInt32(TemporaryValue.Length - 1));
                    if (TemporaryValue.Length == 0)
                    {
                        TemporaryValue = "0";
                    }
                    _Value = Convert.ToInt32(TemporaryValue);
                }
                Invalidate();
            }

            protected override void OnMouseWheel(MouseEventArgs e)
            {
                base.OnMouseWheel(e);
                if (e.Delta > 0)
                {
                    if ((Value + 1) <= _Maximum)
                    {
                        _Value++;
                    }
                    Invalidate();
                }
                else
                {
                    if ((Value - 1) >= _Minimum)
                    {
                        _Value--;
                    }
                    Invalidate();
                }
            }

            #endregion

            public Ce_NumericUpDown()
            {
                SetStyle(ControlStyles.SupportsTransparentBackColor, true);
                SetStyle(ControlStyles.UserPaint, true);

                P1 = new Pen(Color.FromArgb(180, 180, 180)); // P1 = Border color
                B1 = new SolidBrush(Color.White); // B1 = Rect Background color
                BackColor = Color.Transparent;
                ForeColor = Color.DimGray;

                _Minimum = 0;
                _Maximum = 100;

                Font = new Font("Tahoma", 11);
                Size = new Size(70, 28);
                MinimumSize = new Size(62, 28);
                DoubleBuffered = true;
            }

            public void Increment(int Value)
            {
                this._Value += Value;
                Invalidate();
            }

            public void Decrement(int Value)
            {
                this._Value -= Value;
                Invalidate();
            }

            protected override void OnPaint(System.Windows.Forms.PaintEventArgs e)
            {
                base.OnPaint(e);
                Bitmap B = new Bitmap(Width, Height);
                Graphics G = Graphics.FromImage(B);

                G.SmoothingMode = SmoothingMode.AntiAlias;

                G.Clear(Color.Transparent); // Set control background color
                G.FillPath(B1, Shape); // Draw background
                G.DrawPath(P1, Shape); // Draw border

                LinearGradientBrush ColorGradient = new LinearGradientBrush(new Rectangle(Width - 23, 4, 19, 19), Color.FromArgb(241, 241, 241), Color.FromArgb(241, 241, 241), 90.0F);
                G.FillRectangle(ColorGradient, ColorGradient.Rectangle); // Fills the body of the rectangle

                G.DrawRectangle(new Pen(Color.FromArgb(252, 252, 252)), new Rectangle(Width - 22, 5, 17, 17));
                G.DrawRectangle(new Pen(Color.FromArgb(180, 180, 180)), new Rectangle(Width - 23, 4, 19, 19));

                G.DrawLine(new Pen(Color.FromArgb(250, 252, 250)), new Point(Width - 22, Height - 16), new Point(Width - 5, Height - 16));
                G.DrawLine(new Pen(Color.FromArgb(180, 180, 180)), new Point(Width - 22, Height - 15), new Point(Width - 5, Height - 15));
                G.DrawLine(new Pen(Color.FromArgb(250, 250, 250)), new Point(Width - 22, Height - 14), new Point(Width - 5, Height - 14));

                G.DrawString("+", new Font("Tahoma", 8), Brushes.Gray, Width - 19, Height - 26);
                G.DrawString("-", new Font("Tahoma", 12), Brushes.Gray, Width - 19, Height - 20);

                switch (MyStringAlignment)
                {
                    case _TextAlignment.Near:
                        G.DrawString(System.Convert.ToString(Value), Font, new SolidBrush(ForeColor), new Rectangle(5, 0, Width - 1, Height - 1), new StringFormat() { Alignment = StringAlignment.Near, LineAlignment = StringAlignment.Center });
                        break;
                    case _TextAlignment.Center:
                        G.DrawString(System.Convert.ToString(Value), Font, new SolidBrush(ForeColor), new Rectangle(0, 0, Width - 1, Height - 1), new StringFormat() { Alignment = StringAlignment.Center, LineAlignment = StringAlignment.Center });
                        break;
                }

                e.Graphics.DrawImage((Image)B.Clone(), 0, 0);
                G.Dispose();
                B.Dispose();
            }
        }

        #endregion
          #region Combo Box
        class Ce_ComboBox : ComboBox
        {

            private int X;
            public Ce_ComboBox()
                : base()
            {
                TextChanged += GhostCombo_TextChanged;
                DropDownClosed += GhostComboBox_DropDownClosed;
                SetStyle(ControlStyles.AllPaintingInWmPaint | ControlStyles.ResizeRedraw | ControlStyles.UserPaint | ControlStyles.DoubleBuffer, true);
                DrawMode = DrawMode.OwnerDrawFixed;
                ItemHeight = 18;
                BackColor = Color.FromArgb(20, 20, 20);
                DropDownStyle = ComboBoxStyle.DropDownList;
            }

            protected override void OnMouseMove(System.Windows.Forms.MouseEventArgs e)
            {
                base.OnMouseMove(e);
                X = e.X;
                Invalidate();
            }

            protected override void OnMouseLeave(System.EventArgs e)
            {
                base.OnMouseLeave(e);
                X = -1;
                Invalidate();
            }

            protected override void OnPaint(PaintEventArgs e)
            {
                if (!(DropDownStyle == ComboBoxStyle.DropDownList))
                    DropDownStyle = ComboBoxStyle.DropDownList;
                Bitmap B = new Bitmap(Width, Height);
                Graphics G = Graphics.FromImage(B);

                G.Clear(Color.FromArgb(20, 20, 20));
                LinearGradientBrush GradientBrush = new LinearGradientBrush(new Rectangle(0, 0, Width, Height / 5 * 2), Color.FromArgb(20, 0, 0, 0), Color.FromArgb(15, Color.White), 90f);
                G.FillRectangle(GradientBrush, new Rectangle(0, 0, Width, Height / 5 * 2));
                HatchBrush hatch = default(HatchBrush);
                hatch = new HatchBrush(HatchStyle.DarkUpwardDiagonal, Color.FromArgb(20, Color.Black), Color.FromArgb(0, Color.Gray));
                G.FillRectangle(hatch, 0, 0, Width, Height);

                int S1 = (int)G.MeasureString("OrainsComboBox", Font).Height;
                if (SelectedIndex != -1)
                {
                    G.DrawString(Items[SelectedIndex].ToString(), Font, new SolidBrush(Color.Orange), 4, Height / 2 - S1 / 2);
                }
                else
                {
                    if ((Items != null) & Items.Count > 0)
                    {
                        G.DrawString(Items[0].ToString(), Font, new SolidBrush(Color.Orange), 4, Height / 2 - S1 / 2);
                    }
                    else
                    {
                        G.DrawString("OrainsComboBox", Font, new SolidBrush(Color.Orange), 4, Height / 2 - S1 / 2);
                    }
                }

                if (MouseButtons == MouseButtons.None & X > Width - 25)
                {
                    //G.FillRectangle(New SolidBrush(Color.FromArgb(7, Color.White)), Width - 25, 1, Width - 25, Height - 3)
                    //  ElseIf MouseButtons = Windows.Forms.MouseButtons.None And X < Width - 25 And X >= 0 Then
                    G.FillRectangle(new SolidBrush(Color.FromArgb(7, Color.White)), 2, 1, Width - 5, Height - 3);
                }

                G.DrawRectangle(Pens.Black, 0, 0, Width - 1, Height - 1);
                G.DrawRectangle(new Pen(Color.FromArgb(40, 40, 40)), 1, 1, Width - 3, Height - 3);
                //G.DrawLine(New Pen(Color.FromArgb(40, 40, 40)), Width - 25, 1, Width - 25, Height - 3)
                //G.DrawLine(Pens.Black, Width - 24, 0, Width - 24, Height)
                // G.DrawLine(New Pen(Color.FromArgb(40, 40, 40)), Width - 23, 1, Width - 23, Height - 3)

                G.FillPolygon(Brushes.Black, Triangle(new Point(Width - 14, Height / 2), new Size(5, 3)));
                G.FillPolygon(Brushes.White, Triangle(new Point(Width - 15, Height / 2 - 1), new Size(5, 3)));

                e.Graphics.DrawImage((Bitmap)B.Clone(), 0, 0);
                G.Dispose();
                B.Dispose();
            }

            protected override void OnDrawItem(DrawItemEventArgs e)
            {
                if (e.Index < 0)
                    return;
                Rectangle rect = new Rectangle();
                rect.X = e.Bounds.X;
                rect.Y = e.Bounds.Y;
                rect.Width = e.Bounds.Width - 1;
                rect.Height = e.Bounds.Height - 1;

                e.DrawBackground();
                if ((int)e.State == 785 | (int)e.State == 17)
                {
                    e.Graphics.FillRectangle(new SolidBrush(BackColor), e.Bounds);
                    Rectangle x2 = new Rectangle(e.Bounds.Location, new Size(e.Bounds.Width + 2, e.Bounds.Height));
                    Rectangle x3 = new Rectangle(x2.Location, new Size(x2.Width, (x2.Height / 2) - 1));
                    LinearGradientBrush G1 = new LinearGradientBrush(new Point(x2.X, x2.Y), new Point(x2.X, x2.Y + x2.Height), Color.FromArgb(255, 128, 0), Color.FromArgb(153, 76, 0));
                    HatchBrush H = new HatchBrush(HatchStyle.DarkUpwardDiagonal, Color.FromArgb(15, Color.Black), Color.Transparent);
                    e.Graphics.FillRectangle(G1, x2);
                    G1.Dispose();
                    e.Graphics.FillRectangle(new SolidBrush(Color.FromArgb(25, Color.White)), x3);
                    e.Graphics.FillRectangle(H, x2);
                    G1.Dispose();
                    e.Graphics.DrawString(" " + Items[e.Index].ToString(), Font, Brushes.Black, e.Bounds.X, e.Bounds.Y + 1);
                }
                else
                {
                    e.Graphics.FillRectangle(new SolidBrush(BackColor), e.Bounds);
                    e.Graphics.DrawString(" " + Items[e.Index].ToString(), Font, Brushes.Orange, e.Bounds.X, e.Bounds.Y + 1);

                }

                base.OnDrawItem(e);
            }

            public Point[] Triangle(Point Location, Size Size)
            {
                Point[] ReturnPoints = new Point[4];
                ReturnPoints[0] = Location;
                ReturnPoints[1] = new Point(Location.X + Size.Width, Location.Y);
                ReturnPoints[2] = new Point(Location.X + Size.Width / 2, Location.Y + Size.Height);
                ReturnPoints[3] = Location;

                return ReturnPoints;
            }

            private void GhostComboBox_DropDownClosed(object sender, System.EventArgs e)
            {
                DropDownStyle = ComboBoxStyle.Simple;
                Application.DoEvents();
                DropDownStyle = ComboBoxStyle.DropDownList;
            }

            private void GhostCombo_TextChanged(object sender, System.EventArgs e)
            {
                Invalidate();
            }
        }
        #endregion
          #region ControlBox

        class Ce_ControlBox : Control
        {

            #region Enums

            public enum ButtonHoverState
            {
                Minimize,
                Maximize,
                Close,
                None
            }

            #endregion
            #region Variables

            private ButtonHoverState ButtonHState = ButtonHoverState.None;

            #endregion
            #region Properties

            private bool _EnableMaximize = true;
            public bool EnableMaximizeButton
            {
                get { return _EnableMaximize; }
                set
                {
                    _EnableMaximize = value;
                    Invalidate();
                }
            }

            private bool _EnableMinimize = true;
            public bool EnableMinimizeButton
            {
                get { return _EnableMinimize; }
                set
                {
                    _EnableMinimize = value;
                    Invalidate();
                }
            }

            private bool _EnableHoverHighlight = false;
            public bool EnableHoverHighlight
            {
                get { return _EnableHoverHighlight; }
                set
                {
                    _EnableHoverHighlight = value;
                    Invalidate();
                }
            }

            #endregion
            #region EventArgs

            protected override void OnResize(EventArgs e)
            {
                base.OnResize(e);
                Size = new Size(100, 25);
            }

            protected override void OnMouseMove(MouseEventArgs e)
            {
                base.OnMouseMove(e);
                int X = e.Location.X;
                int Y = e.Location.Y;
                if (Y > 0 && Y < (Height - 2))
                {
                    if (X > 0 && X < 34)
                    {
                        ButtonHState = ButtonHoverState.Minimize;
                    }
                    else if (X > 33 && X < 65)
                    {
                        ButtonHState = ButtonHoverState.Maximize;
                    }
                    else if (X > 64 && X < Width)
                    {
                        ButtonHState = ButtonHoverState.Close;
                    }
                    else
                    {
                        ButtonHState = ButtonHoverState.None;
                    }
                }
                else
                {
                    ButtonHState = ButtonHoverState.None;
                }
                Invalidate();
            }

            protected override void OnMouseUp(MouseEventArgs e)
            {
                base.OnMouseDown(e);
                switch (ButtonHState)
                {
                    case ButtonHoverState.Close:
                        Parent.FindForm().Close();
                        break;
                    case ButtonHoverState.Minimize:
                        if (_EnableMinimize == true)
                        {
                            Parent.FindForm().WindowState = FormWindowState.Minimized;
                        }
                        break;
                    case ButtonHoverState.Maximize:
                        if (_EnableMaximize == true)
                        {
                            if (Parent.FindForm().WindowState == FormWindowState.Normal)
                            {
                                Parent.FindForm().WindowState = FormWindowState.Maximized;
                            }
                            else
                            {
                                Parent.FindForm().WindowState = FormWindowState.Normal;
                            }
                        }
                        break;
                }
            }
            protected override void OnMouseLeave(EventArgs e)
            {
                base.OnMouseLeave(e);
                ButtonHState = ButtonHoverState.None;
                Invalidate();
            }

            protected override void OnMouseDown(MouseEventArgs e)
            {
                base.OnMouseDown(e);
                Focus();
            }

            #endregion

            public Ce_ControlBox()
                : base()
            {
                DoubleBuffered = true;
                Anchor = AnchorStyles.Top | AnchorStyles.Right;
            }

            protected override void OnCreateControl()
            {
                base.OnCreateControl();
                try
                {
                    Location = new Point(Parent.Width - 112, 15);
                }
                catch (Exception)
                {
                }
            }

            protected override void OnPaint(PaintEventArgs e)
            {
                base.OnPaint(e);
                Graphics G = e.Graphics;
                G.Clear(Color.FromArgb(181, 41, 42));

                if (_EnableHoverHighlight == true)
                {
                    switch (ButtonHState)
                    {
                        case ButtonHoverState.None:
                            G.Clear(Color.FromArgb(181, 41, 42));
                            break;
                        case ButtonHoverState.Minimize:
                            if (_EnableMinimize == true)
                            {
                                G.FillRectangle(new SolidBrush(Color.FromArgb(156, 35, 35)), new Rectangle(3, 0, 30, Height));
                            }
                            break;
                        case ButtonHoverState.Maximize:
                            if (_EnableMaximize == true)
                            {
                                G.FillRectangle(new SolidBrush(Color.FromArgb(156, 35, 35)), new Rectangle(35, 0, 30, Height));
                            }
                            break;
                        case ButtonHoverState.Close:
                            G.FillRectangle(new SolidBrush(Color.FromArgb(156, 35, 35)), new Rectangle(66, 0, 35, Height));
                            break;
                    }
                }

                //Close
                G.DrawString("r", new Font("Marlett", 12), new SolidBrush(Color.FromArgb(255, 254, 255)), new Point(Width - 16, 8), new StringFormat { Alignment = StringAlignment.Center });

                //Maximize
                switch (Parent.FindForm().WindowState)
                {
                    case FormWindowState.Maximized:
                        if (_EnableMaximize == true)
                        {
                            G.DrawString("2", new Font("Marlett", 12), new SolidBrush(Color.FromArgb(255, 254, 255)), new Point(51, 7), new StringFormat { Alignment = StringAlignment.Center });
                        }
                        else
                        {
                            G.DrawString("2", new Font("Marlett", 12), new SolidBrush(Color.LightGray), new Point(51, 7), new StringFormat { Alignment = StringAlignment.Center });
                        }
                        break;
                    case FormWindowState.Normal:
                        if (_EnableMaximize == true)
                        {
                            G.DrawString("1", new Font("Marlett", 12), new SolidBrush(Color.FromArgb(255, 254, 255)), new Point(51, 7), new StringFormat { Alignment = StringAlignment.Center });
                        }
                        else
                        {
                            G.DrawString("1", new Font("Marlett", 12), new SolidBrush(Color.LightGray), new Point(51, 7), new StringFormat { Alignment = StringAlignment.Center });
                        }
                        break;
                }

                //Minimize
                if (_EnableMinimize == true)
                {
                    G.DrawString("0", new Font("Marlett", 12), new SolidBrush(Color.FromArgb(255, 254, 255)), new Point(20, 7), new StringFormat { Alignment = StringAlignment.Center });
                }
                else
                {
                    G.DrawString("0", new Font("Marlett", 12), new SolidBrush(Color.LightGray), new Point(20, 7), new StringFormat { Alignment = StringAlignment.Center });
                }
            }
        }

        #endregion
          #region Tab Control
        class Ce_TabControl : TabControl
        {

            private Color _BG;
            public Color Backcolor
            {
                get { return _BG; }
                set { _BG = value; }
            }

            public Ce_TabControl()
            {
                SetStyle(ControlStyles.AllPaintingInWmPaint | ControlStyles.ResizeRedraw | ControlStyles.UserPaint | ControlStyles.DoubleBuffer, true);
                DoubleBuffered = true;
                Backcolor = Color.FromArgb(22, 22, 22);
            }
            protected override void CreateHandle()
            {
                base.CreateHandle();
                Alignment = TabAlignment.Top;
            }

            public Pen ToPen(Color color)
            {
                return new Pen(color);
            }

            public Brush ToBrush(Color color)
            {
                return new SolidBrush(color);
            }

            protected override void OnPaint(PaintEventArgs e)
            {
                Bitmap B = new Bitmap(Width, Height);
                Graphics G = Graphics.FromImage(B);
                try
                {
                    SelectedTab.BackColor = Backcolor;
                }
                catch
                {
                }
                G.Clear(Backcolor);
                for (int i = 0; i <= TabCount - 1; i++)
                {
                    if (i == SelectedIndex)
                    {
                        Rectangle x2 = new Rectangle(GetTabRect(i).X - 2, GetTabRect(i).Y, GetTabRect(i).Width, GetTabRect(i).Height - 2);
                        Rectangle x3 = new Rectangle(GetTabRect(i).X - 2, GetTabRect(i).Y, GetTabRect(i).Width, GetTabRect(i).Height - 1);
                        Rectangle x4 = new Rectangle(GetTabRect(i).X - 2, GetTabRect(i).Y, GetTabRect(i).Width, GetTabRect(i).Height);
                        LinearGradientBrush G1 = new LinearGradientBrush(x3, Color.FromArgb(10, 0, 0, 0), Color.FromArgb(35, 35, 35), 90f);
                        HatchBrush HB = new HatchBrush(HatchStyle.LightDownwardDiagonal, Color.FromArgb(10, Color.Black), Color.Transparent);

                        G.FillRectangle(HB, x3);
                        HB.Dispose();
                        G.FillRectangle(G1, x3);
                        G1.Dispose();
                        G.DrawLine(new Pen(Color.FromArgb(10, 10, 10)), x2.Location, new Point(x2.Location.X, x2.Location.Y + x2.Height));
                        G.DrawLine(new Pen(Color.FromArgb(10, 10, 10)), new Point(x2.Location.X + x2.Width, x2.Location.Y), new Point(x2.Location.X + x2.Width, x2.Location.Y + x2.Height));
                        G.DrawLine(new Pen(Color.FromArgb(10, 10, 10)), new Point(x2.Location.X, x2.Location.Y), new Point(x2.Location.X + x2.Width, x2.Location.Y));
                        G.DrawString(TabPages[i].Text, Font, new SolidBrush(Color.White), x4, new StringFormat
                        {
                            LineAlignment = StringAlignment.Center,
                            Alignment = StringAlignment.Center
                        });
                    }
                    else
                    {
                        Rectangle x2 = new Rectangle(GetTabRect(i).X - 2, GetTabRect(i).Y + 3, GetTabRect(i).Width, GetTabRect(i).Height - 5);
                        LinearGradientBrush G1 = new LinearGradientBrush(x2, Color.FromArgb(30, 30, 30), Color.FromArgb(35, 35, 35), -90f);
                        G.FillRectangle(G1, x2);
                        G1.Dispose();
                        G.DrawRectangle(new Pen(Color.FromArgb(15, 15, 15)), x2);
                        G.DrawString(TabPages[i].Text, Font, new SolidBrush(Color.Black), x2, new StringFormat
                        {
                            LineAlignment = StringAlignment.Center,
                            Alignment = StringAlignment.Center
                        });
                    }
                }
                G.DrawRectangle(new Pen(new SolidBrush(Color.FromArgb(10, 10, 10))), new Rectangle(0, 21, Width - 1, Height - 22));

                e.Graphics.DrawImage((Bitmap)B.Clone(), 0, 0);
                G.DrawRectangle(Pens.Black, new Rectangle(0, 0, Width - 1, Height - 1));
                G.Dispose();
                B.Dispose();
            }
        }
        #endregion
          #region Separator
        public class Ce_Separator : Control
        {

            #region " Drawing "


            private Graphics G;
            public Ce_Separator()
            {
                DoubleBuffered = true;
            }

            protected override void OnPaint(PaintEventArgs e)
            {
                G = e.Graphics;
                G.SmoothingMode = SmoothingMode.HighQuality;
                G.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;

                base.OnPaint(e);

                using (Pen P = new Pen(Color.FromArgb(232, 235, 242)) { DashStyle = DashStyle.Dash })
                {
                    G.DrawLine(P, new Point(0, 0), new Point(Width, 0));
                }

            }

            #endregion

        }
        #endregion       
          #region MenuStrip
        #region  Control Renderer

        #region  Color Table

        public abstract class xColorTable
        {
            public abstract Color TextColor { get; }
            public abstract Color Background { get; }
            public abstract Color SelectionBorder { get; }
            public abstract Color SelectionTopGradient { get; }
            public abstract Color SelectionMidGradient { get; }
            public abstract Color SelectionBottomGradient { get; }
            public abstract Color PressedBackground { get; }
            public abstract Color CheckedBackground { get; }
            public abstract Color CheckedSelectedBackground { get; }
            public abstract Color DropdownBorder { get; }
            public abstract Color Arrow { get; }
            public abstract Color OverflowBackground { get; }
        }

        public abstract class ColorTable
        {
            public abstract xColorTable CommonColorTable { get; }
            public abstract Color BackgroundTopGradient { get; }
            public abstract Color BackgroundBottomGradient { get; }
            public abstract Color DroppedDownItemBackground { get; }
            public abstract Color DropdownTopGradient { get; }
            public abstract Color DropdownBottomGradient { get; }
            public abstract Color Separator { get; }
            public abstract Color ImageMargin { get; }
        }

        public class MSColorTable : ColorTable
        {

            private xColorTable _CommonColorTable;

            public MSColorTable()
            {
                _CommonColorTable = new DefaultCColorTable();
            }

            public override xColorTable CommonColorTable
            {
                get
                {
                    return _CommonColorTable;
                }
            }

            public override System.Drawing.Color BackgroundTopGradient
            {
                get
                {
                    return Color.FromArgb(246, 246, 246);
                }
            }

            public override System.Drawing.Color BackgroundBottomGradient
            {
                get
                {
                    return Color.FromArgb(226, 226, 226);
                }
            }

            public override System.Drawing.Color DropdownTopGradient
            {
                get
                {
                    return Color.FromArgb(246, 246, 246);
                }
            }

            public override System.Drawing.Color DropdownBottomGradient
            {
                get
                {
                    return Color.FromArgb(246, 246, 246);
                }
            }

            public override System.Drawing.Color DroppedDownItemBackground
            {
                get
                {
                    return Color.FromArgb(240, 240, 240);
                }
            }

            public override System.Drawing.Color Separator
            {
                get
                {
                    return Color.FromArgb(190, 195, 203);
                }
            }

            public override System.Drawing.Color ImageMargin
            {
                get
                {
                    return Color.FromArgb(240, 240, 240);
                }
            }
        }

        public class DefaultCColorTable : xColorTable
        {

            public override System.Drawing.Color CheckedBackground
            {
                get
                {
                    return Color.FromArgb(230, 230, 230);
                }
            }

            public override System.Drawing.Color CheckedSelectedBackground
            {
                get
                {
                    return Color.FromArgb(230, 230, 230);
                }
            }

            public override System.Drawing.Color SelectionBorder
            {
                get
                {
                    return Color.FromArgb(180, 180, 180);
                }
            }

            public override System.Drawing.Color SelectionTopGradient
            {
                get
                {
                    return Color.FromArgb(240, 240, 240);
                }
            }

            public override System.Drawing.Color SelectionMidGradient
            {
                get
                {
                    return Color.FromArgb(235, 235, 235);
                }
            }

            public override System.Drawing.Color SelectionBottomGradient
            {
                get
                {
                    return Color.FromArgb(230, 230, 230);
                }
            }

            public override System.Drawing.Color PressedBackground
            {
                get
                {
                    return Color.FromArgb(232, 232, 232);
                }
            }

            public override System.Drawing.Color TextColor
            {
                get
                {
                    return Color.FromArgb(80, 80, 80);
                }
            }

            public override System.Drawing.Color Background
            {
                get
                {
                    return Color.FromArgb(188, 199, 216);
                }
            }

            public override System.Drawing.Color DropdownBorder
            {
                get
                {
                    return Color.LightGray;
                }
            }

            public override System.Drawing.Color Arrow
            {
                get
                {
                    return Color.Black;
                }
            }

            public override System.Drawing.Color OverflowBackground
            {
                get
                {
                    return Color.FromArgb(213, 220, 232);
                }
            }
        }

        #endregion
        #region  Renderer

        public class ControlRenderer : ToolStripProfessionalRenderer
        {

            public ControlRenderer()
                : this(new MSColorTable())
            {
            }

            public ControlRenderer(ColorTable ColorTable)
            {
                this.ColorTable = ColorTable;
            }

            private ColorTable _ColorTable;
            public new ColorTable ColorTable
            {
                get
                {
                    if (_ColorTable == null)
                    {
                        _ColorTable = new MSColorTable();
                    }
                    return _ColorTable;
                }
                set
                {
                    _ColorTable = value;
                }
            }

            protected override void OnRenderToolStripBackground(System.Windows.Forms.ToolStripRenderEventArgs e)
            {
                base.OnRenderToolStripBackground(e);

                // Menu strip bar gradient
                using (LinearGradientBrush LGB = new LinearGradientBrush(e.AffectedBounds, this.ColorTable.BackgroundTopGradient, this.ColorTable.BackgroundBottomGradient, LinearGradientMode.Vertical))
                {
                    e.Graphics.FillRectangle(LGB, e.AffectedBounds);
                }

            }

            protected override void OnRenderToolStripBorder(System.Windows.Forms.ToolStripRenderEventArgs e)
            {
                if (e.ToolStrip.Parent == null)
                {
                    // Draw border around the menu drop-down
                    Rectangle Rect = new Rectangle(0, 0, e.ToolStrip.Width - 1, e.ToolStrip.Height - 1);
                    using (Pen P1 = new Pen(this.ColorTable.CommonColorTable.DropdownBorder))
                    {
                        e.Graphics.DrawRectangle(P1, Rect);
                    }


                    // Fill the gap between menu drop-down and owner item
                    using (SolidBrush B1 = new SolidBrush(this.ColorTable.DroppedDownItemBackground))
                    {
                        e.Graphics.FillRectangle(B1, e.ConnectedArea);
                    }

                }
            }

            protected override void OnRenderMenuItemBackground(System.Windows.Forms.ToolStripItemRenderEventArgs e)
            {
                if (e.Item.Enabled)
                {
                    if (e.Item.Selected)
                    {
                        if (!e.Item.IsOnDropDown)
                        {
                            Rectangle SelRect = new Rectangle(0, 0, e.Item.Width - 1, e.Item.Height - 1);
                            RectDrawing.DrawSelection(e.Graphics, this.ColorTable.CommonColorTable, SelRect);
                        }
                        else
                        {
                            Rectangle SelRect = new Rectangle(2, 0, e.Item.Width - 4, e.Item.Height - 1);
                            RectDrawing.DrawSelection(e.Graphics, this.ColorTable.CommonColorTable, SelRect);
                        }
                    }

                    if (((ToolStripMenuItem)e.Item).DropDown.Visible && !e.Item.IsOnDropDown)
                    {
                        Rectangle BorderRect = new Rectangle(0, 0, e.Item.Width - 1, e.Item.Height);
                        // Fill the background
                        Rectangle BackgroundRect = new Rectangle(1, 1, e.Item.Width - 2, e.Item.Height + 2);
                        using (SolidBrush B1 = new SolidBrush(this.ColorTable.DroppedDownItemBackground))
                        {
                            e.Graphics.FillRectangle(B1, BackgroundRect);
                        }


                        // Draw border
                        using (Pen P1 = new Pen(this.ColorTable.CommonColorTable.DropdownBorder))
                        {
                            RectDrawing.DrawRoundedRectangle(e.Graphics, P1, System.Convert.ToSingle(BorderRect.X), System.Convert.ToSingle(BorderRect.Y), System.Convert.ToSingle(BorderRect.Width), System.Convert.ToSingle(BorderRect.Height), 2);
                        }

                    }
                    e.Item.ForeColor = this.ColorTable.CommonColorTable.TextColor;
                }
            }

            protected override void OnRenderItemText(System.Windows.Forms.ToolStripItemTextRenderEventArgs e)
            {
                e.TextColor = this.ColorTable.CommonColorTable.TextColor;
                base.OnRenderItemText(e);
            }

            protected override void OnRenderItemCheck(System.Windows.Forms.ToolStripItemImageRenderEventArgs e)
            {
                base.OnRenderItemCheck(e);

                Rectangle rect = new Rectangle(3, 1, e.Item.Height - 3, e.Item.Height - 3);
                Color c = default(Color);

                if (e.Item.Selected)
                {
                    c = this.ColorTable.CommonColorTable.CheckedSelectedBackground;
                }
                else
                {
                    c = this.ColorTable.CommonColorTable.CheckedBackground;
                }

                using (SolidBrush b = new SolidBrush(c))
                {
                    e.Graphics.FillRectangle(b, rect);
                }


                using (Pen p = new Pen(this.ColorTable.CommonColorTable.SelectionBorder))
                {
                    e.Graphics.DrawRectangle(p, rect);
                }


                e.Graphics.DrawString("ü", new Font("Wingdings", 13, FontStyle.Regular), Brushes.Black, new Point(4, 2));
            }

            protected override void OnRenderSeparator(System.Windows.Forms.ToolStripSeparatorRenderEventArgs e)
            {
                base.OnRenderSeparator(e);
                int PT1 = 28;
                int PT2 = System.Convert.ToInt32(e.Item.Width);
                int Y = 3;
                using (Pen P1 = new Pen(this.ColorTable.Separator))
                {
                    e.Graphics.DrawLine(P1, PT1, Y, PT2, Y);
                }

            }

            protected override void OnRenderImageMargin(System.Windows.Forms.ToolStripRenderEventArgs e)
            {
                base.OnRenderImageMargin(e);

                Rectangle BackgroundRect = new Rectangle(0, -1, e.ToolStrip.Width, e.ToolStrip.Height + 1);
                using (LinearGradientBrush LGB = new LinearGradientBrush(BackgroundRect,
                        this.ColorTable.DropdownTopGradient,
                        this.ColorTable.DropdownBottomGradient,
                        LinearGradientMode.Vertical))
                {
                    e.Graphics.FillRectangle(LGB, BackgroundRect);
                }


                using (SolidBrush B1 = new SolidBrush(this.ColorTable.ImageMargin))
                {
                    e.Graphics.FillRectangle(B1, e.AffectedBounds);
                }

            }

            protected override void OnRenderButtonBackground(System.Windows.Forms.ToolStripItemRenderEventArgs e)
            {
                Rectangle rect = new Rectangle(0, 0, e.Item.Width - 1, e.Item.Height - 1);
                bool @checked = System.Convert.ToBoolean(((ToolStripButton)e.Item).Checked);
                bool drawBorder = false;

                if (@checked)
                {
                    drawBorder = true;

                    if (e.Item.Selected && !e.Item.Pressed)
                    {
                        using (SolidBrush b = new SolidBrush(this.ColorTable.CommonColorTable.CheckedSelectedBackground))
                        {
                            e.Graphics.FillRectangle(b, rect);
                        }

                    }
                    else
                    {
                        using (SolidBrush b = new SolidBrush(this.ColorTable.CommonColorTable.CheckedBackground))
                        {
                            e.Graphics.FillRectangle(b, rect);
                        }

                    }

                }
                else
                {

                    if (e.Item.Pressed)
                    {
                        drawBorder = true;
                        using (SolidBrush b = new SolidBrush(this.ColorTable.CommonColorTable.PressedBackground))
                        {
                            e.Graphics.FillRectangle(b, rect);
                        }

                    }
                    else if (e.Item.Selected)
                    {
                        drawBorder = true;
                        RectDrawing.DrawSelection(e.Graphics, this.ColorTable.CommonColorTable, rect);
                    }

                }

                if (drawBorder)
                {
                    using (Pen p = new Pen(this.ColorTable.CommonColorTable.SelectionBorder))
                    {
                        e.Graphics.DrawRectangle(p, rect);
                    }

                }
            }

            protected override void OnRenderDropDownButtonBackground(System.Windows.Forms.ToolStripItemRenderEventArgs e)
            {
                Rectangle rect = new Rectangle(0, 0, e.Item.Width - 1, e.Item.Height - 1);
                bool drawBorder = false;

                if (e.Item.Pressed)
                {
                    drawBorder = true;
                    using (SolidBrush b = new SolidBrush(this.ColorTable.CommonColorTable.PressedBackground))
                    {
                        e.Graphics.FillRectangle(b, rect);
                    }

                }
                else if (e.Item.Selected)
                {
                    drawBorder = true;
                    RectDrawing.DrawSelection(e.Graphics, this.ColorTable.CommonColorTable, rect);
                }

                if (drawBorder)
                {
                    using (Pen p = new Pen(this.ColorTable.CommonColorTable.SelectionBorder))
                    {
                        e.Graphics.DrawRectangle(p, rect);
                    }

                }
            }

            protected override void OnRenderSplitButtonBackground(ToolStripItemRenderEventArgs e)
            {
                base.OnRenderSplitButtonBackground(e);
                bool drawBorder = false;
                bool drawSeparator = true;
                ToolStripSplitButton item = (ToolStripSplitButton)e.Item;
                checked
                {
                    Rectangle btnRect = new Rectangle(0, 0, item.ButtonBounds.Width - 1, item.ButtonBounds.Height - 1);
                    Rectangle borderRect = new Rectangle(0, 0, item.Bounds.Width - 1, item.Bounds.Height - 1);
                    bool flag = item.DropDownButtonPressed;
                    if (flag)
                    {
                        drawBorder = true;
                        drawSeparator = false;
                        SolidBrush b = new SolidBrush(this.ColorTable.CommonColorTable.PressedBackground);
                        try
                        {
                            e.Graphics.FillRectangle(b, borderRect);
                        }
                        finally
                        {
                            flag = (b != null);
                            if (flag)
                            {
                                ((IDisposable)b).Dispose();
                            }
                        }
                    }
                    else
                    {
                        flag = item.DropDownButtonSelected;
                        if (flag)
                        {
                            drawBorder = true;
                            RectDrawing.DrawSelection(e.Graphics, this.ColorTable.CommonColorTable, borderRect);
                        }
                    }
                    flag = item.ButtonPressed;
                    if (flag)
                    {
                        SolidBrush b2 = new SolidBrush(this.ColorTable.CommonColorTable.PressedBackground);
                        try
                        {
                            e.Graphics.FillRectangle(b2, btnRect);
                        }
                        finally
                        {
                            flag = (b2 != null);
                            if (flag)
                            {
                                ((IDisposable)b2).Dispose();
                            }
                        }
                    }
                    flag = drawBorder;
                    if (flag)
                    {
                        Pen p = new Pen(this.ColorTable.CommonColorTable.SelectionBorder);
                        try
                        {
                            e.Graphics.DrawRectangle(p, borderRect);
                            flag = drawSeparator;
                            if (flag)
                            {
                                e.Graphics.DrawRectangle(p, btnRect);
                            }
                        }
                        finally
                        {
                            flag = (p != null);
                            if (flag)
                            {
                                ((IDisposable)p).Dispose();
                            }
                        }
                        this.DrawCustomArrow(e.Graphics, item);
                    }
                }
            }


            private void DrawCustomArrow(Graphics g, ToolStripSplitButton item)
            {
                int dropWidth = System.Convert.ToInt32(item.DropDownButtonBounds.Width - 1);
                int dropHeight = System.Convert.ToInt32(item.DropDownButtonBounds.Height - 1);
                float triangleWidth = dropWidth / 2.0F + 1;
                float triangleLeft = System.Convert.ToSingle(item.DropDownButtonBounds.Left + (dropWidth - triangleWidth) / 2.0F);
                float triangleHeight = triangleWidth / 2.0F;
                float triangleTop = System.Convert.ToSingle(item.DropDownButtonBounds.Top + (dropHeight - triangleHeight) / 2.0F + 1);
                RectangleF arrowRect = new RectangleF(triangleLeft, triangleTop, triangleWidth, triangleHeight);

                this.DrawCustomArrow(g, item, Rectangle.Round(arrowRect));
            }

            private void DrawCustomArrow(Graphics g, ToolStripItem item, Rectangle rect)
            {
                ToolStripArrowRenderEventArgs arrowEventArgs = new ToolStripArrowRenderEventArgs(g, item, rect, this.ColorTable.CommonColorTable.Arrow, ArrowDirection.Down);
                base.OnRenderArrow(arrowEventArgs);
            }

            protected override void OnRenderOverflowButtonBackground(System.Windows.Forms.ToolStripItemRenderEventArgs e)
            {
                Rectangle rect = default(Rectangle);
                Rectangle rectEnd = default(Rectangle);
                rect = new Rectangle(0, 0, e.Item.Width - 1, e.Item.Height - 2);
                rectEnd = new Rectangle(rect.X - 5, rect.Y, rect.Width - 5, rect.Height);

                if (e.Item.Pressed)
                {
                    using (SolidBrush b = new SolidBrush(this.ColorTable.CommonColorTable.PressedBackground))
                    {
                        e.Graphics.FillRectangle(b, rect);
                    }

                }
                else if (e.Item.Selected)
                {
                    RectDrawing.DrawSelection(e.Graphics, this.ColorTable.CommonColorTable, rect);
                }
                else
                {
                    using (SolidBrush b = new SolidBrush(this.ColorTable.CommonColorTable.OverflowBackground))
                    {
                        e.Graphics.FillRectangle(b, rect);
                    }

                }

                using (Pen P1 = new Pen(this.ColorTable.CommonColorTable.Background))
                {
                    RectDrawing.DrawRoundedRectangle(e.Graphics, P1, System.Convert.ToSingle(rectEnd.X), System.Convert.ToSingle(rectEnd.Y), System.Convert.ToSingle(rectEnd.Width), System.Convert.ToSingle(rectEnd.Height), 3);
                }


                // Icon
                int w = System.Convert.ToInt32(rect.Width - 1);
                int h = System.Convert.ToInt32(rect.Height - 1);
                float triangleWidth = w / 2.0F + 1;
                float triangleLeft = System.Convert.ToSingle(rect.Left + (w - triangleWidth) / 2.0F + 3);
                float triangleHeight = triangleWidth / 2.0F;
                float triangleTop = System.Convert.ToSingle(rect.Top + (h - triangleHeight) / 2.0F + 7);
                RectangleF arrowRect = new RectangleF(triangleLeft, triangleTop, triangleWidth, triangleHeight);
                this.DrawCustomArrow(e.Graphics, e.Item, Rectangle.Round(arrowRect));

                using (Pen p = new Pen(this.ColorTable.CommonColorTable.Arrow))
                {
                    e.Graphics.DrawLine(p, triangleLeft + 2, triangleTop - 2, triangleLeft + triangleWidth - 2, triangleTop - 2);
                }

            }
        }

        #endregion
        #region  Drawing

        public class RectDrawing
        {

            public static void DrawSelection(Graphics G, xColorTable ColorTable, Rectangle Rect)
            {
                Rectangle TopRect = default(Rectangle);
                Rectangle BottomRect = default(Rectangle);
                Rectangle FillRect = new Rectangle(Rect.X + 1, Rect.Y + 1, Rect.Width - 1, Rect.Height - 1);

                TopRect = FillRect;
                TopRect.Height -= System.Convert.ToInt32(TopRect.Height / 2);
                BottomRect = new Rectangle(TopRect.X, TopRect.Bottom, TopRect.Width, FillRect.Height - TopRect.Height);

                // Top gradient
                using (LinearGradientBrush LGB = new LinearGradientBrush(TopRect, ColorTable.SelectionTopGradient, ColorTable.SelectionMidGradient, LinearGradientMode.Vertical))
                {
                    G.FillRectangle(LGB, TopRect);
                }


                // Bottom
                using (SolidBrush B1 = new SolidBrush(ColorTable.SelectionBottomGradient))
                {
                    G.FillRectangle(B1, BottomRect);
                }


                // Border
                using (Pen P1 = new Pen(ColorTable.SelectionBorder))
                {
                    RectDrawing.DrawRoundedRectangle(G, P1, System.Convert.ToSingle(Rect.X), System.Convert.ToSingle(Rect.Y), System.Convert.ToSingle(Rect.Width), System.Convert.ToSingle(Rect.Height), 2);
                }

            }

            public static void DrawRoundedRectangle(Graphics G, Pen P, float X, float Y, float W, float H, float Rad)
            {

                using (GraphicsPath gp = new GraphicsPath())
                {
                    gp.AddLine(X + Rad, Y, X + W - (Rad * 2), Y);
                    gp.AddArc(X + W - (Rad * 2), Y, Rad * 2, Rad * 2, 270, 90);
                    gp.AddLine(X + W, Y + Rad, X + W, Y + H - (Rad * 2));
                    gp.AddArc(X + W - (Rad * 2), Y + H - (Rad * 2), Rad * 2, Rad * 2, 0, 90);
                    gp.AddLine(X + W - (Rad * 2), Y + H, X + Rad, Y + H);
                    gp.AddArc(X, Y + H - (Rad * 2), Rad * 2, Rad * 2, 90, 90);
                    gp.AddLine(X, Y + H - (Rad * 2), X, Y + Rad);
                    gp.AddArc(X, Y, Rad * 2, Rad * 2, 180, 90);
                    gp.CloseFigure();

                    G.SmoothingMode = SmoothingMode.AntiAlias;
                    G.DrawPath(P, gp);
                    G.SmoothingMode = SmoothingMode.Default;
                }

            }
        }

        #endregion

        #endregion

        public class iTalk_MenuStrip : MenuStrip
        {

            public iTalk_MenuStrip()
            {
                this.Renderer = new ControlRenderer();
            }

            public new ControlRenderer Renderer
            {
                get { return (ControlRenderer)base.Renderer; }
                set { base.Renderer = value; }
            }

        }

        #endregion
          #region ListView

        class iTalk_Listview : ListView
        {

            [DllImport("uxtheme", CharSet = CharSet.Unicode)]
            public static extern int SetWindowTheme(IntPtr hWnd, string textSubAppName, string textSubIdList);

            public iTalk_Listview()
            {
                this.SetStyle(ControlStyles.OptimizedDoubleBuffer, true);
                this.DoubleBuffered = true;
                HeaderStyle = ColumnHeaderStyle.Nonclickable;
                BorderStyle = System.Windows.Forms.BorderStyle.None;
            }

            protected override void OnHandleCreated(EventArgs e)
            {
                iTalk_Listview.SetWindowTheme(this.Handle, "explorer", null);
                base.OnHandleCreated(e);
            }
        }

        #endregion
          #region TabControl

        class iTalk_TabControl : TabControl
        {

            // NOTE: For best quality icons/images on the TabControl; from the associated ImageList, set
            // the image size (24,24) so it can fit in the tab rectangle. However, to ensure a
            // high-quality image drawing, make sure you only add (32,32) images and not (24,24) as
            // determined in the ImageList

            // INFO: A free, non-commercial icon list that would fit in perfectly with the TabControl is
            // Wireframe Toolbar Icons by Gentleface. Licensed under Creative Commons Attribution.
            // Check it out from here: http://www.gentleface.com/free_icon_set.html

            public iTalk_TabControl()
            {
                SetStyle(ControlStyles.AllPaintingInWmPaint | ControlStyles.UserPaint | ControlStyles.ResizeRedraw | ControlStyles.DoubleBuffer, true);

                DoubleBuffered = true;
                SizeMode = TabSizeMode.Fixed;
                ItemSize = new Size(44, 135);
                DrawMode = TabDrawMode.OwnerDrawFixed;

                foreach (TabPage Page in this.TabPages)
                {
                    Page.BackColor = Color.FromArgb(246, 246, 246);
                }
            }

            protected override void CreateHandle()
            {
                base.CreateHandle();

                base.DoubleBuffered = true;
                SizeMode = TabSizeMode.Fixed;
                Appearance = TabAppearance.Normal;
                Alignment = TabAlignment.Left;
            }


            protected override void OnControlAdded(ControlEventArgs e)
            {
                base.OnControlAdded(e);
                if (e.Control is TabPage)
                {
                    IEnumerator enumerator;
                    try
                    {
                        enumerator = this.Controls.GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            TabPage current = (TabPage)enumerator.Current;
                            current = new TabPage();
                        }
                    }
                    finally
                    {
                        e.Control.BackColor = Color.FromArgb(246, 246, 246);
                    }
                }
            }

            protected override void OnPaint(PaintEventArgs e)
            {
                base.OnPaint(e);
                Bitmap B = new Bitmap(Width, Height);
                Graphics G = Graphics.FromImage(B);

                var _Graphics = G;

                _Graphics.Clear(Color.FromArgb(246, 246, 246));
                _Graphics.SmoothingMode = SmoothingMode.HighSpeed;
                _Graphics.CompositingQuality = System.Drawing.Drawing2D.CompositingQuality.HighSpeed;
                _Graphics.CompositingMode = System.Drawing.Drawing2D.CompositingMode.SourceOver;

                // Draw tab selector background
                _Graphics.FillRectangle(new SolidBrush(Color.FromArgb(54, 57, 64)), new Rectangle(-5, 0, ItemSize.Height + 4, Height));
                // Draw vertical line at the end of the tab selector rectangle
                _Graphics.DrawLine(new Pen(Color.FromArgb(25, 26, 28)), ItemSize.Height - 1, 0, ItemSize.Height - 1, Height);

                for (int TabIndex = 0; TabIndex <= TabCount - 1; TabIndex++)
                {
                    if (TabIndex == SelectedIndex)
                    {
                        Rectangle TabRect = new Rectangle(new Point(GetTabRect(TabIndex).Location.X - 2, GetTabRect(TabIndex).Location.Y - 2), new Size(GetTabRect(TabIndex).Width + 3, GetTabRect(TabIndex).Height - 8));

                        // Draw background of the selected tab
                        _Graphics.FillRectangle(new SolidBrush(Color.FromArgb(35, 36, 38)), TabRect.X, TabRect.Y, TabRect.Width - 4, TabRect.Height + 3);
                        // Draw a tab highlighter on the background of the selected tab
                        Rectangle TabHighlighter = new Rectangle(new Point(GetTabRect(TabIndex).X - 2, GetTabRect(TabIndex).Location.Y - (TabIndex == 0 ? 1 : 1)), new Size(4, GetTabRect(TabIndex).Height - 7));
                        _Graphics.FillRectangle(new SolidBrush(Color.FromArgb(89, 169, 222)), TabHighlighter);
                        // Draw tab text
                        _Graphics.DrawString(TabPages[TabIndex].Text, new Font(Font.FontFamily, Font.Size, FontStyle.Bold), new SolidBrush(Color.FromArgb(254, 255, 255)), new Rectangle(TabRect.Left + 40, TabRect.Top + 12, TabRect.Width - 40, TabRect.Height), new StringFormat { Alignment = StringAlignment.Near });

                        if (this.ImageList != null)
                        {
                            int Index = TabPages[TabIndex].ImageIndex;
                            if (!(Index == -1))
                            {
                                _Graphics.DrawImage(ImageList.Images[TabPages[TabIndex].ImageIndex], TabRect.X + 9, TabRect.Y + 6, 24, 24);
                            }
                        }
                    }
                    else
                    {
                        Rectangle TabRect = new Rectangle(new Point(GetTabRect(TabIndex).Location.X - 2, GetTabRect(TabIndex).Location.Y - 2), new Size(GetTabRect(TabIndex).Width + 3, GetTabRect(TabIndex).Height - 8));
                        _Graphics.DrawString(TabPages[TabIndex].Text, new Font(Font.FontFamily, Font.Size, FontStyle.Bold), new SolidBrush(Color.FromArgb(159, 162, 167)), new Rectangle(TabRect.Left + 40, TabRect.Top + 12, TabRect.Width - 40, TabRect.Height), new StringFormat { Alignment = StringAlignment.Near });

                        if (this.ImageList != null)
                        {
                            int Index = TabPages[TabIndex].ImageIndex;
                            if (!(Index == -1))
                            {
                                _Graphics.DrawImage(ImageList.Images[TabPages[TabIndex].ImageIndex], TabRect.X + 9, TabRect.Y + 6, 24, 24);
                            }
                        }

                    }
                }
                e.Graphics.SmoothingMode = SmoothingMode.HighQuality;
                e.Graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;
                e.Graphics.CompositingQuality = CompositingQuality.HighQuality;
                e.Graphics.DrawImage((Image)B.Clone(), 0, 0);
                G.Dispose();
                B.Dispose();
            }
        }

        #endregion         
#endregion
        #region
        public class ToggleButton : Control
    {
        #region variables
        FileInfo f;
        Rectangle contentRectangle = Rectangle.Empty;
        Point[] pts2 = new Point[4];
        Rectangle controlBounds = Rectangle.Empty;
        bool justRefresh = false;

        #endregion
        #region Draw
        public ToggleButton()
        {
            this.SetStyle(ControlStyles.OptimizedDoubleBuffer | ControlStyles.ResizeRedraw | ControlStyles.UserPaint |
                ControlStyles.AllPaintingInWmPaint | ControlStyles.SupportsTransparentBackColor, true);
            f = FindApplicationFile("screw.png");
        }

        protected override void OnPaint(PaintEventArgs e)
        {
            controlBounds = e.ClipRectangle;
            e.Graphics.ResetClip();
            switch (ToggleStyle)
            {
                case ToggleButtonStyle.Android:
                    this.MinimumSize = new Size(75, 23);
                    this.MaximumSize = new Size(119, 32);
                    contentRectangle = e.ClipRectangle;
                    this.BackColor = Color.FromArgb(32, 32, 32);
                    DrawAndroidStyle(e);
                    break;
                case ToggleButtonStyle.Windows:
                    this.MinimumSize = new Size(65, 23);
                    this.MaximumSize = new Size(119, 32);
                    contentRectangle = new Rectangle(e.ClipRectangle.X, e.ClipRectangle.Y, this.Width - 1, this.Height - 1);
                    DrawWindowsStyle(e);
                    break;
                case ToggleButtonStyle.IOS:
                    this.MinimumSize = new Size(93, 30);
                    this.MaximumSize = new Size(135, 51);
                    Rectangle r = new Rectangle(0, 0, this.Width, this.Height);
                    contentRectangle = r;
                    DrawIOSStyle(e);
                    break;
                case ToggleButtonStyle.Custom:
                    this.MinimumSize = new Size(160, 50);
                    r = new Rectangle(2, 2, this.Width - 3, this.Height - 3);
                    contentRectangle = r;
                    DrawCustomStyle(e);
                    break;

            }
            base.OnPaint(e);
        }

        #endregion

        #region AndroidStyle
        Point[] andPoints = new Point[4]; Point p1, p2, p3, p4;
        private Point[] AndroidPoints()
        {
            p1 = new Point(padx, contentRectangle.Y);
            if (padx == 0)
                p2 = new Point(padx, contentRectangle.Bottom);
            else
                p2 = new Point(padx - SlidingAngle, contentRectangle.Bottom);

            p4 = new Point(p1.X + (contentRectangle.Width / 2), contentRectangle.Y);

            p3 = new Point(p4.X - SlidingAngle, contentRectangle.Bottom);
            if (p4.X == contentRectangle.Right)
                p3 = new Point(p4.X, contentRectangle.Bottom);

            andPoints[0] = p1;
            andPoints[1] = p2;
            andPoints[2] = p3;
            andPoints[3] = p4;
            return andPoints;

            ///p1 -  p4
            ///|     |
            ///p2 -  p3


        }

        private void DrawAndroidStyle(PaintEventArgs e)
        {
            e.Graphics.ResetClip();
            float val = 7f;
            Font f = new Font("Microsoft Sans Serif", val);
            contentRectangle = e.ClipRectangle;
            if (!isMouseMoved)
            {
                if (this.ToggleState == ToggleButtonState.ON)
                    padx = this.contentRectangle.Right - (this.contentRectangle.Width / 2);
                else
                    padx = 0;
            }
            using (SolidBrush sb = new SolidBrush(this.BackColor))
            {
                e.Graphics.FillRectangle(sb, e.ClipRectangle);
            }
            e.Graphics.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias;
            Color clr;
            if (padx == 0)
                clr = this.InActiveColor;
            else
                clr = this.ActiveColor;
            using (SolidBrush sb = new SolidBrush(clr))
            {
                e.Graphics.FillPolygon(sb, AndroidPoints());
            }
            if (padx == 0)
            {
                e.Graphics.DrawString(this.InActiveText, f, Brushes.White, new PointF(padx + ((contentRectangle.Width / 2) / 6), contentRectangle.Y + (contentRectangle.Height / 4)));
            }
            else
            {
                e.Graphics.DrawString(this.ActiveText, f, Brushes.White, new PointF(padx + ((contentRectangle.Width / 2) / 4), contentRectangle.Y + (contentRectangle.Height / 4)));
            }
        }

        #endregion
        #region Windows style
        private Rectangle WindowSliderBounds
        {
            get
            {
                Rectangle rect = Rectangle.Empty;
                if (sliderPoint.X > controlBounds.Right - 15)
                    sliderPoint.X = controlBounds.Right - 15;
                if (sliderPoint.X < controlBounds.Left)
                    sliderPoint.X = controlBounds.Left;
                rect = new Rectangle(sliderPoint.X, controlBounds.Y, 15, this.Height);
                return rect;
            }
        }


        /// <summary>
        /// make sure the diff in rect is acceptable
        /// </summary>
        /// <param name="e"></param>
        private void DrawWindowsStyle(PaintEventArgs e)
        {
            contentRectangle = new Rectangle(e.ClipRectangle.X, e.ClipRectangle.Y, this.Width - 1, this.Height - 1);
            if (!isMouseMoved)
            {
                if (this.ToggleState == ToggleButtonState.ON)
                    sliderPoint = new Point(controlBounds.Right - 15, sliderPoint.Y);
                else
                    sliderPoint = new Point(controlBounds.Left, sliderPoint.Y);
            }
            Pen p = new Pen(Color.FromArgb(159, 159, 159));

            p.Width = 1.9f;
            e.Graphics.DrawRectangle(p, contentRectangle);
            e.Graphics.DrawRectangle(p, Rectangle.Inflate(contentRectangle, -3, -3));
            Rectangle r1 = new Rectangle(Rectangle.Inflate(contentRectangle, -3, -3).Left, Rectangle.Inflate(contentRectangle, -3, -3).Y, WindowSliderBounds.Left - Rectangle.Inflate(contentRectangle, -3, -3).Left, Rectangle.Inflate(contentRectangle, -3, -3).Height);
            Rectangle r2 = new Rectangle(WindowSliderBounds.Right, r1.Y, Rectangle.Inflate(contentRectangle, -3, -3).Right - WindowSliderBounds.Right, r1.Height);

            using (SolidBrush sb = new SolidBrush(this.ActiveColor))
            {
                e.Graphics.FillRectangle(sb, r1);
            }
            using (SolidBrush sb = new SolidBrush(this.SliderColor))
            {
                e.Graphics.FillRectangle(sb, WindowSliderBounds);
            }
            using (SolidBrush sb = new SolidBrush(this.InActiveColor))
            {
                e.Graphics.FillRectangle(sb, r2);
            }

            this.BackColor = Color.White;
        }

        #endregion
        #region Switch_Button_Os

        [DefaultEvent("ToggledChanged")]
        class Ce_Switch_Os : Control
        {

            #region Designer

            //|------DO-NOT-REMOVE------|
            //|---------CREDITS---------|

            // Pill class and functions were originally created by Yassine Abbani


            //|---------CREDITS---------|
            //|------DO-NOT-REMOVE------|

            public class PillStyle
            {
                public bool Left;
                public bool Right;
            }

            public GraphicsPath Pill(Rectangle Rectangle, PillStyle PillStyle)
            {
                GraphicsPath functionReturnValue = default(GraphicsPath);
                functionReturnValue = new GraphicsPath();

                if (PillStyle.Left)
                {
                    functionReturnValue.AddArc(new Rectangle(Rectangle.X, Rectangle.Y, Rectangle.Height, Rectangle.Height), -270, 180);
                }
                else
                {
                    functionReturnValue.AddLine(Rectangle.X, Rectangle.Y + Rectangle.Height, Rectangle.X, Rectangle.Y);
                }

                if (PillStyle.Right)
                {
                    functionReturnValue.AddArc(new Rectangle(Rectangle.X + Rectangle.Width - Rectangle.Height, Rectangle.Y, Rectangle.Height, Rectangle.Height), -90, 180);
                }
                else
                {
                    functionReturnValue.AddLine(Rectangle.X + Rectangle.Width, Rectangle.Y, Rectangle.X + Rectangle.Width, Rectangle.Y + Rectangle.Height);
                }

                functionReturnValue.CloseAllFigures();
                return functionReturnValue;
            }

            public object Pill(int X, int Y, int Width, int Height, PillStyle PillStyle)
            {
                return Pill(new Rectangle(X, Y, Width, Height), PillStyle);
            }

            #endregion
            #region Enums

            public enum _Type
            {
                YesNo,
                OnOff,
                IO
            }

            #endregion
            #region Variables

            private Timer AnimationTimer = new Timer { Interval = 1 };
            private int ToggleLocation = 0;
            public event ToggledChangedEventHandler ToggledChanged;
            public delegate void ToggledChangedEventHandler();
            private bool _Toggled;
            private _Type ToggleType;
            private Rectangle Bar;
            private Size cHandle = new Size(15, 20);

            #endregion
            #region Properties

            public bool Toggled
            {
                get { return _Toggled; }
                set
                {
                    _Toggled = value;
                    Invalidate();

                    if (ToggledChanged != null)
                    {
                        ToggledChanged();
                    }
                }
            }

            public _Type Type
            {
                get { return ToggleType; }
                set
                {
                    ToggleType = value;
                    Invalidate();
                }
            }

            #endregion
            #region EventArgs

            protected override void OnResize(EventArgs e)
            {
                base.OnResize(e);
                Width = 41;
                Height = 23;
            }

            protected override void OnMouseUp(System.Windows.Forms.MouseEventArgs e)
            {
                base.OnMouseUp(e);
                Toggled = !Toggled;
            }

            #endregion

            public Ce_Switch_Os()
            {
                SetStyle(ControlStyles.AllPaintingInWmPaint | ControlStyles.DoubleBuffer | ControlStyles.ResizeRedraw | ControlStyles.UserPaint, true);
                AnimationTimer.Tick += new EventHandler(AnimationTimer_Tick);
            }
            protected override void OnHandleCreated(EventArgs e)
            {
                base.OnHandleCreated(e);
                AnimationTimer.Start();
            }

            void AnimationTimer_Tick(object sender, EventArgs e)
            {
                //  Create a slide animation when toggled on/off
                if ((_Toggled == true))
                {
                    if ((ToggleLocation < 100))
                    {
                        ToggleLocation += 10;
                        this.Invalidate(false);
                    }
                }
                else if ((ToggleLocation > 0))
                {
                    ToggleLocation -= 10;
                    this.Invalidate(false);
                }
            }

            protected override void OnPaint(PaintEventArgs e)
            {
                base.OnPaint(e);
                Graphics G = e.Graphics;
                G.Clear(Parent.BackColor);
                checked
                {
                    Point point = new Point(0, (int)Math.Round(unchecked((double)this.Height / 2.0 - (double)this.cHandle.Height / 2.0)));
                    Point arg_A8_0 = point;
                    Point point2 = new Point(0, (int)Math.Round(unchecked((double)this.Height / 2.0 + (double)this.cHandle.Height / 2.0)));
                    LinearGradientBrush Gradient = new LinearGradientBrush(arg_A8_0, point2, Color.FromArgb(250, 250, 250), Color.FromArgb(240, 240, 240));
                    this.Bar = new Rectangle(8, 10, this.Width - 21, this.Height - 21);

                    G.SmoothingMode = SmoothingMode.AntiAlias;
                    G.FillPath(Gradient, (GraphicsPath)this.Pill(0, (int)Math.Round(unchecked((double)this.Height / 2.0 - (double)this.cHandle.Height / 2.0)), this.Width - 1, this.cHandle.Height - 5, new Ce_Switch_Os.PillStyle
                    {
                        Left = true,
                        Right = true
                    }));
                    G.DrawPath(new Pen(Color.FromArgb(177, 177, 176)), (GraphicsPath)this.Pill(0, (int)Math.Round(unchecked((double)this.Height / 2.0 - (double)this.cHandle.Height / 2.0)), this.Width - 1, this.cHandle.Height - 5, new Ce_Switch_Os.PillStyle
                    {
                        Left = true,
                        Right = true
                    }));
                    Gradient.Dispose();
                    switch (this.ToggleType)
                    {
                        case Ce_Switch_Os._Type.YesNo:
                            {
                                bool toggled = this.Toggled;
                                if (toggled)
                                {
                                    G.DrawString("Yes", new Font("Segoe UI", 7f, FontStyle.Regular), Brushes.Gray, (float)(this.Bar.X + 7), (float)this.Bar.Y, new StringFormat
                                    {
                                        Alignment = StringAlignment.Center,
                                        LineAlignment = StringAlignment.Center
                                    });
                                }
                                else
                                {
                                    G.DrawString("No", new Font("Segoe UI", 7f, FontStyle.Regular), Brushes.Gray, (float)(this.Bar.X + 18), (float)this.Bar.Y, new StringFormat
                                    {
                                        Alignment = StringAlignment.Center,
                                        LineAlignment = StringAlignment.Center
                                    });
                                }
                                break;
                            }
                        case Ce_Switch_Os._Type.OnOff:
                            {
                                bool toggled = this.Toggled;
                                if (toggled)
                                {
                                    G.DrawString("On", new Font("Segoe UI", 7f, FontStyle.Regular), Brushes.Gray, (float)(this.Bar.X + 7), (float)this.Bar.Y, new StringFormat
                                    {
                                        Alignment = StringAlignment.Center,
                                        LineAlignment = StringAlignment.Center
                                    });
                                }
                                else
                                {
                                    G.DrawString("Off", new Font("Segoe UI", 7f, FontStyle.Regular), Brushes.Gray, (float)(this.Bar.X + 18), (float)this.Bar.Y, new StringFormat
                                    {
                                        Alignment = StringAlignment.Center,
                                        LineAlignment = StringAlignment.Center
                                    });
                                }
                                break;
                            }
                        case Ce_Switch_Os._Type.IO:
                            {
                                bool toggled = this.Toggled;
                                if (toggled)
                                {
                                    G.DrawString("I", new Font("Segoe UI", 7f, FontStyle.Regular), Brushes.Gray, (float)(this.Bar.X + 7), (float)this.Bar.Y, new StringFormat
                                    {
                                        Alignment = StringAlignment.Center,
                                        LineAlignment = StringAlignment.Center
                                    });
                                }
                                else
                                {
                                    G.DrawString("O", new Font("Segoe UI", 7f, FontStyle.Regular), Brushes.Gray, (float)(this.Bar.X + 18), (float)this.Bar.Y, new StringFormat
                                    {
                                        Alignment = StringAlignment.Center,
                                        LineAlignment = StringAlignment.Center
                                    });
                                }
                                break;
                            }
                    }
                    G.FillEllipse(new SolidBrush(Color.FromArgb(249, 249, 249)), this.Bar.X + (int)Math.Round(unchecked((double)this.Bar.Width * ((double)this.ToggleLocation / 80.0))) - (int)Math.Round((double)this.cHandle.Width / 2.0), this.Bar.Y + (int)Math.Round((double)this.Bar.Height / 2.0) - (int)Math.Round(unchecked((double)this.cHandle.Height / 2.0 - 1.0)), this.cHandle.Width, this.cHandle.Height - 5);
                    G.DrawEllipse(new Pen(Color.FromArgb(177, 177, 176)), this.Bar.X + (int)Math.Round(unchecked((double)this.Bar.Width * ((double)this.ToggleLocation / 80.0) - (double)checked((int)Math.Round((double)this.cHandle.Width / 2.0)))), this.Bar.Y + (int)Math.Round((double)this.Bar.Height / 2.0) - (int)Math.Round(unchecked((double)this.cHandle.Height / 2.0 - 1.0)), this.cHandle.Width, this.cHandle.Height - 5);
                }
            }
        }
        #endregion

        #region IOS Style
        private void DrawIOSStyle(PaintEventArgs e)
        {

            this.BackColor = Color.Transparent;
            e.Graphics.SmoothingMode = SmoothingMode.HighQuality;
            e.Graphics.PixelOffsetMode = PixelOffsetMode.HighQuality;

            Rectangle r = new Rectangle(0, 0, this.Width, this.Height);
            contentRectangle = r;
            if (!isMouseMoved)
            {
                if (this.ToggleState == ToggleButtonState.ON)
                    ipadx = this.contentRectangle.Right - (this.contentRectangle.Height - 3);
                else
                    ipadx = 2;
            }
            Rectangle rect = new Rectangle(ipadx, r.Y, r.Height - 5, r.Height);
            Rectangle r2 = new Rectangle(this.Width / 6 - 10, this.Height / 2, (this.Width / 6 - 10) + (rect.X + rect.Width / 2), this.Height / 2);

            System.Drawing.Drawing2D.GraphicsPath gp = new System.Drawing.Drawing2D.GraphicsPath();
            int d = this.Height;
            gp.AddArc(r.X, r.Y, d, d, 180, 90);
            gp.AddArc(r.X + r.Width - d, r.Y, d, d, 270, 90);
            gp.AddArc(r.X + r.Width - d, r.Y + r.Height - d, d, d, 0, 90);
            gp.AddArc(r.X, r.Y + r.Height - d, d, d, 90, 90);
            this.Region = new Region(gp);
            #region inner Rounded Rectangle

            System.Drawing.Drawing2D.GraphicsPath gp2 = new System.Drawing.Drawing2D.GraphicsPath();
            d = this.Height / 2;
            gp2.AddArc(r2.X, r2.Y, d, d, 180, 90);
            gp2.AddArc(r2.X + r2.Width - d, r2.Y, d, d, 270, 90);
            gp2.AddArc(r2.X + r2.Width - d, r2.Y + r2.Height - d, d, d, 0, 90);
            gp2.AddArc(r2.X, r2.Y + r2.Height - d, d, d, 90, 90);

            #endregion

            if (ipadx < contentRectangle.Width / 2)
                iosSelected = false;
            else if (ipadx == contentRectangle.Right - (contentRectangle.Height - 3) || ipadx > contentRectangle.Width / 2)
                iosSelected = true;


            Rectangle ar1 = new Rectangle(r.X, r.Y, r.X + rect.Right, r.Height);
            Rectangle ar2 = new Rectangle(rect.X + rect.Width / 2, r.Y, (rect.X + rect.Width / 2) + r.Right, r.Height);

            // br3 - inner rect
            LinearGradientBrush br3 = new LinearGradientBrush(ar1, Color.FromArgb(255, 96, 174, 241), Color.FromArgb(255, 96, 174, 241), LinearGradientMode.Vertical);

            //br - outer rect
            LinearGradientBrush br = new LinearGradientBrush(ar1, Color.FromArgb(0, 127, 234), Color.FromArgb(96, 174, 241), LinearGradientMode.Vertical);

            e.Graphics.FillRectangle(br, ar1);

            e.Graphics.FillPath(br3, gp2);


            #region Inactive path

            #region inner Rounded Rectangle

            r2 = new Rectangle((rect.X + rect.Width / 2), this.Height / 2, (((this.Width / 2) + (this.Width / 4)) - (rect.X + rect.Width / 2)) + this.Height / 2, this.Height / 2); //4 * (this.Width / 6) + 20
            gp2 = new System.Drawing.Drawing2D.GraphicsPath();
            d = this.Height / 2;
            gp2.AddArc(r2.X, r2.Y, d, d, 180, 90);
            gp2.AddArc(r2.X + r2.Width - d, r2.Y, d, d, 270, 90);
            gp2.AddArc(r2.X + r2.Width - d, r2.Y + r2.Height - d, d, d, 0, 90);
            gp2.AddArc(r2.X, r2.Y + r2.Height - d, d, d, 90, 90);
            #endregion

            ////br - outer rect
            br3 = new LinearGradientBrush(ar2, Color.FromArgb(238, 238, 238), Color.LightGray, LinearGradientMode.Vertical);

            //br - outer rect
            br = new LinearGradientBrush(ar2, Color.FromArgb(238, 238, 238), Color.Silver, LinearGradientMode.Vertical);

            e.Graphics.FillRectangle(br, ar2);

            e.Graphics.FillPath(br3, gp2);


            #endregion

            if (iosSelected)
                e.Graphics.DrawString(this.ActiveText, Font, Brushes.White, new PointF(r.Width / 4, contentRectangle.Y + (contentRectangle.Height / 4)));
            else
                e.Graphics.DrawString(this.InActiveText, Font, new SolidBrush(Color.FromArgb(123, 123, 123)), new PointF(r.Width / 2, contentRectangle.Y + (contentRectangle.Height / 4)));



            #region Center Ellipse
            Color c = this.Parent != null ? this.Parent.BackColor : Color.White;
            e.Graphics.DrawEllipse(new Pen(Color.LightGray, 2f), rect);
            LinearGradientBrush br2 = new LinearGradientBrush(rect, Color.White, Color.Silver, LinearGradientMode.Vertical);
            e.Graphics.FillEllipse(br2, rect);
            #endregion

            e.Graphics.DrawPath(new Pen(c, 2f), gp);

            e.Graphics.ResetClip();
        }

        protected virtual void FillShape(Graphics g, Object brush, GraphicsPath path)
        {
            if (brush.GetType().ToString() == "System.Drawing.Drawing2D.LinearGradientBrush")
            {
                g.FillPath((LinearGradientBrush)brush, path);
            }
            else if (brush.GetType().ToString() == "System.Drawing.Drawing2D.PathGradientBrush")
            {
                g.FillPath((PathGradientBrush)brush, path);
            }
        }
        #endregion
        #region Custom Style
        int tPadx; RectangleF custInnerRect, staticInnerRect;
        private void DrawCustomStyle(PaintEventArgs e)
        {
            this.BackColor = Color.FromArgb(43, 43, 45);
            e.Graphics.SmoothingMode = SmoothingMode.HighQuality;
            e.Graphics.PixelOffsetMode = PixelOffsetMode.HighQuality;

            Rectangle r = new Rectangle(0, 0, this.Width, this.Height);
            contentRectangle = r;


            #region Parent RoundedRect

            System.Drawing.Drawing2D.GraphicsPath gp = new System.Drawing.Drawing2D.GraphicsPath();
            int d = this.Height;
            gp.AddArc(r.X, r.Y, d, d, 180, 90);
            gp.AddArc(r.X + r.Width - d, r.Y, d, d, 270, 90);
            gp.AddArc(r.X + r.Width - d, r.Y + r.Height - d, d, d, 0, 90);
            gp.AddArc(r.X, r.Y + r.Height - d, d, d, 90, 90);
            this.Region = new Region(gp);

            Color c = this.Parent != null ? this.Parent.BackColor : Color.White;
            e.Graphics.DrawPath(new Pen(c, 2f), gp);

            #endregion

            Point p1 = new Point(r.Width / 4, r.Y);
            Point p2 = new Point(r.X + (r.Width / 4 + r.Width / 2), r.Y);

            #region inner Rounded Rectangle
            Rectangle r2 = new Rectangle(p1.X, this.Height / 2 - (r.Height / 8), p2.X - p1.X, r.Height / 6);

            System.Drawing.Drawing2D.GraphicsPath gp2 = new System.Drawing.Drawing2D.GraphicsPath();
            d = this.Height / 6;
            gp2.AddArc(r2.X, r2.Y, d, d, 180, 90);
            gp2.AddArc(r2.X + r2.Width - d, r2.Y, d, d, 270, 90);
            gp2.AddArc(r2.X + r2.Width - d, r2.Y + r2.Height - d, d, d, 0, 90);
            gp2.AddArc(r2.X, r2.Y + r2.Height - d, d, d, 90, 90);
            RectangleF irp = gp2.GetBounds();
            staticInnerRect = new RectangleF(irp.X, irp.Y, irp.Width, irp.Height);

            if (!isMouseMoved)
            {
                if (this.ToggleState == ToggleButtonState.ON)
                    tPadx = (int)staticInnerRect.Right - 20;
                else
                    tPadx = (int)staticInnerRect.X;
            }

            custInnerRect = new RectangleF(tPadx, irp.Y, irp.Width, irp.Height);
            #endregion

            e.Graphics.DrawPath(new Pen(Color.FromArgb(64, 64, 64), 2f), gp2);
            using (LinearGradientBrush brs = new LinearGradientBrush(gp2.GetBounds(), Color.FromArgb(19, 19, 19), Color.FromArgb(64, 64, 64), LinearGradientMode.Vertical))
            {
                e.Graphics.FillPath(brs, gp2);
                e.Graphics.DrawString(this.InActiveText, Font, Brushes.Gray, new Point(r.X + 10, (int)gp2.GetBounds().Y));
                e.Graphics.DrawString(this.ActiveText, Font, Brushes.Gray, new Point((int)gp2.GetBounds().Right + 10, (int)gp2.GetBounds().Y));
            }

            #region center shape
            Point cp1 = new Point((int)custInnerRect.X + 12, (int)irp.Y - 9);
            Point cp2 = new Point((int)custInnerRect.X - 2, (int)irp.Y);
            Point cp3 = new Point((int)custInnerRect.X + 3, (int)irp.Bottom + 7);
            Point cp4 = new Point((int)custInnerRect.X + 20, (int)irp.Bottom + 7);
            Point cp5 = new Point((int)custInnerRect.X + 24, (int)irp.Y);

            Point[] centerPoints = new Point[] { cp1, cp2, cp3, cp4, cp5 };
            e.Graphics.DrawPolygon(Pens.Black, centerPoints);

            using (LinearGradientBrush brs = new LinearGradientBrush(cp1, cp3, Color.Gray, Color.Black))
            {
                e.Graphics.FillPolygon(brs, centerPoints);
            }

            int x1 = cp3.X + (cp4.X - cp3.X) / 4;
            if (this.ToggleState == ToggleButtonState.OFF)
                e.Graphics.FillEllipse(new SolidBrush(this.InActiveColor), x1, (cp2.Y), 10, 10);
            else
                e.Graphics.FillEllipse(new SolidBrush(this.ActiveColor), x1, (cp2.Y), 10, 10);


            #endregion

        }

        private Point[] GetPolygonPoints(Rectangle r)
        {
            Point[] pts;

            Point p1 = new Point(ipadx, r.Y + (r.Height / 3));
            Point p2 = new Point(p1.X + 40, r.Y);
            Point p4 = new Point(p1.X + 20, r.Bottom);
            Point p3 = new Point(p4.X + 40, r.Height - (r.Height / 3));
            return pts = new Point[] { p1, p2, p3, p4 };
        }

        #endregion
        #region Event Handlers

        bool iosSelected = false;

        bool dblclick = false;



        public event ToggleButtonStateChanged ButtonStateChanged;

        protected void RaiseButtonStateChanged()
        {
            if (this.ButtonStateChanged != null)
                ButtonStateChanged(this, new ToggleButtonStateEventArgs(this.ToggleState));
        }


        public delegate void ToggleButtonStateChanged(object sender, ToggleButtonStateEventArgs e);

        public class ToggleButtonStateEventArgs : EventArgs
        {
            public ToggleButtonStateEventArgs(ToggleButtonState ButtonState)
            {

            }

            //Arguements Can be Included
        }

        protected override void OnClick(EventArgs e)
        {
            base.OnClick(e);
            sliderPoint = downpos;
            dblclick = !dblclick;
            switchrec = !switchrec;
            if (this.ToggleStyle == ToggleButtonStyle.Windows)
            {
                if (WindowSliderBounds.X < (controlBounds.Width / 2))
                {
                    sliderPoint = new Point(controlBounds.Left, sliderPoint.Y);
                    this.ToggleState = ToggleButtonState.OFF;
                }
                else
                {
                    sliderPoint = new Point(controlBounds.Right - 15, sliderPoint.Y);
                    this.ToggleState = ToggleButtonState.ON;

                }
            }
            else if (this.ToggleStyle == ToggleButtonStyle.Android)
            {
                if (downpos.X <= contentRectangle.Width / 4)
                {
                    padx = contentRectangle.Left;
                    this.ToggleState = ToggleButtonState.OFF;
                }
                else
                {
                    padx = contentRectangle.Right - (contentRectangle.Width / 2);
                    this.ToggleState = ToggleButtonState.ON;
                }
            }

            else if (this.ToggleStyle == ToggleButtonStyle.Custom)
            {
                tPadx = downpos.X;
                if (tPadx <= (staticInnerRect.X + staticInnerRect.Width / 2))
                {
                    tPadx = (int)staticInnerRect.X;
                    this.ToggleState = ToggleButtonState.OFF;
                }
                else if (tPadx >= (staticInnerRect.X + staticInnerRect.Width / 2))
                {
                    tPadx = (int)staticInnerRect.Right - 20;
                    this.ToggleState = ToggleButtonState.ON;
                }
            }
            this.Refresh();
        }



        private Rectangle GetRectangle()
        {
            return new Rectangle(2, 2, this.Width - 5, this.Height - 5); ;
        }

        bool isMouseDown = false; Point downpos = Point.Empty;
        protected override void OnMouseDown(MouseEventArgs e)
        {
            base.OnMouseDown(e);
            if (!this.DesignMode)
            {
                isMouseDown = true;
                downpos = e.Location;
            }
            this.Invalidate();
        }
        protected override void OnKeyDown(KeyEventArgs e)
        {
            base.OnKeyDown(e);
            if (e.KeyCode == Keys.Space)
            {
                if (this.ToggleState == ToggleButtonState.ON)
                    this.ToggleState = ToggleButtonState.OFF;
                else
                    this.ToggleState = ToggleButtonState.ON;
            }
        }
        bool isMouseMoved = false; Point sliderPoint = Point.Empty; int padx = 0; int ipadx = 2;
        protected override void OnMouseMove(MouseEventArgs e)
        {
            base.OnMouseMove(e);
            if (e.Button == MouseButtons.Left && !this.DesignMode)
            {
                sliderPoint = e.Location;
                isMouseMoved = true;
                if (this.ToggleStyle == ToggleButtonStyle.Android)
                {

                    padx = e.X;
                    if (padx <= contentRectangle.Left + SlidingAngle)
                    {
                        padx = contentRectangle.Left;
                        this.ToggleState = ToggleButtonState.OFF;
                    }

                    if (padx >= contentRectangle.Right - (contentRectangle.Width / 2))
                    {
                        padx = contentRectangle.Right - (contentRectangle.Width / 2);
                        this.ToggleState = ToggleButtonState.ON;
                    }
                }

                else if (this.ToggleStyle == ToggleButtonStyle.Custom)
                {
                    tPadx = e.X;
                    if (tPadx <= staticInnerRect.X)
                    {
                        tPadx = (int)staticInnerRect.X;
                        this.ToggleState = ToggleButtonState.OFF;
                    }

                    if (tPadx >= staticInnerRect.Right - 20)
                    {
                        tPadx = (int)staticInnerRect.Right - 20;
                        this.ToggleState = ToggleButtonState.ON;
                    }
                }
                Refresh();
            }
        }
        bool switchrec = false;
        protected override void OnMouseUp(MouseEventArgs e)
        {
            base.OnMouseUp(e);
            if (!this.DesignMode)
            {
                this.Invalidate();
                if (isMouseMoved)
                {
                    if (this.ToggleStyle == ToggleButtonStyle.Windows)
                    {
                        sliderPoint = e.Location;

                        if (WindowSliderBounds.X < (controlBounds.Width / 2))
                        {
                            sliderPoint = new Point(controlBounds.Left, sliderPoint.Y);
                            this.ToggleState = ToggleButtonState.OFF;
                        }
                        else
                        {
                            sliderPoint = new Point(controlBounds.Right - 15, sliderPoint.Y);
                            this.ToggleState = ToggleButtonState.ON;

                        }
                    }
                    else if (this.ToggleStyle == ToggleButtonStyle.Android)
                    {
                        padx = e.Location.X;
                        if (padx < contentRectangle.Width / 4)
                        {
                            padx = contentRectangle.Left;
                            this.ToggleState = ToggleButtonState.OFF;
                        }
                        else
                        {
                            padx = contentRectangle.Right - (contentRectangle.Width / 2);
                            this.ToggleState = ToggleButtonState.ON;
                        }
                    }

                    else if (this.ToggleStyle == ToggleButtonStyle.Custom)
                    {
                        tPadx = e.Location.X;
                        if (tPadx <= (staticInnerRect.X + staticInnerRect.Width / 2))
                        {
                            tPadx = (int)staticInnerRect.X;//
                            this.ToggleState = ToggleButtonState.OFF;
                        }
                        else if (tPadx >= (staticInnerRect.X + staticInnerRect.Width / 2))
                        {
                            tPadx = (int)staticInnerRect.Right - 20;
                            this.ToggleState = ToggleButtonState.ON;
                        }
                    }
                    Invalidate();
                    Update();

                }

                isMouseMoved = false;
                isMouseDown = false;
            }
        }
        #endregion
        #region properties
        private string activeText = "ON";
        public string ActiveText
        {
            get
            {
                return activeText;
            }
            set
            {
                activeText = value;
            }
        }

        private string inActiveText = "OFF";
        public string InActiveText
        {
            get
            {
                return inActiveText;
            }
            set
            {
                inActiveText = value;
            }
        }

        private int slidingAngle = 5;
        public int SlidingAngle
        {
            get
            {
                return slidingAngle;
            }
            set
            {
                slidingAngle = value;
                this.Refresh();
            }
        }


        private Color activeColor = Color.FromArgb(27, 161, 226);
        public Color ActiveColor
        {
            get
            {
                return activeColor;
            }
            set
            {
                activeColor = value;
                this.Refresh();
            }
        }

        private Color sliderColor = Color.Black;
        public Color SliderColor
        {
            get
            {
                return sliderColor;
            }
            set
            {
                sliderColor = value;
                this.Refresh();
            }
        }
        private Color textColor = Color.White;
        public Color TextColor
        {
            get
            {
                return textColor;
            }
            set
            {
                textColor = value;
                this.Refresh();
            }
        }
        private Color inActiveColor = Color.FromArgb(70, 70, 70);
        public Color InActiveColor
        {
            get
            {
                return inActiveColor;
            }
            set
            {
                inActiveColor = value;
                this.Refresh();
            }
        }

        private ToggleButtonStyle toggleStyle = ToggleButtonStyle.Android;
        public ToggleButtonStyle ToggleStyle
        {
            get
            {
                return toggleStyle;
            }
            set
            {
                toggleStyle = value;
                justRefresh = false;
                switch (value)
                {
                    case ToggleButtonStyle.Android:
                        this.Region = new Region(new Rectangle(0, 0, this.Width, this.Height));
                        this.BackColor = Color.FromArgb(32, 32, 32);
                        this.InActiveColor = Color.FromArgb(70, 70, 70);
                        this.SlidingAngle = 8;
                        break;
                    case ToggleButtonStyle.IOS:
                        this.InActiveColor = Color.WhiteSmoke;
                        break;
                }

                Invalidate(true);
                Update();
                this.Refresh();
            }

        }

        private ToggleButtonState toggleState = ToggleButtonState.OFF;
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Visible)]
        public ToggleButtonState ToggleState
        {
            get
            {
                return toggleState;
            }
            set
            {
                if (toggleState != value)
                {
                    RaiseButtonStateChanged();
                    toggleState = value;
                    Invalidate();
                    this.Refresh();
                }
            }

        }

        private void RefreshToggleState(ToggleButtonState state)
        {
            this.ToggleState = state;
            justRefresh = true;
        }
        public enum ToggleButtonState
        {
            ON,
            OFF
        }


        public enum ToggleButtonStyle
        {
            Android,
            Windows,
            IOS,
            Custom,
        }
        #endregion
        #region Other
        public static FileInfo FindApplicationFile(string fileName)
        {
            string startPath = Path.Combine(Application.StartupPath, fileName);
            FileInfo file = new FileInfo(startPath);
            while (!file.Exists)
            {
                if (file.Directory.Parent == null)
                {
                    return null;
                }
                DirectoryInfo parentDir = file.Directory.Parent;
                file = new FileInfo(Path.Combine(parentDir.FullName, file.Name));
            }
            return file;
        }

        #endregion
            }
#endregion
        #region StarRatingStrip
        class Ce_StarRatingStrip : Control
        {
            public enum StarType { Normal, Fat, Detailed };
            private StarType _starType = StarType.Fat;
            private BufferedGraphics _bufGraphics;
            private readonly BufferedGraphicsContext _bufContext = BufferedGraphicsManager.Current;
            private Pen _starStroke = new Pen(Color.Gold, 3f);
            private Pen _starDullStroke = new Pen(Color.Gray, 3f);
            private SolidBrush _starBrush = new SolidBrush(Color.Yellow);
            private SolidBrush _starDullBrush = new SolidBrush(Color.Silver);
            private int _starCount = 5;
            private int _starSpacing = 1;
            private int _starWidth = 25;
            private float _mouseOverIndex = -1;
            private float _rating;
            private bool _allowHalfStarRating, _settingRating;

            [Description("Occurs when a different number of stars are illuminated (does not include mouseleave un-ilum)")]
            public event EventHandler StarsPanned;
            [Description("Occurs when the star rating of the strip has changed (Typically by a click operation)")]
            public event EventHandler RatingChanged;

            public Ce_StarRatingStrip()
            {
                this.SetStyle(ControlStyles.AllPaintingInWmPaint | ControlStyles.UserPaint |
                    ControlStyles.ResizeRedraw | ControlStyles.OptimizedDoubleBuffer, true);

                SetPenBrushDefaults();
                this.Size = new Size(200, 100);
                UpdateGraphicsBuffer();
            }

            /// <summary>
            /// Rounds precise numbers to a number no more precise than .5
            /// </summary>
            private static float RoundToNearestHalf(float f)
            {
                return (float)Math.Round(f / 5.0, 1) * 5f;
            }

            private void DrawDullStars()
            {
                float height = this.Height - _starStroke.Width;
                float lastX = _starStroke.Width / 2f; // Start off at stroke size and increment
                float width = (this.Width - TotalSpacing - TotalStrokeWidth) / (float)_starCount;

                // Draw stars
                for (int i = 0; i < _starCount; i++)
                {
                    RectangleF rect = new RectangleF(lastX, _starStroke.Width / 2f, width, height);
                    PointF[] polygon = GetStarPolygon(rect);
                    _bufGraphics.Graphics.FillPolygon(_starDullBrush, polygon);
                    _bufGraphics.Graphics.DrawPolygon(_starDullStroke, polygon);
                    lastX += _starWidth + _starSpacing + _starStroke.Width;
                    _bufGraphics.Graphics.PixelOffsetMode = PixelOffsetMode.HighQuality;
                    _bufGraphics.Graphics.FillPolygon(_starDullBrush, polygon);
                    _bufGraphics.Graphics.DrawPolygon(_starDullStroke, polygon);
                    _bufGraphics.Graphics.PixelOffsetMode = PixelOffsetMode.Default;
                }
            }

            private void DrawIllumStars()
            {
                float height = this.Height - _starStroke.Width;
                float lastX = _starStroke.Width / 2f; // Start off at stroke size and increment
                float width = (this.Width - TotalSpacing - TotalStrokeWidth) / _starCount;

                if (_allowHalfStarRating)
                {
                    // Draw stars
                    for (int i = 0; i < _starCount; i++)
                    {
                        RectangleF rect = new RectangleF(lastX, _starStroke.Width / 2f, width, height);

                        if (i < _mouseOverIndex - 0.5f)
                        {
                            PointF[] polygon = GetStarPolygon(rect);
                            _bufGraphics.Graphics.FillPolygon(_starBrush, polygon);
                            _bufGraphics.Graphics.DrawPolygon(_starStroke, polygon);
                        }
                        else if (i == _mouseOverIndex - 0.5f)
                        {
                            PointF[] polygon = GetSemiStarPolygon(rect);
                            _bufGraphics.Graphics.FillPolygon(_starBrush, polygon);
                            _bufGraphics.Graphics.DrawPolygon(_starStroke, polygon);
                        }
                        else
                        {
                            break;
                        }

                        lastX += _starWidth + _starSpacing + _starStroke.Width;
                    }
                }
                else
                {
                    // Draw stars
                    for (int i = 0; i < _starCount; i++)
                    {
                        RectangleF rect = new RectangleF(lastX, _starStroke.Width / 2f, width, height);
                        PointF[] polygon = GetStarPolygon(rect);

                        if (i <= _mouseOverIndex)
                        {
                            _bufGraphics.Graphics.FillPolygon(_starBrush, polygon);
                            _bufGraphics.Graphics.DrawPolygon(_starStroke, polygon);
                        }
                        else
                        {
                            break;
                        }

                        lastX += _starWidth + _starSpacing + _starStroke.Width;
                    }
                }
            }

            private PointF[] GetStarPolygon(RectangleF rect)
            {
                switch (_starType)
                {
                    case StarType.Normal: return GetNormalStar(rect);
                    case StarType.Fat: return GetFatStar(rect);
                    case StarType.Detailed: return GetDetailedStar(rect);
                    default: return null;
                }
            }

            private PointF[] GetSemiStarPolygon(RectangleF rect)
            {
                switch (_starType)
                {
                    case StarType.Normal: return GetNormalSemiStar(rect);
                    case StarType.Fat: return GetFatSemiStar(rect);
                    case StarType.Detailed: return GetDetailedSemiStar(rect);
                    default: return null;
                }
            }

            private float GetHoveredStarIndex(Point pos)
            {
                if (_allowHalfStarRating)
                {
                    float widthSection = this.Width / (float)_starCount / 2f;

                    for (float i = 0f; i < _starCount; i += 0.5f)
                    {
                        float starX = i * widthSection * 2f;

                        // If cursor is within the x region of the iterated star
                        if (pos.X >= starX && pos.X <= starX + widthSection)
                        {
                            return i + 0.5f;
                        }
                    }

                    return -1;
                }
                else
                {
                    int widthSection = (int)(this.Width / (double)_starCount + 0.5);

                    for (int i = 0; i < _starCount; i++)
                    {
                        float starX = i * widthSection;

                        // If cursor is within the x region of the iterated star
                        if (pos.X >= starX && pos.X <= starX + widthSection)
                        {
                            return i;
                        }
                    }
                }

                return -1;
            }

            protected override void OnMouseMove(MouseEventArgs e)
            {
                base.OnMouseMove(e);
                if (_rating > 0) return;
                float index = GetHoveredStarIndex(e.Location);

                if (index != _mouseOverIndex)
                {
                    _mouseOverIndex = index;
                    OnStarsPanned();
                    this.Invalidate();
                }
            }

            protected override void OnMouseClick(MouseEventArgs e)
            {
                base.OnMouseClick(e);

                if (_rating == 0f)
                {
                    _settingRating = true;
                    Rating = (_allowHalfStarRating) ? _mouseOverIndex : _mouseOverIndex + 1f;
                    _settingRating = false;
                    this.Invalidate();
                }
            }

            protected override void OnMouseLeave(EventArgs e)
            {
                base.OnMouseLeave(e);
                if (_rating > 0) return;
                _mouseOverIndex = -1; // No stars will be highlighted
                this.Invalidate();
            }

            protected override void OnSizeChanged(EventArgs e)
            {
                UpdateSize();
                UpdateGraphicsBuffer();
            }

            protected override void OnPaint(PaintEventArgs e)
            {
                _bufGraphics.Graphics.Clear(this.BackColor);
                DrawDullStars();
                DrawIllumStars();
                _bufGraphics.Render(e.Graphics);
            }

            private void UpdateSize()
            {
                int height = (int)(_starWidth + _starStroke.Width + 0.5);
                int width = (int)(TotalStarWidth + TotalSpacing + TotalStrokeWidth + 0.5);
                this.Size = new Size(width, height);
            }

            private void UpdateGraphicsBuffer()
            {
                if (this.Width > 0 && this.Height > 0)
                {
                    _bufContext.MaximumBuffer = new Size(this.Width + 1, this.Height + 1);
                    _bufGraphics = _bufContext.Allocate(this.CreateGraphics(), this.ClientRectangle);
                    _bufGraphics.Graphics.SmoothingMode = SmoothingMode.AntiAlias;
                }
            }

            private void SetPenBrushDefaults()
            {
                _starStroke.LineJoin = LineJoin.Round;
                _starStroke.Alignment = PenAlignment.Outset;
                _starDullStroke.LineJoin = LineJoin.Round;
                _starDullStroke.Alignment = PenAlignment.Outset;
            }

            protected virtual void OnStarsPanned()
            {
                if (StarsPanned != null)
                {
                    StarsPanned(this, EventArgs.Empty);
                }
            }

            protected virtual void OnRatingChanged()
            {
                if (RatingChanged != null)
                {
                    RatingChanged(this, EventArgs.Empty);
                }
            }

            #region Properties
            [Browsable(false)]
            public SolidBrush StarBrush
            {
                get { return _starBrush; }
                set { _starBrush = value; }
            }

            [Browsable(false)]
            public SolidBrush StarDullBrush
            {
                get { return _starDullBrush; }
                set { _starDullBrush = value; }
            }

            [Browsable(false)]
            public Pen StarStroke
            {
                get { return _starStroke; }
                set { _starStroke = value; }
            }

            [Browsable(false)]
            public Pen StarDullStroke
            {
                get { return _starDullStroke; }
                set { _starDullStroke = value; }
            }

            [Browsable(false)]
            public float MouseOverStarIndex
            {
                get { return _mouseOverIndex; }
            }

            /// <summary>
            /// Gets all of the spacing between the stars
            /// </summary>
            private int TotalSpacing
            {
                get { return (_starCount - 1) * _starSpacing; }
            }

            /// <summary>
            /// Gets the sum of the width of the stroke for each star
            /// </summary>
            private float TotalStrokeWidth
            {
                get { return _starCount * _starStroke.Width; }
            }

            /// <summary>
            /// Gets the sum of all star widths
            /// </summary>
            private int TotalStarWidth
            {
                get { return _starCount * _starWidth; }
            }

            [Description("The color to use for the star when they are illuminated")]
            [Category("Appearance")]
            [DefaultValue(typeof(Color), "Yellow")]
            public Color StarColor
            {
                get { return _starBrush.Color; }
                set
                {
                    _starBrush.Color = value;
                    this.Invalidate();
                }
            }

            [Description("The color to use for the star borders when they are illuminated")]
            [Category("Appearance")]
            [DefaultValue(typeof(Color), "Gold")]
            public Color StarBorderColor
            {
                get { return _starStroke.Color; }
                set
                {
                    _starStroke.Color = value;
                    this.Invalidate();
                }
            }

            [Description("The color to use for the stars when they are not illuminated")]
            [Category("Appearance")]
            [DefaultValue(typeof(Color), "Silver")]
            public Color StarDullColor
            {
                get { return _starDullBrush.Color; }
                set
                {
                    _starDullBrush.Color = value;
                    this.Invalidate();
                }
            }

            [Description("The color to use for the star borders when they are not illuminated")]
            [Category("Appearance")]
            [DefaultValue(typeof(Color), "Gray")]
            public Color StarDullBorderColor
            {
                get { return _starDullStroke.Color; }
                set
                {
                    _starDullStroke.Color = value;
                    this.Invalidate();
                }
            }

            [Description("The amount of space between each star")]
            [Category("Layout")]
            [DefaultValue(1)]
            public int StarSpacing
            {
                get { return _starSpacing; }
                set
                {
                    _starSpacing = _starSpacing < 0 ? 0 : value;
                    UpdateSize();
                    this.Invalidate();
                }
            }

            [Description("The width and height of the star in pixels (not including the border)")]
            [Category("Layout")]
            [DefaultValue(25)]
            public int StarWidth
            {
                get { return _starWidth; }
                set
                {
                    _starWidth = _starWidth < 1 ? 1 : value;
                    UpdateSize();
                    this.Invalidate();
                }
            }

            [Description("The number of stars selected (Note: 0 is considered un-rated")]
            [DefaultValue(0f)]
            public float Rating
            {
                get { return _rating; }
                set
                {
                    if (value > _starCount) value = _starCount; // bounds check
                    else if (value < 0) value = 0;
                    else
                    {
                        // Rounding to whole number or near .5 appropriately
                        if (_allowHalfStarRating) value = RoundToNearestHalf(value);
                        else value = (int)(value + 0.5f);
                    }

                    bool changed = value != _rating;
                    _rating = value;

                    if (changed)
                    {
                        if (!_settingRating)
                        {
                            _mouseOverIndex = _rating;
                            if (!_allowHalfStarRating) _mouseOverIndex -= 1f;
                        }

                        OnRatingChanged();
                        this.Invalidate();
                    }
                }
            }

            [Description("The number of stars to display")]
            [Category("Appearance")]
            [DefaultValue(5)]
            public int StarCount
            {
                get { return _starCount; }
                set
                {
                    bool changed = _starCount != value;
                    _starCount = value;

                    if (changed)
                    {
                        UpdateSize();
                        this.Invalidate();
                    }
                }
            }

            /// <summary>
            /// Gets or sets the preset appearance of the star
            /// </summary>
            [Description("The star style to use")]
            [Category("Appearance")]
            [DefaultValue(StarType.Fat)]
            public StarType TypeOfStar
            {
                get { return _starType; }
                set
                {
                    _starType = value;
                    this.Invalidate();
                }
            }

            /// <summary>
            /// Gets or sets the width of the border around the star (including the dull version)
            /// </summary>
            [Description("The width of the star border")]
            [Category("Appearance")]
            [DefaultValue(3f)]
            public float StarBorderWidth
            {
                get { return _starStroke.Width; }
                set
                {
                    _starStroke.Width = value;
                    _starDullStroke.Width = value;
                    UpdateSize();
                    this.Invalidate();
                }
            }

            [Description("Determines whether the user can rate with a half a star of specificity")]
            [Category("Behavior")]
            [DefaultValue(false)]
            public bool AllowHalfStarRating
            {
                get { return _allowHalfStarRating; }
                set
                {
                    bool disabled = (!value && _allowHalfStarRating);
                    _allowHalfStarRating = value;

                    if (disabled) // Only set rating if half star was enabled and now disabled
                    {
                        Rating = (int)(Rating + 0.5);
                    }
                }
            }
            #endregion

            #region Polygon Definitions
            /// <summary>
            /// Gets a typical thin star polygon as a point[]
            /// </summary>
            private static PointF[] GetNormalStar(RectangleF rect)
            {
                return new[]
            {
                new PointF(rect.X + rect.Width * 0.5f, rect.Y + rect.Height * 0f), 
                new PointF(rect.X + rect.Width * 0.38f, rect.Y + rect.Height * 0.38f), 
                new PointF(rect.X + rect.Width * 0f, rect.Y + rect.Height * 0.38f), 
                new PointF(rect.X + rect.Width * 0.31f, rect.Y + rect.Height * 0.61f), 
                new PointF(rect.X + rect.Width * 0.19f, rect.Y + rect.Height * 1f), 
                new PointF(rect.X + rect.Width * 0.5f, rect.Y + rect.Height * 0.77f), 
                new PointF(rect.X + rect.Width * 0.8f, rect.Y + rect.Height * 1f), 
                new PointF(rect.X + rect.Width * 0.69f, rect.Y + rect.Height * 0.61f), 
                new PointF(rect.X + rect.Width * 1f, rect.Y + rect.Height * 0.38f), 
                new PointF(rect.X + rect.Width * 0.61f, rect.Y + rect.Height * 0.38f)
             };
            }

            /// <summary>
            /// Gets half of a typical thin star polygon as a point[]
            /// </summary>
            private static PointF[] GetNormalSemiStar(RectangleF rect)
            {
                return new[]
            {
                new PointF(rect.X + rect.Width * 0.5f, rect.Y + rect.Height * 0f), 
                new PointF(rect.X + rect.Width * 0.38f, rect.Y + rect.Height * 0.38f), 
                new PointF(rect.X + rect.Width * 0f, rect.Y + rect.Height * 0.38f), 
                new PointF(rect.X + rect.Width * 0.31f, rect.Y + rect.Height * 0.61f), 
                new PointF(rect.X + rect.Width * 0.19f, rect.Y + rect.Height * 1f), 
                new PointF(rect.X + rect.Width * 0.5f, rect.Y + rect.Height * 0.77f), 
             };
            }

            /// <summary>
            /// Gets a fat star polygon as a point[]
            /// </summary>
            private static PointF[] GetFatStar(RectangleF rect)
            {
                return new[]
            {
                new PointF(rect.X + rect.Width * 0.31f, rect.Y + rect.Height * 0.33f), 
                new PointF(rect.X + rect.Width * 0f, rect.Y + rect.Height * 0.37f), 
                new PointF(rect.X + rect.Width * 0.25f, rect.Y + rect.Height * 0.62f), 
                new PointF(rect.X + rect.Width * 0.19f, rect.Y + rect.Height * 1f), 
                new PointF(rect.X + rect.Width * 0.5f, rect.Y + rect.Height * 0.81f), 
                new PointF(rect.X + rect.Width * 0.81f, rect.Y + rect.Height * 1f), 
                new PointF(rect.X + rect.Width * 0.75f, rect.Y + rect.Height * 0.62f), 
                new PointF(rect.X + rect.Width * 1f, rect.Y + rect.Height * 0.37f), 
                new PointF(rect.X + rect.Width * 0.69f, rect.Y + rect.Height * 0.33f), 
                new PointF(rect.X + rect.Width * 0.5f, rect.Y + rect.Height * 0f)
            };
            }

            /// <summary>
            /// Gets half of a fat star polygon as a point[]
            /// </summary>
            private static PointF[] GetFatSemiStar(RectangleF rect)
            {
                return new[]
            {
                new PointF(rect.X + rect.Width * 0.31f, rect.Y + rect.Height * 0.33f), 
                new PointF(rect.X + rect.Width * 0f, rect.Y + rect.Height * 0.37f), 
                new PointF(rect.X + rect.Width * 0.25f, rect.Y + rect.Height * 0.62f), 
                new PointF(rect.X + rect.Width * 0.19f, rect.Y + rect.Height * 1f), 
                new PointF(rect.X + rect.Width * 0.5f, rect.Y + rect.Height * 0.81f), 
                new PointF(rect.X + rect.Width * 0.5f, rect.Y + rect.Height * 0f)
            };
            }

            /// <summary>
            /// Gets a detailed star polygon as a point[]
            /// </summary>
            private static PointF[] GetDetailedStar(RectangleF rect)
            {
                return new[]
            {
                new PointF(rect.X + rect.Width * 0.5f, rect.Y + rect.Height * 0f), 
                new PointF(rect.X + rect.Width * 0.6f, rect.Y + rect.Height * 0.27f), 
                new PointF(rect.X + rect.Width * 0.83f, rect.Y + rect.Height * 0.17f), 
                new PointF(rect.X + rect.Width * 0.73f, rect.Y + rect.Height * 0.4f), 
                new PointF(rect.X + rect.Width * 1f, rect.Y + rect.Height * 0.5f), 
                new PointF(rect.X + rect.Width * 0.73f, rect.Y + rect.Height * 0.6f), 
                new PointF(rect.X + rect.Width * 0.83f, rect.Y + rect.Height * 0.83f), 
                new PointF(rect.X + rect.Width * 0.6f, rect.Y + rect.Height * 0.73f), 
                new PointF(rect.X + rect.Width * 0.5f, rect.Y + rect.Height * 1f), 
                new PointF(rect.X + rect.Width * 0.4f, rect.Y + rect.Height * 0.73f), 
                new PointF(rect.X + rect.Width * 0.17f, rect.Y + rect.Height * 0.83f), 
                new PointF(rect.X + rect.Width * 0.27f, rect.Y + rect.Height * 0.6f), 
                new PointF(rect.X + rect.Width * 0f, rect.Y + rect.Height * 0.5f), 
                new PointF(rect.X + rect.Width * 0.27f, rect.Y + rect.Height * 0.4f), 
                new PointF(rect.X + rect.Width * 0.17f, rect.Y + rect.Height * 0.17f), 
                new PointF(rect.X + rect.Width * 0.4f, rect.Y + rect.Height * 0.27f)
            };
            }

            /// <summary>
            /// Gets half of the detailed star polygon as a point[]
            /// </summary>
            private static PointF[] GetDetailedSemiStar(RectangleF rect)
            {
                return new[]
            {
                new PointF(rect.X + rect.Width * 0.5f, rect.Y + rect.Height * 0f), 
                new PointF(rect.X + rect.Width * 0.5f, rect.Y + rect.Height * 1f), 
                new PointF(rect.X + rect.Width * 0.4f, rect.Y + rect.Height * 0.73f), 
                new PointF(rect.X + rect.Width * 0.17f, rect.Y + rect.Height * 0.83f), 
                new PointF(rect.X + rect.Width * 0.27f, rect.Y + rect.Height * 0.6f), 
                new PointF(rect.X + rect.Width * 0f, rect.Y + rect.Height * 0.5f), 
                new PointF(rect.X + rect.Width * 0.27f, rect.Y + rect.Height * 0.4f), 
                new PointF(rect.X + rect.Width * 0.17f, rect.Y + rect.Height * 0.17f), 
                new PointF(rect.X + rect.Width * 0.4f, rect.Y + rect.Height * 0.27f)
            };
            }
            #endregion
        }
#endregion
        #region  Social Button

        public class Ce_SocialButton : Control
        {

            #region  Variables

            private Image _Image;
            private Size _ImageSize;
            private Color EllipseColor; // VBConversions Note: Initial value cannot be assigned here since it is non-static.  Assignment has been moved to the class constructors.

            #endregion
            #region  Properties

            public Image Image
            {
                get
                {
                    return _Image;
                }
                set
                {
                    if (value == null)
                    {
                        _ImageSize = Size.Empty;
                    }
                    else
                    {
                        _ImageSize = value.Size;
                    }

                    _Image = value;
                    Invalidate();
                }
            }

            protected Size ImageSize
            {
                get
                {
                    return _ImageSize;
                }
            }

            #endregion
            #region  EventArgs

            protected override void OnResize(EventArgs e)
            {
                base.OnResize(e);
                this.Size = new Size(54, 54);
            }

            protected override void OnMouseEnter(EventArgs e)
            {
                base.OnMouseEnter(e);
                EllipseColor = Color.FromArgb(181, 41, 42);
                Refresh();
            }
            protected override void OnMouseLeave(EventArgs e)
            {
                base.OnMouseLeave(e);
                EllipseColor = Color.FromArgb(66, 76, 85);
                Refresh();
            }

            protected override void OnMouseDown(MouseEventArgs e)
            {
                base.OnMouseDown(e);
                EllipseColor = Color.FromArgb(153, 34, 34);
                Focus();
                Refresh();
            }
            protected override void OnMouseUp(MouseEventArgs e)
            {
                base.OnMouseUp(e);
                EllipseColor = Color.FromArgb(181, 41, 42);
                Refresh();
            }

            #endregion
            #region  Image Designer

            private static PointF ImageLocation(StringFormat SF, SizeF Area, SizeF ImageArea)
            {
                PointF MyPoint = new PointF();
                switch (SF.Alignment)
                {
                    case StringAlignment.Center:
                        MyPoint.X = (float)((Area.Width - ImageArea.Width) / 2);
                        break;
                }

                switch (SF.LineAlignment)
                {
                    case StringAlignment.Center:
                        MyPoint.Y = (float)((Area.Height - ImageArea.Height) / 2);
                        break;
                }
                return MyPoint;
            }

            private StringFormat GetStringFormat(ContentAlignment _ContentAlignment)
            {
                StringFormat SF = new StringFormat();
                switch (_ContentAlignment)
                {
                    case ContentAlignment.MiddleCenter:
                        SF.LineAlignment = StringAlignment.Center;
                        SF.Alignment = StringAlignment.Center;
                        break;
                }
                return SF;
            }

            #endregion

            public Ce_SocialButton()
            {
                DoubleBuffered = true;
                EllipseColor = Color.FromArgb(66, 76, 85);
            }

            protected override void OnPaint(System.Windows.Forms.PaintEventArgs e)
            {
                Graphics G = e.Graphics;
                G.Clear(Parent.BackColor);
                G.SmoothingMode = SmoothingMode.HighQuality;

                PointF ImgPoint = ImageLocation(GetStringFormat(ContentAlignment.MiddleCenter), Size, ImageSize);
                G.FillEllipse(new SolidBrush(EllipseColor), new Rectangle(0, 0, 53, 53));

                // HINTS:
                // The best size for the drawn image is 32x32\
                // The best matching color of drawn image is (RGB: 31, 40, 49)
                if (Image != null)
                {
                    G.DrawImage(_Image, (int)ImgPoint.X, (int)ImgPoint.Y, ImageSize.Width, ImageSize.Height);
                }
            }
        }

        #endregion
        #region Radio Button
        // I use the term "Button" to refer to the drawn image that indicates the controls checked state

        /// <summary>
        /// Represents a checkbox like control to be used in a set, to provide multiple options
        /// </summary>
        [DefaultEvent("ChangedChanged")]

        class RadioButton : BackbufferedControl
        {
            #region Fields
            private bool _containsCursor;
            private const int _TEXT_VERT_PAD = 5; // Value is used when determining the best auto-size
            private const int _TEXT_HORIZ_PAD = 4;
            private const int _BUTTON_LEFT_PAD = 2;
            private const int _BUTTON_DIM = 15; // The width and height of the small glyph on the left
            /// <summary>
            /// The Brush used for the outer portion of the button
            /// </summary>
            private readonly SolidBrush _outerRingBrush = new SolidBrush(Color.FromArgb(200, 200, 200));
            /// <summary>
            /// The Brush used for the outer portion of the button
            /// </summary>
            private readonly SolidBrush _outerRingHoverBrush = new SolidBrush(Color.FromArgb(138, 172, 184));
            /// <summary>
            /// The brush used for the inner portion of the button when the button is checked
            /// </summary>
            private readonly SolidBrush _checkedBrush = new SolidBrush(Color.FromArgb(0, 122, 204));
            /// <summary>
            /// The brush used for the inner portion of the button when the button is checked
            /// </summary>
            private readonly SolidBrush _uncheckedBrush = new SolidBrush(Color.Silver);
            #endregion

            [Description("Occurs when the value of the Checked property has changed")]
            public event EventHandler ChangedChanged;

            public RadioButton()
            {
                base.SetStyle(ControlStyles.SupportsTransparentBackColor, true);
                UncheckOthers = true;
                base.Font = new Font("Segoe UI", 9f);
                base.BackColor = Color.Transparent;
                base.ForeColor = Color.White;
            }

            protected override void OnTextChanged(EventArgs e)
            {
                base.OnTextChanged(e);
                AutoAdjustSize();
            }

            #region Overrides
            protected override void OnMouseEnter(EventArgs e)
            {
                base.OnMouseEnter(e);
                _containsCursor = true;
                this.Invalidate();
            }

            protected override void OnMouseLeave(EventArgs e)
            {
                base.OnMouseLeave(e);
                _containsCursor = false;
                this.Invalidate();
            }

            protected override void OnClick(EventArgs e)
            {
                base.OnClick(e);
                Checked = true;
            }

            protected override void OnBackBufferUpdated()
            {
                BackBuffer.Graphics.SmoothingMode = SmoothingMode.AntiAlias;
                BackBuffer.Graphics.PixelOffsetMode = PixelOffsetMode.HighQuality;
            }

            protected override void Render()
            {
                // Draw outer ring 
                float y = this.Height / 2f - _BUTTON_DIM / 2f;
                var rect = new RectangleF(_BUTTON_LEFT_PAD, y, _BUTTON_DIM, _BUTTON_DIM);
                var ringBrush = _containsCursor ? _outerRingHoverBrush : _outerRingBrush;
                BackBuffer.Graphics.FillEllipse(ringBrush, rect);
                // Draw center
                rect.Inflate(-3, -3);
                BackBuffer.Graphics.FillEllipse(ButtonForeBrush, rect);
                // Draw text
                const float BTN_MARGIN_WIDTH = _BUTTON_LEFT_PAD + _TEXT_HORIZ_PAD + _BUTTON_DIM;
                float x = BTN_MARGIN_WIDTH;
                y = this.Height / 2f - TextSize.Height / 2f;
                var foreBrush = new SolidBrush(this.ForeColor);
                BackBuffer.Graphics.DrawString(this.Text, this.Font, foreBrush, x, y);
            }

            /// <summary>
            /// Occurs when the value of the Checked property has changed
            /// </summary>
            protected virtual void OnCheckedChanged()
            {
                if (ChangedChanged != null)
                {
                    ChangedChanged(this, EventArgs.Empty);
                }
            }

            protected override void OnSizeChanged(EventArgs e)
            {
                base.OnSizeChanged(e);
                AutoAdjustSize();
            }
            #endregion

            /// <summary>
            /// Automatically adjusts the control size to encompass the text and button
            /// </summary>
            private void AutoAdjustSize()
            {
                if (BackBuffer != null && _customAutoSize)
                {
                    int width = _BUTTON_DIM + (int)TextSize.Width + _TEXT_HORIZ_PAD;
                    int height = (int)(TextSize.Height + 0.5);

                    if (height < _BUTTON_DIM)
                    {
                        height = _BUTTON_DIM + _TEXT_VERT_PAD * 2;
                    }

                    base.Size = new Size(width, height);
                }
            }

            /// <summary>
            /// Uncheck all other VSRadioButtons in this controls parent
            /// </summary>
            private void UncheckOthersInParent()
            {
                foreach (Control control in this.Parent.Controls)
                {
                    var radio = control as RadioButton;

                    if (radio != null && radio != this)
                    {
                        radio.Checked = false;
                    }
                }
            }

            #region Properties
            /// <summary>
            /// Gets the fore-brush of the button which is determined by the current checkstate
            /// </summary>
            private SolidBrush ButtonForeBrush
            {
                get { return _checked ? _checkedBrush : _uncheckedBrush; }
            }

            /// <summary>
            /// Gets the size of the controls text using the controls font
            /// </summary>
            private SizeF TextSize
            {
                get
                {
                    return BackBuffer.Graphics.MeasureString(this.Text, this.Font);
                    // return TextRenderer.MeasureText(this.Text, this.Font);
                }
            }

            [DefaultValue(typeof(Color), "transparent")]
            public override Color BackColor
            {
                get { return base.BackColor; }
                set { base.BackColor = value; }
            }


            private bool _customAutoSize = true;
            [Category("Layout")]
            [Description("If true, the control will automatically size itself to its containing")]
            [DefaultValue(true)]
            public bool CustomAutoSize
            {
                get { return _customAutoSize; }
                set
                {
                    bool changed = _customAutoSize != value;

                    if (changed)
                    {
                        _customAutoSize = value;
                        AutoAdjustSize();
                    }
                }
            }

            [DefaultValue(typeof(Color), "White")]
            public override Color ForeColor
            {
                get { return base.ForeColor; }
                set { base.ForeColor = value; }
            }

            [DefaultValue(typeof(Font), "Segoe UI, 9pt")]
            public override Font Font
            {
                get { return base.Font; }
                set
                {
                    base.Font = value;
                    AutoAdjustSize();
                }
            }

            private bool _checked;
            [Category("Input")]
            [Description("Determines whether or not this control is checked")]
            public bool Checked
            {
                get { return _checked; }
                set
                {
                    bool changed = value != _checked;

                    if (changed)
                    {
                        _checked = value;
                        OnCheckedChanged();

                        if (UncheckOthers && this.Parent != null && _checked)
                        {
                            UncheckOthersInParent();
                        }

                        this.Invalidate();
                    }
                }
            }

            [Category("Behavior")]
            [Description("If true, unchecks all other VSRadioButtons in this controls parent")]
            [DefaultValue(true)]
            public bool UncheckOthers { get; set; }
            #endregion
        }

        /// <summary>
        /// Represents an abstract control which supports efficient back-buffer drawing
        /// </summary>
        abstract class BackbufferedControl : Control
        {
            protected BufferedGraphics BackBuffer;

            protected BackbufferedControl()
            {
                this.SetStyle(ControlStyles.AllPaintingInWmPaint | ControlStyles.UserPaint |
                    ControlStyles.ResizeRedraw | ControlStyles.OptimizedDoubleBuffer, true);

                UpdateGraphicsBuffer();
            }

            private void UpdateGraphicsBuffer()
            {
                if (this.Width > 0 && this.Height > 0)
                {
                    BufferedGraphicsContext bufContext = BufferedGraphicsManager.Current;
                    bufContext.MaximumBuffer = new Size(this.Width + 1, this.Height + 1);
                    BackBuffer = bufContext.Allocate(this.CreateGraphics(), this.ClientRectangle);
                    OnBackBufferUpdated();
                }
            }

            protected override void OnSizeChanged(EventArgs e)
            {
                base.OnSizeChanged(e);
                UpdateGraphicsBuffer();
            }

            protected override void OnPaint(PaintEventArgs e)
            {
                Color backColor = this.BackColor;

                if (GetStyle(ControlStyles.SupportsTransparentBackColor) &&
                    this.BackColor == Color.Transparent)
                {
                    backColor = this.Parent.BackColor;
                }

                BackBuffer.Graphics.Clear(backColor);
                Render();
                BackBuffer.Render(e.Graphics);
            }

            /// <summary>
            /// Provides implementation after the BackBuffer has been update
            /// (which occurs on size and in the constructor)
            /// </summary>
            protected virtual void OnBackBufferUpdated() { }

            /// <summary>
            /// Implement drawing logic here
            /// </summary>
            protected abstract void Render();
        }
#endregion
        #region  Flat Button
        class FlatButton : Button
        {
            public FlatButton()
            {
                BackColor = Color.DodgerBlue;
                ForeColor = Color.White;
                CurrentBackColor = BackColor;
            }

            private Color CurrentBackColor;

            private Color onHoverBackColor = Color.DarkOrchid;
            public Color OnHoverBackColor
            {
                get { return onHoverBackColor; }
                set { onHoverBackColor = value; Invalidate(); }
            }

            protected override void OnMouseEnter(EventArgs e)
            {
                base.OnMouseEnter(e);
                CurrentBackColor = onHoverBackColor;
                Invalidate();
            }

            protected override void OnMouseLeave(EventArgs e)
            {
                base.OnMouseLeave(e);
                CurrentBackColor = BackColor;
                Invalidate();
            }

            protected override void OnMouseDown(MouseEventArgs mevent)
            {
                base.OnMouseDown(mevent);
                CurrentBackColor = Color.RoyalBlue;
                Invalidate();
            }

            protected override void OnMouseUp(MouseEventArgs mevent)
            {
                base.OnMouseUp(mevent);
                CurrentBackColor = BackColor;
                Invalidate();
            }

            protected override void OnPaint(PaintEventArgs pevent)
            {
                base.OnPaint(pevent);
                pevent.Graphics.FillRectangle(new SolidBrush(CurrentBackColor), 0, 0, Width, Height);
                TextFormatFlags flags = TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter;
                TextRenderer.DrawText(pevent.Graphics, Text, Font, new Point(Width + 3, Height / 2), ForeColor, flags);
            }
        }
#endregion
        #region EmbossLabel
        public enum EmbossDirection { TopLeft, TopRight, BottomLeft, BottomRight };
        public enum EmbossStyle { ShadowCast, Extrude };
        class Ce_EmbossLabel : Control
        {
            private int _dropAmount = 5;
            private int _textContrast = 4;
            // This needs to be global because the GFX will be reassigned
            // and I need like to retain the quality in the UpdateGraphicsBuffer method
            private bool _isHighQuality = true;
            private EmbossStyle _embossStyle = EmbossStyle.Extrude;
            private TextRenderingHint _textRenderingHint = TextRenderingHint.AntiAliasGridFit;
            private BufferedGraphics _bufGraphics;
            private readonly BufferedGraphicsContext _bufContext = BufferedGraphicsManager.Current;
            private SolidBrush _surfaceBrush;
            private SolidBrush _embossBrush = new SolidBrush(Color.Black);
            private Size _textSize;
            private EmbossDirection _embossDirection = EmbossDirection.BottomRight;
            private ContentAlignment _textAlign = ContentAlignment.MiddleLeft;

            public Ce_EmbossLabel()
            {
                this.Font = new Font("Tahoma", 30f);
                this.ForeColor = Color.YellowGreen;

                this.SetStyle(ControlStyles.OptimizedDoubleBuffer | ControlStyles.ResizeRedraw |
                    ControlStyles.UserPaint | ControlStyles.AllPaintingInWmPaint, true);

                UpdateGraphicsBuffer();
            }

            protected override void OnPaint(PaintEventArgs e)
            {
                _bufGraphics.Graphics.Clear(this.BackColor);
                Render();
                _bufGraphics.Render(e.Graphics);
            }

            protected override void OnResize(EventArgs e)
            {
                base.OnResize(e);
                UpdateGraphicsBuffer();
                this.Update();
            }

            private void UpdateGraphicsBuffer()
            {
                // We cannot create a bitmap if any of these values are 0
                if (this.Size.Width > 0 && this.Size.Height > 0)
                {
                    _bufContext.MaximumBuffer = new Size(this.Width + 1, this.Height + 1);
                    _bufGraphics = _bufContext.Allocate(this.CreateGraphics(), this.ClientRectangle);

                    if (_isHighQuality)
                    {
                        _bufGraphics.Graphics.SmoothingMode = SmoothingMode.AntiAlias;
                        _bufGraphics.Graphics.CompositingQuality = CompositingQuality.HighQuality;
                        _bufGraphics.Graphics.PixelOffsetMode = PixelOffsetMode.HighQuality;
                    }
                    else
                    {
                        _bufGraphics.Graphics.SmoothingMode = SmoothingMode.Default;
                        _bufGraphics.Graphics.CompositingQuality = CompositingQuality.Default;
                        _bufGraphics.Graphics.PixelOffsetMode = PixelOffsetMode.Default;
                    }
                }
            }

            /// <summary>
            /// Gets the location of the text according to the text alignment
            /// </summary>
            private Point GetAlignmentLocation()
            {
                switch (_textAlign)
                {
                    case ContentAlignment.BottomCenter:
                        {
                            int x = (this.Width / 2) - (_textSize.Width / 2);
                            int y = this.Height - _textSize.Height;
                            return new Point(x, y);
                        }

                    case ContentAlignment.BottomLeft:
                        {
                            return new Point(0, this.Height - _textSize.Height);
                        }

                    case ContentAlignment.BottomRight:
                        {
                            return new Point(this.Width - _textSize.Width, this.Height - _textSize.Height);
                        }

                    case ContentAlignment.MiddleCenter:
                        {
                            int x = (this.Width / 2) - (_textSize.Width / 2);
                            int y = (this.Height / 2) - (_textSize.Height / 2);
                            return new Point(x, y);
                        }

                    case ContentAlignment.MiddleLeft:
                        {
                            int y = this.Height / 2 - (_textSize.Height / 2);
                            return new Point(0, y);
                        }

                    case ContentAlignment.MiddleRight:
                        {
                            int y = (this.Height / 2) - (_textSize.Height / 2);
                            int x = this.Width - _textSize.Width;
                            return new Point(x, y);
                        }

                    case ContentAlignment.TopCenter:
                        {
                            int x = (this.Width / 2) - (_textSize.Width / 2);
                            return new Point(x, 0);
                        }

                    case ContentAlignment.TopRight:
                        {
                            int x = this.Width - _textSize.Width;
                            return new Point(x, 0);
                        }

                    default: return Point.Empty;
                }
            }

            private void Render()
            {
                // Update textsize here for simplicity
                _textSize = _bufGraphics.Graphics.MeasureString(this.Text, this.Font).ToSize();
                Point shadowLayerPos, topLayerPos;
                // Disable size restrictions so we can set the actual size
                this.MinimumSize = this.MaximumSize = new Size(0, 0);

                if (this.AutoSize)
                {
                    // No text alignment needed with autosize
                    shadowLayerPos = topLayerPos = Point.Empty;
                    // Only adjust size when autosizing
                    this.Size = new Size(_textSize.Width, _textSize.Height);
                    // Lock size
                    this.MinimumSize = this.MaximumSize = this.Size;
                }
                else
                {
                    shadowLayerPos = GetAlignmentLocation();
                    topLayerPos = shadowLayerPos;
                }

                OffsetShadowLayer(ref shadowLayerPos);

                if (_embossStyle.Equals(EmbossStyle.Extrude))
                {
                    // Repaint the shadow along a diagonal path to create a 3D effect
                    while (!shadowLayerPos.X.Equals(topLayerPos.X) && !shadowLayerPos.Y.Equals(topLayerPos.Y))
                    {
                        if (shadowLayerPos.X < topLayerPos.X)
                        {
                            shadowLayerPos.X++;
                        }
                        else if (shadowLayerPos.X > topLayerPos.X)
                        {
                            shadowLayerPos.X--;
                        }

                        if (shadowLayerPos.Y < topLayerPos.Y)
                        {
                            shadowLayerPos.Y++;
                        }
                        else if (shadowLayerPos.Y > topLayerPos.Y)
                        {
                            shadowLayerPos.Y--;
                        }

                        _bufGraphics.Graphics.DrawString(this.Text, this.Font, _embossBrush, shadowLayerPos);
                    }
                }
                else if (_embossStyle.Equals(EmbossStyle.ShadowCast))
                {
                    _bufGraphics.Graphics.DrawString(this.Text, this.Font, _embossBrush, shadowLayerPos);
                }

                _bufGraphics.Graphics.DrawString(this.Text, this.Font, _surfaceBrush, topLayerPos);
            }

            /// <summary>
            /// Offsets the shadow layer, the shadow will move in relation to
            /// the top layer, not the other way around
            /// </summary>
            private void OffsetShadowLayer(ref Point layerPos)
            {
                switch (_embossDirection)
                {
                    case EmbossDirection.TopLeft:
                        layerPos = new Point(layerPos.X - _dropAmount,
                            layerPos.Y - _dropAmount);
                        break;

                    case EmbossDirection.TopRight:
                        layerPos = new Point(layerPos.X + _dropAmount,
                            layerPos.Y - _dropAmount);
                        break;

                    case EmbossDirection.BottomLeft:
                        layerPos = new Point(layerPos.X - _dropAmount,
                            layerPos.Y + _dropAmount);
                        break;

                    case EmbossDirection.BottomRight:
                        layerPos = new Point(layerPos.X + _dropAmount,
                            layerPos.Y + _dropAmount);
                        break;
                }
            }

            #region Properties
            [Category("Appearance")]
            [Description("Determines whether or not the graphics are high quality")]
            [DefaultValue(true)]
            public bool HighQuality
            {
                get { return _isHighQuality; }
                set
                {
                    _isHighQuality = value;
                    this.Invalidate();
                }
            }

            [Category("Appearance")]
            [Description("The distance in pixels the end of the emboss will be")]
            [DefaultValue(5)]
            public int EmbossAmount
            {
                get { return _dropAmount; }
                set
                {
                    _dropAmount = value;
                    this.Invalidate();
                }
            }

            [Category("Appearance")]
            [DisplayName("Shadow Position")]
            [Description("The position of the shadow")]
            [DefaultValue((EmbossDirection)3)]
            public EmbossDirection ShadowPos
            {
                get { return _embossDirection; }
                set
                {
                    _embossDirection = value;
                    this.Invalidate();
                }
            }

            [DefaultValue(typeof(Color), "YellowGreen")]
            public override Color ForeColor
            {
                get { return base.ForeColor; }
                set
                {
                    base.ForeColor = value;
                    _surfaceBrush = new SolidBrush(value);
                    this.Invalidate();
                }
            }

            [Browsable(true)]
            public override string Text
            {
                get { return base.Text; }
                set
                {
                    base.Text = value;
                    this.Invalidate();
                    this.Update(); // Needed to update bouds
                }
            }

            public override Font Font
            {
                get { return base.Font; }
                set
                {
                    base.Font = value;
                    this.Invalidate();
                    this.Update();
                }
            }

            [Category("Layout")]
            [DefaultValue(ContentAlignment.MiddleLeft)]
            public ContentAlignment TextAlign
            {
                get { return _textAlign; }
                set
                {
                    _textAlign = value;
                    this.Invalidate();
                }
            }

            [Browsable(true)]
            [DefaultValue(true)]
            public override bool AutoSize
            {
                get { return base.AutoSize; }
                set
                {
                    base.AutoSize = value;
                    this.Refresh();
                }
            }

            [Category("Appearance")]
            [DefaultValue(TextRenderingHint.AntiAliasGridFit)]
            public TextRenderingHint TextRenderingHint
            {
                get { return _textRenderingHint; }
                set
                {
                    _textRenderingHint = value;
                    UpdateGraphicsBuffer();
                    this.Invalidate();
                }
            }

            [Description("The gamma correction value used for rendering antialiased " +
            "and ClearType text.The values must be between 0 and 12. The default value is 4.")]
            [Category("Appearance")]
            [DefaultValue(4)]
            public int TextContrast
            {
                get { return _textContrast; }
                set
                {
                    _textContrast = value;
                    UpdateGraphicsBuffer();
                    this.Invalidate();
                }
            }

            [Description("The type of extrusion to use")]
            [Category("Appearance")]
            [DefaultValue(EmbossStyle.Extrude)]
            public EmbossStyle EmbossStyle
            {
                get { return _embossStyle; }
                set
                {
                    _embossStyle = value;
                    this.Invalidate();
                }
            }

            [Editor(typeof(ColorDialog), typeof(ColorDialog))]
            [Description("The color of the embossment")]
            [Category("Appearance")]
            [DefaultValue(typeof(Color), "Black")]
            public Color EmbossColor
            {
                get
                {
                    using (Pen pen = new Pen(_embossBrush))
                    {
                        return pen.Color;
                    }
                }
                set
                {
                    _embossBrush = new SolidBrush(value);
                    this.Invalidate();
                }
            }
            #endregion
        }   
#endregion
        #region text box
        public class Ce_TextBox : Control
        {
            private TextBox withEventsField_txtbox = new TextBox();
            public TextBox txtbox
            {
                get { return withEventsField_txtbox; }
                set
                {
                    if (withEventsField_txtbox != null)
                    {
                        //withEventsField_txtbox.TextChanged -= TextChngTxtBox;
                    }
                    withEventsField_txtbox = value;
                    if (withEventsField_txtbox != null)
                    {
                        //withEventsField_txtbox.TextChanged += TextChngTxtBox;
                    }
                }

            }
            #region " Control Help - Properties & Flicker Control "
            private bool _passmask = false;
            public bool UseSystemPasswordChar
            {
                get { return _passmask; }
                set
                {
                    txtbox.UseSystemPasswordChar = UseSystemPasswordChar;
                    _passmask = value;
                    Invalidate();
                }
            }
            private int _maxchars = 32767;
            public int MaxLength
            {
                get { return _maxchars; }
                set
                {
                    _maxchars = value;
                    txtbox.MaxLength = MaxLength;
                    Invalidate();
                }
            }
            private HorizontalAlignment _align;
            public HorizontalAlignment TextAlignment
            {
                get { return _align; }
                set
                {
                    _align = value;
                    Invalidate();
                }
            }
            private bool _multiline = false;
            public bool MultiLine
            {
                get { return _multiline; }
                set
                {
                    _multiline = value;
                    Invalidate();
                }
            }
            private bool _wordwrap = false;
            public bool WordWrap
            {
                get { return _wordwrap; }
                set
                {
                    _wordwrap = value;
                    Invalidate();
                }
            }

            protected override void OnPaintBackground(System.Windows.Forms.PaintEventArgs pevent)
            {
            }
            protected override void OnTextChanged(System.EventArgs e)
            {
                base.OnTextChanged(e);
                Invalidate();
            }
            protected override void OnBackColorChanged(System.EventArgs e)
            {
                base.OnBackColorChanged(e);
                txtbox.BackColor = BackColor;
                Invalidate();
            }
            protected override void OnForeColorChanged(System.EventArgs e)
            {
                base.OnForeColorChanged(e);
                txtbox.ForeColor = ForeColor;
                Invalidate();
            }
            protected override void OnFontChanged(System.EventArgs e)
            {
                base.OnFontChanged(e);
                txtbox.Font = Font;
            }
            protected override void OnGotFocus(System.EventArgs e)
            {
                base.OnGotFocus(e);
                txtbox.Focus();
            }
            public void TextChngTxtBox()
            {
                Text = txtbox.Text;
            }
            public void TextChng()
            {
                txtbox.Text = Text;
            }
            protected override void OnResize(System.EventArgs e)
            {
                base.OnResize(e);
                if (MultiLine == false)
                {
                    Height = 24;
                }
            }
            public void NewTextBox()
            {
                var _with1 = txtbox;
                _with1.Multiline = MultiLine;
                _with1.BackColor = Color.FromArgb(50, 50, 50);
                _with1.ForeColor = ForeColor;
                _with1.Text = string.Empty;
                _with1.TextAlign = HorizontalAlignment.Center;
                _with1.BorderStyle = BorderStyle.None;
                _with1.Location = new Point(5, 4);
                _with1.Font = new Font("Verdana", 8, FontStyle.Regular);
                if (MultiLine == true)
                {
                    if (WordWrap == true)
                    {
                        _with1.WordWrap = true;
                    }
                    else
                    {
                        _with1.WordWrap = false;
                    }
                }
                else
                {
                    if (WordWrap == true)
                    {
                        _with1.WordWrap = true;
                    }
                    else
                    {
                        _with1.WordWrap = false;
                    }
                }
                _with1.Size = new Size(Width - 10, Height - 11);
                _with1.UseSystemPasswordChar = UseSystemPasswordChar;

            }
            #endregion

            public Ce_TextBox()
                : base()
            {
                //TextChanged += TextChng;

                NewTextBox();
                Controls.Add(txtbox);
                Text = "";
                BackColor = Color.FromArgb(50, 50, 50);
                ForeColor = Color.Silver;
                Size = new Size(135, 24);
                DoubleBuffered = true;
            }

            protected override void OnPaint(System.Windows.Forms.PaintEventArgs e)
            {
                Bitmap B = new Bitmap(Width, Height);
                Graphics G = Graphics.FromImage(B);
                G.SmoothingMode = SmoothingMode.HighQuality;
                Rectangle ClientRectangle = new Rectangle(0, 0, Width - 1, Height - 1);

                var _with2 = txtbox;
                _with2.Multiline = MultiLine;
                if (MultiLine == false)
                {
                    Height = txtbox.Height + 11;
                    if (WordWrap == true)
                    {
                        _with2.WordWrap = true;
                    }
                    else
                    {
                        _with2.WordWrap = false;
                    }
                }
                else
                {
                    txtbox.Height = Height - 11;
                    if (WordWrap == true)
                    {
                        _with2.WordWrap = true;
                    }
                    else
                    {
                        _with2.WordWrap = false;
                    }
                }
                _with2.Width = Width - 10;
                _with2.TextAlign = TextAlignment;
                _with2.UseSystemPasswordChar = UseSystemPasswordChar;

                G.Clear(BackColor);

                Color[] c = new Color[] {
            Color.FromArgb(20, 20, 20),
            Color.FromArgb(40, 40, 40),
            Color.FromArgb(45, 45, 45),
            Color.FromArgb(46, 46, 46),
            Color.FromArgb(47, 47, 47),
            Color.FromArgb(48, 48, 48),
            Color.FromArgb(49, 49, 49),
            Color.FromArgb(50, 50, 50)
        };
                G.FillPath(new SolidBrush(Color.FromArgb(50, 50, 50)), Draw.RoundRect(ClientRectangle, 3));
                Draw.InnerGlowRounded(G, ClientRectangle, 3, c);

                e.Graphics.DrawImage((Bitmap)B.Clone(), 0, 0);
                G.Dispose();
                B.Dispose();
            }
        }
        #endregion
}

